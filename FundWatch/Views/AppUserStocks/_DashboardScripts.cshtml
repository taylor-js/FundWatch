@* Dashboard scripts used in all tabs *@

<script>
    // Chart adjustments for mobile/desktop with consistent sizing
    document.addEventListener('DOMContentLoaded', function() {
        // Is this a mobile device?
        const isMobile = window.innerWidth < 992;
        
        // Get the pie chart
        const sectorChart = document.getElementById('sectorChartHoldings');
        if (sectorChart && sectorChart.ej2_instances && sectorChart.ej2_instances[0]) {
            // Set legend position based on device
            if (isMobile) {
                sectorChart.ej2_instances[0].legendSettings.position = 'Bottom';
                sectorChart.ej2_instances[0].legendSettings.width = '100%';
                sectorChart.ej2_instances[0].legendSettings.height = '15%';
                
                // Ensure chart has same dimensions as table on mobile
                sectorChart.style.width = '100%';
                sectorChart.style.height = '350px';
            } else {
                sectorChart.ej2_instances[0].legendSettings.position = 'Right';
                sectorChart.ej2_instances[0].legendSettings.width = '30%';
                sectorChart.ej2_instances[0].legendSettings.height = '70%';
                
                // Ensure chart has same dimensions as table on desktop
                sectorChart.style.width = '100%';
                sectorChart.style.height = '350px';
            }
            
            // Refresh the chart
            setTimeout(function() {
                sectorChart.ej2_instances[0].refresh();
                
                // Make sure all chart elements are visible
                const svgElements = sectorChart.querySelectorAll('svg, g, path, circle');
                svgElements.forEach(function(el) {
                    el.style.visibility = 'visible';
                });
                
                // Force chart container to match dimensions
                const container = sectorChart.closest('.e-accumulationchart');
                if (container) {
                    container.style.width = '100%';
                    container.style.height = '350px';
                    container.style.visibility = 'visible';
                }
            }, 100);
        }
    });
    
    // Global chart references
    
    // Chart labels fix utility function
    function fixChartLabels(chartId) {
        const chart = document.getElementById(chartId);
        if (chart && chart.ej2_instances && chart.ej2_instances[0]) {
            // Special handling for Performance tab charts to ensure consistent height
            if (chartId === 'topHoldingsChart' || chartId === 'growthAnalysisChart' || 
                chartId === 'monthlyPerformanceChart' || chartId === 'rollingReturnsChart') {
                const chartInstance = chart.ej2_instances[0];
                // Set fixed height to be consistent across all Performance tab charts
                chartInstance.height = '650px';
                console.log(`Fixed ${chartId} height to 650px`);
            }
            
            // Fix x-axis labels
            const xAxisLabels = chart.querySelectorAll('.e-primaryxaxis-labels text');
            if (xAxisLabels && xAxisLabels.length > 0) {
                // Ensure all labels are visible
                xAxisLabels.forEach(function(label, index) {
                    label.style.visibility = 'visible';
                    
                    // Special handling for first and last labels
                    if (index === 0) {
                        label.setAttribute('text-anchor', 'start');
                    } else if (index === xAxisLabels.length - 1) {
                        label.setAttribute('text-anchor', 'end');
                        // Move the last label further left to prevent cutoff
                        label.setAttribute('x', parseFloat(label.getAttribute('x')) - 20);
                    }
                });
                
                // Force chart refresh to apply changes
                chart.ej2_instances[0].refresh();
                console.log(`Fixed labels for chart: ${chartId}`);
            }
        }
    }
    
    // Format utility functions
    function formatCurrency(value) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(value);
    }

    function formatPercentage(value) {
        return new Intl.NumberFormat('en-US', {
            style: 'percent',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(value / 100);
    }

    // Grid functionality
    function getCurrentPrice(field, data) {
        return data.CurrentPrice || 0;
    }

    function getValueTemplate(props) {
        if (!props || !props.NumberOfSharesPurchased) return '$0.00';
        const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
        const value = shares * (props.CurrentPrice || 0);
        return formatCurrency(value);
    }

    function getPerformanceTemplate(props) {
        if (!props || !props.NumberOfSharesPurchased || !props.PurchasePrice) return '0.00%';
        const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
        const currentValue = shares * (props.CurrentPrice || 0);
        const costBasis = shares * props.PurchasePrice;
        const performance = costBasis !== 0 ? ((currentValue - costBasis) / costBasis) * 100 : 0;

        const className = performance >= 0 ? 'text-success' : 'text-danger';
        return `<span class="${className}">${performance.toFixed(2)}%</span>`;
    }

    function colorPerformanceCells() {
        document.querySelectorAll('.performance-cell').forEach(cell => {
            const value = parseFloat(cell.textContent);
            if (!isNaN(value)) {
                cell.classList.add(value > 0 ? 'positive' : 'negative');
            }
        });
    }
    
    // Let Bootstrap handle tab switching and add swipe functionality
    document.addEventListener('DOMContentLoaded', function() {
        console.log("Dashboard tabs initialized");

        // Initialize swipeable tabs
        const tabsContainer = document.querySelector('.swipeable-tabs');
        if (tabsContainer) {
            let startX = 0;
            let currentX = 0;
            let isDragging = false;
            let tabNavItems = Array.from(tabsContainer.querySelectorAll('.nav-item'));

            // Touch start event
            tabsContainer.addEventListener('touchstart', function(e) {
                startX = e.touches[0].clientX;
                isDragging = true;
                tabsContainer.style.transition = 'none';
            }, { passive: true });

            // Touch move event
            tabsContainer.addEventListener('touchmove', function(e) {
                if (!isDragging) return;
                currentX = e.touches[0].clientX;
                const diffX = currentX - startX;

                // Limit dragging to prevent overscroll
                if (diffX > 0 && tabsContainer.scrollLeft === 0) {
                    // At left edge, limit overscroll
                    return;
                } else if (diffX < 0 && (tabsContainer.scrollLeft + tabsContainer.clientWidth >= tabsContainer.scrollWidth - 5)) {
                    // At right edge, limit overscroll
                    return;
                }

                // Apply the scroll to follow the touch
                tabsContainer.scrollLeft -= diffX;
                startX = currentX;
            }, { passive: true });

            // Touch end event
            tabsContainer.addEventListener('touchend', function() {
                isDragging = false;
                tabsContainer.style.transition = 'transform 0.3s ease';
            }, { passive: true });

            // Handle tab activation on touch
            tabNavItems.forEach(item => {
                const tabLink = item.querySelector('.nav-link');
                tabLink.addEventListener('click', function() {
                    // Ensure the selected tab is visible by scrolling to it
                    const tabRect = item.getBoundingClientRect();
                    const containerRect = tabsContainer.getBoundingClientRect();

                    if (tabRect.left < containerRect.left) {
                        // Tab is to the left of visible area
                        tabsContainer.scrollLeft += (tabRect.left - containerRect.left) - 10;
                    } else if (tabRect.right > containerRect.right) {
                        // Tab is to the right of visible area
                        tabsContainer.scrollLeft += (tabRect.right - containerRect.right) + 10;
                    }
                });
            });
        }

        // Prevent negative width/height on SVG elements
        // This fixes the "<svg> attribute width: A negative value is not valid" error
        const originalCreateSVG = ej.base.createSvg;
        if (originalCreateSVG) {
            ej.base.createSvg = function() {
                const svg = originalCreateSVG.apply(this, arguments);

                // Override the setAttribute method to prevent negative dimensions
                const originalSetAttribute = svg.setAttribute;
                svg.setAttribute = function(name, value) {
                    if ((name === 'width' || name === 'height') && parseFloat(value) < 0) {
                        console.warn(`Prevented negative ${name} value: ${value}`);
                        value = '0'; // Use 0 instead of negative value
                    }
                    return originalSetAttribute.call(this, name, value);
                };

                return svg;
            };
        }
        
        // Fix all chart labels when tab is shown
        function fixAllChartLabels() {
            // Apply fixes to all charts in the dashboard
            setTimeout(function() {
                fixChartLabels('topHoldingsChart');
                fixChartLabels('growthAnalysisChart');
                fixChartLabels('monthlyPerformanceChart');
                // Risk analysis chart is now using Highcharts and doesn't need this fix
                // Stock chart is now using Highcharts and doesn't need this fix
            }, 300);
        }
        
        // Run initial fix on page load
        fixAllChartLabels();
        
        // Add special handling for tabs 
        document.querySelectorAll('a[data-bs-toggle="tab"]').forEach(tabLink => {
            tabLink.addEventListener('shown.bs.tab', function(event) {
                // Fix chart labels whenever any tab is shown
                fixAllChartLabels();
                
                // Add special class for Holdings tab
                const targetTab = event.target.getAttribute('data-bs-target');
                if (targetTab === '#holdingsTab') {
                    document.getElementById('dashboard-container').classList.add('tab-active-holdings');
                } else {
                    document.getElementById('dashboard-container').classList.remove('tab-active-holdings');
                }
                
                // Handle specific tabs with special needs
                if (targetTab === '#analyticsTab') {
                    setTimeout(function() {
                        // Trigger analytics chart rendering through the tab's own handler
                        // The Analytics tab has its own event listener that will handle chart rendering
                        console.log('Analytics tab shown - charts will be rendered by tab handler');
                    }, 200);
                } else if (targetTab === '#performanceTab') {
                    setTimeout(function() {
                        // Ensure growth chart labels aren't cut off in Performance tab
                        const growthChart = document.getElementById('growthAnalysisChart');
                        const monthlyChart = document.getElementById('monthlyPerformanceChart');
                        
                        if (growthChart && growthChart.ej2_instances && growthChart.ej2_instances[0]) {
                            const chartInstance = growthChart.ej2_instances[0];
                            // Ensure adequate right margin for the chart
                            setTimeout(function() {
                                    // Just refresh the chart - CSS will handle label positioning
                                chartInstance.refresh();
                            }, 100);
                            console.log('Growth Analysis chart refreshed with label positioning');
                        }
                        
                        if (monthlyChart && monthlyChart.ej2_instances && monthlyChart.ej2_instances[0]) {
                            monthlyChart.ej2_instances[0].margin.right = 30;
                            monthlyChart.ej2_instances[0].refresh();
                            console.log('Monthly Performance chart refreshed');
                        }
                    }, 200);
                }
                
                // Update URL for bookmarking
                const tabName = targetTab.replace('#', '').replace('Tab', '');
                const url = new URL(window.location.href);
                url.searchParams.set('tab', tabName);
                window.history.replaceState({}, '', url);
            });
        });
        
        // Handle View Portfolio Growth button
        const viewPortfolioBtn = document.getElementById('viewPerformanceTabBtn');
        if (viewPortfolioBtn) {
            viewPortfolioBtn.addEventListener('click', function() {
                // Trigger click on the Performance tab
                document.getElementById('performance-tab').click();
            });
        }
        
        // Check URL for tab parameter
        const urlParams = new URLSearchParams(window.location.search);
        const tabParam = urlParams.get('tab');

        if (tabParam && tabParam !== 'overview') {
            // Find and click the correct tab, but only if it's not 'overview'
            // This way, overview remains the default unless explicitly changed
            const tabId = `${tabParam}-tab`;
            const tabLink = document.getElementById(tabId);
            if (tabLink) {
                tabLink.click();
            }
        } else {
            // Ensure Overview tab is active by default
            const overviewTab = document.getElementById('overview-tab');
            if (overviewTab && !overviewTab.classList.contains('active')) {
                overviewTab.click();
            }
        }
        
        // Fix chart labels immediately and after resize
        fixAllChartLabels();
        window.addEventListener('resize', fixAllChartLabels);
    });

    // Initialization
    window.addEventListener('load', function() {
        // Initialize UI elements
        colorPerformanceCells();

        const grid = document.getElementById('holdingsGrid')?.ej2_instances?.[0];
        if (grid) {
            grid.refreshHeader();
            grid.refresh();
        }
        
        // Stock chart is now using Highcharts, no Syncfusion initialization needed
        
        // Chart-related initialization
        document.querySelectorAll('.chart-description').forEach(function(desc) {
            // Add data-value attribute to data labels for CSS targeting
            const labels = document.querySelectorAll('.e-data-label');
            if (labels && labels.length > 0) {
                labels.forEach(function(label) {
                    if (label.textContent) {
                        label.setAttribute('data-value', label.textContent);
                    }
                });
            }
        });
        
        // Chart descriptions now handled in CSS
        
        // Initialize floating action button
        const addButton = document.getElementById('addStockButton');
        if (addButton) {
            addButton.addEventListener('click', function() {
                window.location.href = '/AppUserStocks/CreateOrEdit';
            });
            
            // Button hover effects handled in CSS
        }
        
        // Ensure sector chart is responsive
        function refreshSectorChart() {
            const sectorChart = document.getElementById('sectorChartHoldings');
            if (sectorChart && sectorChart.ej2_instances && sectorChart.ej2_instances[0]) {
                setTimeout(() => {
                    sectorChart.ej2_instances[0].refresh();
                }, 100);
            }
        }
        
        // Handle window resize
        window.addEventListener('resize', function() {
            refreshSectorChart();
        });
        
        // Handle tab switch for sector chart
        document.querySelectorAll('a[data-bs-toggle="tab"]').forEach(tab => {
            tab.addEventListener('shown.bs.tab', function(e) {
                if (e.target.getAttribute('data-bs-target') === '#holdingsTab') {
                    refreshSectorChart();
                }
            });
        });
    });
</script>