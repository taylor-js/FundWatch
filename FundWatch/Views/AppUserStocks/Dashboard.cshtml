@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids
@{
    ViewData["Title"] = "Stock Portfolio Dashboard";
    var culture = new System.Globalization.CultureInfo("en-US");

}

<div class="container-fluid mt-4 mb-4">
    <!-- Portfolio Overview Cards -->
    <div class="row mb-4">
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Total Portfolio Value</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.TotalValue.ToString("C2", culture)</h3>
                    <small class="@(Model.PortfolioMetrics.TotalPerformance >= 0 ? "text-success" : "text-danger")">
                        @(Model.PortfolioMetrics.TotalPerformance >= 0 ? "+" : "")@Model.PortfolioMetrics.TotalPerformance.ToString("F2")%
                    </small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Portfolio Diversity</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.UniqueSectors</h3>
                    <small class="text-muted">Sectors Represented</small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Best Performer</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.BestPerformingStock</h3>
                    <small class="text-success">
                        @(Model.PortfolioMetrics.BestPerformingStockReturn.ToString("F2") ?? "0.00")%
                    </small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h5 class="card-title mb-0">Worst Performer</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.WorstPerformingStock</h3>
                    <small class="text-danger">
                        @(Model.PortfolioMetrics.WorstPerformingStockReturn.ToString("F2") ?? "0.00")%
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Stock Performance Chart -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Stock Performance History</h5>
                </div>
                <div class="card-body">
                    @if (Model.PerformanceData != null && Model.PerformanceData.Any())
                    {
                        @* <div class="small text-muted mb-2">
                            <strong>Debug Info:</strong>
                            <ul>
                                @foreach (var stock in Model.PerformanceData)
                                {
                                    <li>@stock.Key: @stock.Value.Count points (@stock.Value.First().Date.ToString("d") - @stock.Value.Last().Date.ToString("d"))</li>
                                }
                            </ul>
                        </div> *@

                        @(Html.EJS().StockChart("stockChart")
                            .Series(sr =>
                            {
                                Func<int, int, string> getColor = (int i, int total) =>
                                {
                                    double goldenRatio = 0.618033988749895;
                                    double hue = (i * goldenRatio * 360) % 360;
                                    return $"hsl({hue}, 70%, 50%)";
                                };

                                int index = 0;
                                foreach (var stock in Model.PerformanceData.OrderBy(kvp => kvp.Key))  // Sort by symbol for consistent colors
                                {
                                    sr.Type(ChartSeriesType.Line)
                                    .DataSource(stock.Value)
                                    .XName("Date")
                                    .YName("Value")
                                    .Name(stock.Key)
                                    .Width(2)
                                    .Opacity(1)
                                    .Fill(getColor(index, Model.PerformanceData.Count))
                                    .Add();

                                    index++;
                                }
                            })
                            //.Title("Portfolio Performance")
                            .LegendSettings(ls => ls
                            .Visible(true)
                            .ToggleVisibility(true)
                            .Position(LegendPosition.Bottom)
                            .Alignment(Alignment.Center)
                            .EnablePages(false)
                            )
                            .Tooltip(tooltip => tooltip
                            .Enable(true)
                            .Format("${series.name}: ${point.y}")
                            .Shared(true)
                            )
                            .Crosshair(ch => ch
                            .Enable(true)
                            )
                            .PrimaryYAxis(py => py
                            .LabelFormat("${value}")
                            )
                            .EnablePeriodSelector(true)
                            .EnableSelector(true)
                            .Render()
                            )
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No performance data available. Add some stocks to see their performance over time.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Sector Distribution -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Sector Distribution</h5>
                </div>
                <div class="card-body" >
                    @(Html.EJS().AccumulationChart("sectorChart")
                        .Series(sr =>
                        {
                            sr.DataSource(Model.SectorDistribution.Select(x => new { x.Key, x.Value }))
                            .XName("Key")
                            .YName("Value")
                            .Type(AccumulationType.Pie)
                            .DataLabel(dl => dl
                            .Visible(true)
                            .Name("${point.x}: ${point.y}")
                            .Position(AccumulationLabelPosition.Outside)
                            .ConnectorStyle(style => style.Color("#FFFFFF"))
                            .Font(font => font.Color("#FFFFFF"))
                            )
                            .Add();
                        })
                        .LegendSettings(lg => lg
                        .Visible(true)
                        .Position(LegendPosition.Right)
                        )
                        .Render()
                        )
                </div>
            </div>
        </div>

        <!-- Top Holdings Bar Chart -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Top 5 Holdings by Value</h5>
                </div>
                <div class="card-body">
                    @{
                        // Prepare the data for the chart
                        var topHoldings = Model.UserStocks
                        .Select(x => new
                        {
                            Stock = x.StockSymbol,
                            NumberOfShares = x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0),
                            CurrentPrice = x.CurrentPrice,
                            Value = (x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0)) * x.CurrentPrice
                        })
                        .Where(x => x.NumberOfShares > 0) // Exclude stocks with zero holdings
                        .OrderByDescending(x => x.Value)
                        .Take(5)
                        .ToList();
                    }
                    @(Html.EJS().Chart("topHoldingsChart")
                        .Width("100%") // Make the chart fill the container width
                        .Height("100%") // Make the chart fill the container height
                        .PrimaryXAxis(px => px
                        .ValueType(Syncfusion.EJ2.Charts.ValueType.Category) // X-axis represents categories
                        .Title("Stock")
                        .TitleStyle(style => style.Color("#FFFFFF"))
                        .LabelStyle(style => style.Color("#FFFFFF")) // X-axis title
                        )
                        .PrimaryYAxis(py => py
                        .Title("Value (USD)")
                        .TitleStyle(style => style.Color("#FFFFFF"))// Y-axis title
                        .LabelFormat("${value}")
                        .LabelStyle(style => style.Color("#FFFFFF")) // Format Y-axis labels as currency
                        )
                        .Series(sr =>
                        {
                            sr.Type(ChartSeriesType.Column) // Bar chart (column chart)
                            .DataSource(topHoldings) // Data source for the chart
                            .XName("Stock") // X-axis binding property
                            .YName("Value") // Y-axis binding property
                            .Name("Current Value") // Static name for the series
                            .Marker(m => m
                            .DataLabel(dl => dl
                            .Visible(true) // Enable data labels
                            .Position(LabelPosition.Top) // Position the data labels on top of the bars
                            )
                            )
                            .ColumnWidth(0.6) // Adjust column width for better aesthetics
                            .Add();
                        })
                        //.Title("Top 5 Holdings") // Title for the chart
                        .Tooltip(tt => tt
                        .Enable(true) // Enable the tooltip
                        .Format("<b>${point.x}</b>: ${point.y}") // Proper format for stock and value
                        )
                        .LegendSettings(lg => lg
                        .Visible(false) // Hide the legend since there's only one series
                        )
                        .Render() // Render the chart
                        )
                </div>
            </div>
        </div>

    </div>
    @await Html.PartialAsync("_StockGrid", Model)

</div>

@section Styles {
    <style>
        .performance-cell.positive {
            color: #28a745;
        }

        .performance-cell.negative {
            color: #dc3545;
        }

        .card {
            transition: transform .2s;
        }

            .card:hover {
                transform: translateY(-5px);
            }
    </style>
}

@section Scripts {
    <script>
        function initializeStockChart() {
            const stockChart = document.getElementById('stockChart');
            if (stockChart && stockChart.ej2_instances && stockChart.ej2_instances[0]) {
                stockChart.ej2_instances[0].refresh();
            }
        }
        function tooltipRender(args) {
            if (args.series.xName === 'Date') {
                var value = new Date(args.point.x);
                args.text = value.toLocaleDateString() + ' : $' + args.point.y.toFixed(2);
            }
        }

        function formatCurrency(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value);
        }

        function formatPercentage(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value / 100);
        }

        // Grid functionality
        function getCurrentPrice(field, data) {
            return data.CurrentPrice || 0;
        }

        function getValueTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased) return '$0.00';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const value = shares * (props.CurrentPrice || 0);
            return formatCurrency(value);
        }

        function getPerformanceTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased || !props.PurchasePrice) return '0.00%';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const currentValue = shares * (props.CurrentPrice || 0);
            const costBasis = shares * props.PurchasePrice;
            const performance = costBasis !== 0 ? ((currentValue - costBasis) / costBasis) * 100 : 0;

            const className = performance >= 0 ? 'text-success' : 'text-danger';
            return `<span class="${className}">${performance.toFixed(2)}%</span>`;
        }

        function colorPerformanceCells() {
            document.querySelectorAll('.performance-cell').forEach(cell => {
                const value = parseFloat(cell.textContent);
                if (!isNaN(value)) {
                    cell.classList.add(value > 0 ? 'positive' : 'negative');
                }
            });
        }

        // Chart functions
        function chartLoad(args) {
            args.chart.theme = 'Material';
        }

        // Initialization
        window.addEventListener('load', function () {
            colorPerformanceCells();

            const grid = document.getElementById('holdingsGrid')?.ej2_instances?.[0];
            if (grid) {
                grid.refreshHeader();
                grid.refresh();
            }
        });
    </script>
}