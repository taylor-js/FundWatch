@using System.Globalization
@using static FundWatch.Controllers.AppUserStocksController
@model IEnumerable<FundWatch.Models.AppUserStock>
@{
    ViewData["Title"] = "Stock Portfolio Dashboard";
    var realTimeTrendData = ViewBag.RealTimeTrendData as List<RealTimeDataPoint>;
    var stockSummaryData = ViewBag.StockSummary as List<StockSummaryData>;
    var bubbleChartData = ViewBag.BubbleChartData as List<BubbleChartData>;
}

<h2 class="text-center mb-4 mt-4">@ViewData["Title"]</h2>

<div class="container-fluid mt-4 mb-4">
    <!-- Portfolio Overview -->
    <!-- Portfolio Overview -->
    <div class="row">
        @* Improved card layout with responsive design *@
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow fixed-card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title">Total Portfolio Value</h5>
                </div>
                <div class="card-body text-center">
                    <p class="card-text display-value">
                        @(stockSummaryData != null ? stockSummaryData.Sum(s => s.TotalValue).ToString("C2", CultureInfo.CreateSpecificCulture("en-US")) : "N/A")
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow fixed-card">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title">Total Number of Stocks</h5>
                </div>
                <div class="card-body text-center">
                    <p class="card-text display-value">@(stockSummaryData?.Count ?? 0)</p>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow fixed-card">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title">Best Performing Stock</h5>
                </div>
                <div class="card-body text-center">
                    <p class="card-text display-value">
                        @(stockSummaryData != null && stockSummaryData.Any()
                            ? stockSummaryData.OrderByDescending(s => s.PerformancePercentage).First().StockSymbol
                            : "N/A")
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3 mb-4">
            <div class="card shadow fixed-card">
                <div class="card-header bg-danger text-white">
                    <h5 class="card-title">Worst Performing Stock</h5>
                </div>
                <div class="card-body text-center">
                    <p class="card-text display-value">
                        @(stockSummaryData != null && stockSummaryData.Any()
                            ? stockSummaryData.OrderBy(s => s.PerformancePercentage).First().StockSymbol
                            : "N/A")
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- Monthly Stock Value Trend Chart -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Real-time Stock Chart</h5>
                </div>
                <div class="card-body">
                    @if (realTimeTrendData != null && realTimeTrendData.Any())
                    {
                        <ejs-stockchart id="realTimeStockChart" load="stockChartLoad"
                                        width="100%" height="500px">
                            <e-stockchart-series-collection>
                                @foreach (var stock in realTimeTrendData.GroupBy(x => x.StockSymbol))
                                {
                                    <e-stockchart-series type="Line" xName="x" yName="close" name="@stock.Key" dataSource="@stock" width="2"></e-stockchart-series>
                                }
                            </e-stockchart-series-collection>
                            <e-stockchart-primaryxaxis valueType="DateTime" labelFormat="MM-dd-yyyy"></e-stockchart-primaryxaxis>
                            <e-stockchart-primaryyaxis></e-stockchart-primaryyaxis>
                            <e-stockchart-tooltipsettings showNearestPoint="true" enable="true" shared="false" position="Nearest" format="${series.name}<br>Date: ${point.x}<br>Open: ${point.open}<br>High: ${point.high}<br>Low: ${point.low}<br>Close: ${point.close}"></e-stockchart-tooltipsettings>
                            <e-stockchart-crosshairsettings enable="true"></e-stockchart-crosshairsettings>
                            <e-stockchart-legendsettings visible="true"></e-stockchart-legendsettings>
                        </ejs-stockchart>
                    }
                    else
                    {
                        <p>No data available for the Real Time Stock Chart.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Stock Performance Chart -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Stock Performance</h5>
                </div>
                <div class="card-body">
                    @if (stockSummaryData != null && stockSummaryData.Any())
                    {
                        <ejs-chart id="stockPerformanceChart" background="#212529">
                            <e-chart-primaryxaxis valueType="Category" title="Stock Symbol" labelRotation="90" LabelIntersectAction="Rotate90" titleStyle="@(new Syncfusion.EJ2.Charts.ChartFont { Color = "white" })">
                                <e-labelstyle color="#ffffff"></e-labelstyle>
                            </e-chart-primaryxaxis>
                            <e-chart-primaryyaxis title="Performance (%)" labelFormat="n2" titleStyle="@(new Syncfusion.EJ2.Charts.ChartFont { Color = "white" })">
                                <e-labelstyle color="#ffffff"></e-labelstyle>
                            </e-chart-primaryyaxis>
                            <e-series-collection>
                                @foreach (var stock in ViewBag.StockSummary)
                                {
                                    <e-series dataSource="@(new List<StockSummaryData> { stock })"
                                              xName="StockSymbol"
                                              yName="PerformancePercentage"
                                              type="Column"
                                              name="@stock.StockSymbol"
                                              width="1"
                                              columnWidth="1">
                                        <!-- Adjust this value to make bars thicker -->
                                    </e-series>
                                }
                            </e-series-collection>
                            <e-chart-tooltipsettings enable="true" format="Symbol: ${point.x}<br>Performance: ${point.y}%"></e-chart-tooltipsettings>
                            <e-chart-legendsettings visible="true" position="Bottom" toggleSeriesVisibility="true">
                                <e-legendsettings-textstyle color="#ffffff"></e-legendsettings-textstyle>
                            </e-chart-legendsettings>
                        </ejs-chart>
                    }
                    else
                    {
                        <p>No data available for the Stock Performance Chart.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Bubble Chart for Stock Distribution -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Stock Distribution</h5>
                </div>
                <div class="card-body">
                    @if (bubbleChartData != null && bubbleChartData.Any())
                    {
                        <ejs-chart id="bubbleChart" background="#212529">
                            <e-chart-primaryxaxis valueType="Double" title="Count of Stocks" labelRotation="0" LabelIntersectAction="None" titleStyle="@(new Syncfusion.EJ2.Charts.ChartFont { Color = "white" })">
                                <e-labelstyle color="#ffffff"></e-labelstyle>
                            </e-chart-primaryxaxis>
                            <e-chart-primaryyaxis title="Current Price" labelFormat="c2" titleStyle="@(new Syncfusion.EJ2.Charts.ChartFont { Color = "white" })">
                                <e-labelstyle color="#ffffff"></e-labelstyle>
                            </e-chart-primaryyaxis>
                            <e-series-collection>
                                @foreach (var stockGroup in ((List<BubbleChartData>)ViewBag.BubbleChartData).GroupBy(x => x.StockSymbol))
                                {
                                    <e-series dataSource="@stockGroup"
                                              xName="Size"
                                              yName="CurrentPrice"
                                              size="TotalValue"
                                              type="Bubble"
                                              name="@stockGroup.Key"
                                              tooltipMappingName="StockSymbol">
                                    </e-series>
                                }
                            </e-series-collection>
                            <e-chart-tooltipsettings enable="true" format="Symbol: ${point.tooltip}<br>Price: ${point.y}<br>Total Value: ${point.size}"></e-chart-tooltipsettings>
                            <e-chart-legendsettings visible="true" position="Bottom" toggleSeriesVisibility="true">
                                <e-legendsettings-textstyle color="#ffffff"></e-legendsettings-textstyle>
                            </e-chart-legendsettings>
                        </ejs-chart>
                    }
                    else
                    {
                        <p>No data available for the Stock Distribution Chart.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Stock Summary Grid -->
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0">Stock Summary</h5>
                </div>
                <div class="card-body">
                    @{
                        await Html.RenderPartialAsync("_StockGrid", Model);
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var realTimeData = @Html.Raw(Json.Serialize(ViewBag.RealTimeData));
        var chart;

        function stockChartLoad(args) {
            args.stockChart.tooltip.enable = true;
            args.stockChart.tooltip.shared = false;
            args.stockChart.crosshair.enable = true;

            chart = args.stockChart;
            chart.series.forEach((series, index) => {
                var stockData = realTimeData[series.name];
                if (stockData && stockData.length > 0) {
                    series.dataSource = stockData.map(d => ({
                        x: new Date(d.date),
                        open: d.open,
                        high: d.high,
                        low: d.low,
                        close: d.close
                    }));
                    series.fill = getColorForIndex(index);
                } else {
                    console.warn(`No data available for ${series.name}`);
                    series.dataSource = [];
                }
            });
        }

        function tooltipRender(args) {
            if (!chart || !args.series) {
                args.cancel = true;
                return;
            }

            var visibleSeries = chart.series.filter(s => s.visible);
            if (visibleSeries.length === 0) {
                args.cancel = true;
                return;
            }

            var closestSeries = null;
            var closestPoint = null;
            var minDistance = Infinity;

            visibleSeries.forEach(series => {
                var pointIndex = chart.baseTooltip.getClosest(series.xValues, args.xValue);
                if (pointIndex !== -1) {
                    var point = series.points[pointIndex];
                    var distance = Math.abs(point.x.getTime() - args.xValue.getTime());
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestSeries = series;
                        closestPoint = point;
                    }
                }
            });

            if (!closestPoint || !closestSeries) {
                args.cancel = true;
                return;
            }

            var date = new Date(closestPoint.x);
            args.text = `${closestSeries.name}<br>` +
                `Date: ${date.toLocaleDateString()}<br>` +
                `Open: ${closestPoint.open.toFixed(2)}<br>` +
                `High: ${closestPoint.high.toFixed(2)}<br>` +
                `Low: ${closestPoint.low.toFixed(2)}<br>` +
                `Close: ${closestPoint.close.toFixed(2)}`;
        }

        function getColorForIndex(index) {
            const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#FF6384', '#36A2EB', '#FFCE56'];
            return colors[index % colors.length];
        }

        // function updateRealTimeData() {
        //     fetch('/AppUserStocks/GetRealTimeData')
        //         .then(response => response.json())
        //         .then(data => {
        //             realTimeData = data;
        //             if (chart) {
        //                 chart.series.forEach((series, index) => {
        //                     var stockData = realTimeData[series.name];
        //                     if (stockData && stockData.length > 0) {
        //                         series.dataSource = stockData.map(d => ({
        //                             x: new Date(d.date),
        //                             open: d.open,
        //                             high: d.high,
        //                             low: d.low,
        //                             close: d.close
        //                         }));
        //                     }
        //                 });
        //                 chart.refresh();
        //             }
        //         })
        //         .catch(error => {
        //             console.error('Error fetching real-time data:', error);
        //         });
        // }

        // // Update data every 5 minutes
        // setInterval(updateRealTimeData, 5 * 60 * 1000);
    </script>
}