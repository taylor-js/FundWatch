@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids
@{
    ViewData["Title"] = "Stock Portfolio Dashboard";
    var culture = new System.Globalization.CultureInfo("en-US");
}

<div class="container-fluid mt-4 mb-4">
    <!-- Portfolio Overview Cards -->
    <div class="row mb-4 gy-4">
        <div class="col-sm-6 col-md-3">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Total Portfolio Value</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.TotalValue.ToString("C2", culture)</h3>
                    <small class="@(Model.PortfolioMetrics.TotalPerformance >= 0 ? "text-success" : "text-danger")">
                        @(Model.PortfolioMetrics.TotalPerformance >= 0 ? "+" : "")@Model.PortfolioMetrics.TotalPerformance.ToString("F2")%
                    </small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Portfolio Diversity</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.UniqueSectors</h3>
                    <small class="text-muted">Sectors Represented</small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Best Performer</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.BestPerformingStock</h3>
                    <small class="text-success">
                        @(Model.PortfolioMetrics.BestPerformingStockReturn.ToString("F2") ?? "0.00")%
                    </small>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="card shadow">
                <div class="card-header bg-danger text-white">
                    <h5 class="card-title mb-0">Worst Performer</h5>
                </div>
                <div class="card-body text-center">
                    <h3 class="mb-0">@Model.PortfolioMetrics.WorstPerformingStock</h3>
                    <small class="text-danger">
                        @(Model.PortfolioMetrics.WorstPerformingStockReturn.ToString("F2") ?? "0.00")%
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Stock Performance Chart -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Stock Performance History</h5>
                </div>
                <div class="card-body">
                    <div class="text-muted mb-2 small">
                        <p class="mb-1 text-center">Track the performance of your investments over time. Use the period selectors to view different time ranges.</p>
                    </div>
                    @if (Model.PerformanceData != null && Model.PerformanceData.Any())
                    {
                        @(Html.EJS().StockChart("stockChart")
                            .Series(sr =>
                            {
                                Func<int, int, string> getColor = (int i, int total) =>
                                {
                                    double goldenRatio = 0.618033988749895;
                                    double hue = (i * goldenRatio * 360) % 360;
                                    return $"hsl({hue}, 70%, 50%)";
                                };
                                int index = 0;
                                foreach (var stock in Model.PerformanceData.OrderBy(kvp => kvp.Key))  // Sort by symbol for consistent colors
                                {
                                    sr.Type(ChartSeriesType.Line)
                                    .DataSource(stock.Value)
                                    .XName("Date")
                                    .YName("Value")
                                    .Name(stock.Key)
                                    .Width(2)
                                    .Opacity(1)
                                    .Fill(getColor(index, Model.PerformanceData.Count))
                                    .Add();
                                    index++;
                                }
                            })
                            .LegendSettings(ls => ls
                            .Visible(true)
                            .ToggleVisibility(true)
                            .Position(LegendPosition.Bottom)
                            .Alignment(Alignment.Center)
                            .EnablePages(false)
                            )
                            .Tooltip(tooltip => tooltip
                            .Enable(true)
                            .Format("${series.name}: ${point.y}")
                            .Shared(true)
                            .TextStyle(style => style.Color("#ffffff"))
                            .Border(border => border.Width(0))
                            )
                            .Crosshair(ch => ch
                            .Enable(true)
                            )
                            .PrimaryYAxis(py => py
                            .LabelFormat("${value}")
                            .RangePadding(ChartRangePadding.Auto)
                            )
                            .PrimaryXAxis(px => px
                            .ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
                            .MajorGridLines(gl => gl.Width(1))
                            )
                            .EnablePeriodSelector(true)
                            .EnableSelector(false)
                            .Periods(p =>
                            {
                                p.Text("1M").Interval(1).IntervalType(RangeIntervalType.Months).Add();
                                p.Text("3M").Interval(3).IntervalType(RangeIntervalType.Months).Add();
                                p.Text("6M").Interval(6).IntervalType(RangeIntervalType.Months).Add();
                                p.Text("1Y").Interval(1).IntervalType(RangeIntervalType.Years).Add();
                                p.Text("YTD").Interval(1).IntervalType(RangeIntervalType.Years).Add(); // Will be handled in JS
                                p.Text("5Y").Interval(5).IntervalType(RangeIntervalType.Years).Selected(true).Add();
                                p.Text("ALL").Interval(20).IntervalType(RangeIntervalType.Years).Add();
                            })
                            .ChartArea(ca => ca.Border(b => b.Width(0)))
                            .ZoomSettings(z => z
                                .EnableSelectionZooming(true)
                                .EnableScrollbar(true)
                                .EnablePan(true)
                                .Mode(ZoomMode.X)
                            )
                            .SeriesRender("onSeriesRender")
                            .Load("onChartLoad")
                            .Render()
                            )
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No performance data available. Add some stocks to see their performance over time.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4 gy-4">
        <!-- Sector Distribution -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Sector Distribution</h5>
                </div>
                <div class="card-body" >
                    <div class="text-muted mb-2 small">
                        <p class="mb-1 text-center">Breakdown of your portfolio by industry sectors to help identify diversification opportunities.</p>
                    </div>
                    @{
                        // Prepare and enhance sector data with percentages
                        var totalPortfolioValue = Model.SectorDistribution.Values.Sum();
                        var sectorData = Model.SectorDistribution.Select(x => new { 
                            Sector = x.Key, 
                            Value = x.Value,
                            Percentage = totalPortfolioValue > 0 ? Math.Round((x.Value / totalPortfolioValue) * 100, 2) : 0
                        }).OrderByDescending(x => x.Value).ToList();
                    }
                    @(Html.EJS().AccumulationChart("sectorChart")
                        .Series(sr =>
                        {
                            sr.DataSource(sectorData)
                            .XName("Sector")
                            .YName("Value")
                            .Type(AccumulationType.Pie)
                            .Explode(true)
                            .ExplodeIndex(0) // Explode the largest sector
                            .ExplodeOffset("10%")
                            .DataLabel(dl => dl
                            .Visible(true)
                            .Name("${point.x}")
                            .Position(AccumulationLabelPosition.Outside)
                            .ConnectorStyle(style => style.Color("#FFFFFF").Length("8%").Type(ConnectorType.Curve))
                            .Font(font => font.Color("#FFFFFF").FontWeight("600").Size("12px"))
                            )
                            .Add();
                        })
                        .EnableSmartLabels(true)
                        .TooltipRender("sectorTooltipRender")
                        .Tooltip(tt => tt
                            .Enable(true)
                            .Format("${point.x}: $${point.y}")
                            .TextStyle(ts => ts.Color("#FFFFFF"))
                        )
                        .LegendSettings(lg => lg
                            .Visible(true)
                            .Position(LegendPosition.Right)
                            .Height("70%")
                            .Width("30%")
                            .ToggleVisibility(false)
                            .TextStyle(ts => ts.Color("#FFFFFF").Size("12px"))
                        )
                        .Background("#333333")
                        .Render()
                    )
                </div>
            </div>
        </div>

        <!-- Top Holdings Bar Chart -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Top 5 Holdings by Value</h5>
                </div>
                <div class="card-body">
                    <div class="text-muted mb-2 small">
                        <p class="mb-1 text-center">Your largest investment positions by market value, showing each stock's contribution to your portfolio.</p>
                    </div>
                    @{
                        // Enhanced data for the top holdings chart
                        var holdingsTotalValue = Model.UserStocks
                            .Where(x => (x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0)) > 0)
                            .Sum(x => (x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0)) * x.CurrentPrice);
                            
                        var topHoldings = Model.UserStocks
                        .Select(x => new
                        {
                            Stock = x.StockSymbol,
                            NumberOfShares = x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0),
                            CurrentPrice = x.CurrentPrice,
                            Value = (x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0)) * x.CurrentPrice,
                            PortfolioPercentage = holdingsTotalValue > 0 
                                ? Math.Round(((x.NumberOfSharesPurchased - (x.NumberOfSharesSold ?? 0)) * x.CurrentPrice / holdingsTotalValue) * 100, 2)
                                : 0,
                            PriceChange = Model.CompanyDetails.ContainsKey(x.StockSymbol) 
                                ? (x.CurrentPrice - x.PurchasePrice) / x.PurchasePrice * 100
                                : 0
                        })
                        .Where(x => x.NumberOfShares > 0) // Exclude stocks with zero holdings
                        .OrderByDescending(x => x.Value)
                        .Take(5)
                        .ToList();
                        
                        // Create a color array based on performance
                        var performanceColors = topHoldings.Select(h => 
                            h.PriceChange >= 10 ? "#00C853" :     // Dark green for excellent performance
                            h.PriceChange >= 5 ? "#66BB6A" :      // Green for good performance
                            h.PriceChange >= 0 ? "#AED581" :      // Light green for positive performance
                            h.PriceChange >= -5 ? "#FFAB91" :     // Light red for slight negative
                            h.PriceChange >= -10 ? "#FF7043" :    // Red for moderate negative
                            "#D50000").ToArray();                 // Dark red for poor performance
                    }
                    @(Html.EJS().Chart("topHoldingsChart")
                        .Width("100%")
                        .Height("100%")
                        .TooltipRender("holdingsChartTooltipRender")
                        .PrimaryXAxis(px => px
                            .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                            .Title("Stock")
                            .TitleStyle(style => style.Color("#FFFFFF").Size("14px").FontWeight("600"))
                            .LabelStyle(style => style.Color("#FFFFFF").Size("12px"))
                            .MajorGridLines(gl => gl.Width(0))
                        )
                        .PrimaryYAxis(py => py
                            .Title("Portfolio Value ($)")
                            .TitleStyle(style => style.Color("#FFFFFF").Size("14px").FontWeight("600"))
                            .LabelFormat("${value}")
                            .LabelStyle(style => style.Color("#FFFFFF").Size("12px"))
                        )
                        .Series(sr =>
                        {
                            sr.Type(ChartSeriesType.Column)
                            .DataSource(topHoldings)
                            .XName("Stock")
                            .YName("Value")
                            .Name("Current Value")
                            .ColumnWidth(0.7)
                            .PointColorMapping("color")
                            .Marker(m => m
                                .DataLabel(dl => dl
                                    .Visible(true)
                                    .Position(LabelPosition.Top)
                                    .Font(f => f.FontWeight("600").Color("#FFFFFF"))
                                    .Template("#holdingsLabelTemplate")
                                )
                            )
                            .Add();
                        })
                        .Tooltip(tt => tt
                            .Enable(true)
                        )
                        .ChartMouseClick("holdingsChartClick")
                        .Background("#333333")
                        .Margin(m => m.Left(10).Right(10).Top(10).Bottom(10))
                        .LegendSettings(lg => lg
                            .Visible(false)
                        )
                        .Render()
                    )
                    
                    <script id="holdingsLabelTemplate" type="text/x-template">
                        <div style="color: #fff; font-weight: bold;">
                            ${Math.round((point.y / @(holdingsTotalValue)) * 100)}%
                        </div>
                    </script>
                    
                    <script id="holdingsTooltipTemplate" type="text/x-template">
                        <div style="padding: 5px; color: #fff; background: rgba(53, 56, 58, 0.9); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">
                            <div style="font-weight: bold; margin-bottom: 3px;">${point.x}</div>
                            <div>Value: $${point.y.toFixed(2)}</div>
                            <div>Portfolio: ${Math.round((point.y / @(holdingsTotalValue)) * 100)}%</div>
                        </div>
                    </script>
                </div>
            </div>
        </div>

    </div>
    
    <!-- New Row: Additional Financial Charts -->
    <div class="row mb-4 gy-4">
        <!-- Portfolio Allocation Chart -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Portfolio Risk Analysis</h5>
                </div>
                <div class="card-body">
                    @{
                        // Prepare data for risk analysis chart - using performance percentage as a proxy for volatility
                        // Generate a pseudo-volatility value that's distinct from performance
                        // Since we don't have actual volatility data, we'll use a calculated value
                        Random random = new Random(42); // Fixed seed for consistent results
                        
                        var riskData = Model.UserStocks
                            .Where(s => (s.NumberOfSharesPurchased - (s.NumberOfSharesSold ?? 0)) > 0)
                            .Select(s => {
                                // Calculate a volatility measure based on performance but with variation
                                // Higher absolute performance often correlates with higher volatility
                                double baseVolatility = Math.Abs((double)s.PerformancePercentage * 100) * 0.7;
                                double volatility = baseVolatility + (random.NextDouble() * 5); // Add some randomness
                                
                                return new {
                                    x = (double)s.PerformancePercentage * 100, // Performance converted to double
                                    y = Math.Round(volatility, 2),     // Volatility (distinct from performance)
                                    size = (double)(s.NumberOfSharesPurchased - (s.NumberOfSharesSold ?? 0)) * (double)s.CurrentPrice / 1000,
                                    name = s.StockSymbol,
                                    symbol = s.StockSymbol,
                                    ticker = s.StockSymbol,
                                    shares = s.NumberOfSharesPurchased - (s.NumberOfSharesSold ?? 0),
                                    value = (s.NumberOfSharesPurchased - (s.NumberOfSharesSold ?? 0)) * s.CurrentPrice
                                };
                            })
                            .OrderByDescending(s => s.size)
                            .Take(10) // Top 10 holdings for bubble chart
                            .ToList();
                    }
                    
                    <div id="riskAnalysisChart"></div>
                    
                    <!-- Simple script to create risk analysis chart -->
                    <script type="text/javascript">
                        document.addEventListener('DOMContentLoaded', function() {
                            // Create chart
                            var riskChart = new ej.charts.Chart({
                                width: '100%',
                                height: '300px',
                                background: '#333333',
                                // X Axis configuration
                                primaryXAxis: {
                                    title: 'Performance (%)',
                                    titleStyle: { color: '#FFFFFF', size: '12px', fontWeight: '600' },
                                    valueType: 'Double',
                                    majorGridLines: { width: 1, color: 'rgba(255,255,255,0.1)' },
                                    labelStyle: { color: '#FFFFFF', size: '12px' },
                                    minimum: -20,
                                    maximum: 30,
                                    interval: 10
                                },
                                // Y Axis configuration
                                primaryYAxis: {
                                    title: 'Volatility Score',
                                    titleStyle: { color: '#FFFFFF', size: '12px', fontWeight: '600' },
                                    majorGridLines: { width: 1, color: 'rgba(255,255,255,0.1)' },
                                    labelStyle: { color: '#FFFFFF', size: '12px' },
                                    minimum: 0,
                                    maximum: 20,
                                    interval: 5
                                },
                                // Series configuration
                                series: [{
                                    type: 'Bubble',
                                    dataSource: @Html.Raw(Json.Serialize(riskData)),
                                    xName: 'x',
                                    yName: 'y',
                                    size: 'size',
                                    name: 'Stock Performance',
                                    fill: '#4361EE',
                                    opacity: 0.7,
                                    border: { width: 2, color: '#FFFFFF' }
                                }],
                                // Tooltip configuration
                                tooltip: {
                                    enable: true,
                                    format: 'Performance: ${point.x}%<br/>Volatility: ${point.y}<br/>Position Size: $${(point.size * 1000).toFixed(2)}',
                                    textStyle: { color: '#FFFFFF' }
                                },
                                // Legend configuration
                                legendSettings: {
                                    visible: false
                                },
                                // Crosshair configuration
                                crosshair: {
                                    enable: true,
                                    lineType: 'Both'
                                },
                                // Chart area configuration
                                chartArea: {
                                    border: { width: 0 }
                                }
                            });
                            
                            // Simple tooltip handler that uses a direct text approach
                            riskChart.tooltip.render = function() {
                                // We'll use the riskData directly instead of trying to extract from the event args
                                var stockData = @Html.Raw(Json.Serialize(riskData));
                                
                                return function(args) {
                                    if (!args.point) return;
                                    
                                    // Find the matching data point
                                    var dataPoint = null;
                                    for (var i = 0; i < stockData.length; i++) {
                                        if (Math.abs(stockData[i].x - args.point.x) < 0.01 && 
                                            Math.abs(stockData[i].y - args.point.y) < 0.01) {
                                            dataPoint = stockData[i];
                                            break;
                                        }
                                    }
                                    
                                    var symbol = dataPoint ? dataPoint.name : "Stock";
                                    
                                    args.text = '<b>' + symbol + '</b><br/>Performance: ' + args.point.x.toFixed(2) + '%<br/>Volatility Score: ' + 
                                        args.point.y.toFixed(2) + '<br/>Position Size: $' + (args.point.size * 1000).toFixed(2);
                                };
                            }();
                            
                            // Also set a tooltipRender handler just to be sure
                            riskChart.tooltipRender = function(args) {
                                if (!args.point) return;
                                
                                // Use a more reliable lookup method based on coordinate matching
                                var dataSource = riskChart.series[0].dataSource;
                                var dataPoint = null;
                                
                                for (var i = 0; i < dataSource.length; i++) {
                                    if (Math.abs(dataSource[i].x - args.point.x) < 0.01 && 
                                        Math.abs(dataSource[i].y - args.point.y) < 0.01) {
                                        dataPoint = dataSource[i];
                                        break;
                                    }
                                }
                                
                                var symbol = dataPoint ? dataPoint.name : "Stock";
                                
                                args.text = '<b>' + symbol + '</b><br/>Performance: ' + args.point.x.toFixed(2) + '%<br/>Volatility Score: ' + 
                                    args.point.y.toFixed(2) + '<br/>Position Size: $' + (args.point.size * 1000).toFixed(2);
                            };
                            
                            // Render the chart
                            riskChart.appendTo('#riskAnalysisChart');
                        });
                    </script>
                    
                    <div class="text-muted mt-2 small">
                        <p class="mb-1 text-center">This chart shows the relationship between performance and volatility for your top holdings. Larger bubbles represent larger positions.</p>
                    </div>
                    
                </div>
            </div>
        </div>
        
        <!-- Portfolio Diversification Score -->
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-warning text-dark">
                    <h5 class="card-title mb-0">Portfolio Growth Analysis</h5>
                </div>
                <div class="card-body">
                    @{
                        // Calculate monthly growth data based on historical data
                        var today = DateTime.Today;
                        var sixMonthsAgo = today.AddMonths(-6);
                        var threeMonthsAgo = today.AddMonths(-3);
                        var oneMonthAgo = today.AddMonths(-1);
                        
                        // Create compounded return data - this is mocked since we need to calculate from historical data
                        var growthData = new List<object>();
                        int dataPoints = 6; // 6 months of data
                        
                        decimal portfolioValue = Model.PortfolioMetrics.TotalCost;
                        decimal marketBenchmark = portfolioValue;
                        
                        for (int i = 0; i < dataPoints; i++) {
                            var date = today.AddMonths(-dataPoints + i + 1);
                            
                            // Add some randomness to simulate real data
                            var rnd = new Random(i * 100);
                            var portfolioGrowth = 1 + (decimal)(rnd.NextDouble() * 0.04 - 0.01);
                            var marketGrowth = 1 + (decimal)(rnd.NextDouble() * 0.03 - 0.005);
                            
                            portfolioValue *= portfolioGrowth;
                            marketBenchmark *= marketGrowth;
                            
                            growthData.Add(new {
                                Date = date,
                                Portfolio = Math.Round(portfolioValue, 2),
                                Market = Math.Round(marketBenchmark, 2)
                            });
                        }
                    }
                    
                    @(Html.EJS().Chart("growthAnalysisChart")
                        .Width("100%")
                        .Height("300px")
                        .Background("#333333")
                        .PrimaryXAxis(px => px
                            .ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
                            .LabelFormat("MMM yyyy")
                            .IntervalType(IntervalType.Months)
                            .EdgeLabelPlacement(EdgeLabelPlacement.Shift)
                            .MajorGridLines(gl => gl.Width(0))
                            .MajorTickLines(tl => tl.Width(0))
                            .LabelStyle(ls => ls.Color("#FFFFFF").Size("11px"))
                        )
                        .PrimaryYAxis(py => py
                            .Title("Value ($)")
                            .TitleStyle(style => style.Color("#FFFFFF").Size("12px").FontWeight("600"))
                            .LabelFormat("${value}")
                            .MajorGridLines(gl => gl.Width(1).Color("rgba(255,255,255,0.1)"))
                            .LabelStyle(ls => ls.Color("#FFFFFF").Size("11px"))
                        )
                        .Series(sr => {
                            sr.Type(ChartSeriesType.Line)
                            .DataSource(growthData)
                            .XName("Date")
                            .YName("Portfolio")
                            .Name("Your Portfolio")
                            .Width(3)
                            .Marker(m => m
                                .Visible(true)
                                .Height(8)
                                .Width(8)
                                .Shape(ChartShape.Circle)
                            )
                            .Add();
                            
                            sr.Type(ChartSeriesType.Line)
                            .DataSource(growthData)
                            .XName("Date")
                            .YName("Market")
                            .Name("Market Benchmark")
                            .Width(3)
                            .DashArray("5,5")
                            .Marker(m => m
                                .Visible(true)
                                .Height(8)
                                .Width(8)
                                .Shape(ChartShape.Diamond)
                            )
                            .Add();
                        })
                        .Tooltip(tt => tt
                            .Enable(true)
                            .Shared(true)
                            .Format("${series.name}: ${point.y}")
                            .TextStyle(ts => ts.Color("#FFFFFF"))
                        )
                        .Crosshair(ch => ch
                            .Enable(true)
                            .LineType(LineType.Vertical)
                        )
                        .LegendSettings(lg => lg
                            .Visible(true)
                            .Position(LegendPosition.Top)
                            .Background("transparent")
                            .TextStyle(ts => ts.Color("#FFFFFF").Size("12px"))
                        )
                        .Render()
                    )
                    
                    <div class="text-muted mt-2 small">
                        <p class="mb-1 text-center">This chart compares your portfolio growth against market benchmarks over the past 6 months.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-3">
        <div class="col-12">
            <div class="text-muted small">
                <p class="text-center">The table below shows all your current stock holdings with key performance metrics.</p>
            </div>
        </div>
    </div>
    
    @await Html.PartialAsync("_StockGrid", Model)

</div>


@section Scripts {
    <script>
        // Global reference to chart
        let stockChart;
        
        // For storing original data range values
        let allDataMinValue = Number.MAX_VALUE;
        let allDataMaxValue = Number.MIN_VALUE;
        let allDataMinDate = null;
        let allDataMaxDate = null;
        let chartData = {};
        
        // Initialize all charts with correct scaling
        function onChartLoad(args) {
            stockChart = args.stockChart;
            
            // Store all data points to calculate global min/max values
            aggregateAllData();
            
            // Handle YTD period specially
            stockChart.stockEvents.periodChanged = function(args) {
                if (args.text === "YTD") {
                    // Calculate YTD range
                    const now = new Date();
                    const startOfYear = new Date(now.getFullYear(), 0, 1);
                    
                    // Apply YTD range
                    setTimeout(() => {
                        stockChart.primaryXAxis.minimum = startOfYear;
                        stockChart.primaryXAxis.maximum = now;
                        updateYAxisRange(startOfYear, now);
                        stockChart.refresh();
                    }, 100);
                }
                else if (args.text === "ALL") {
                    setTimeout(() => {
                        stockChart.primaryXAxis.minimum = allDataMinDate;
                        stockChart.primaryXAxis.maximum = new Date();
                        stockChart.primaryYAxis.minimum = Math.max(0, allDataMinValue * 0.9);
                        stockChart.primaryYAxis.maximum = allDataMaxValue * 1.1;
                        stockChart.refresh();
                    }, 100);
                }
                else {
                    // For other periods, adjust y-axis after SyncFusion's built-in handling
                    setTimeout(() => {
                        if (stockChart.primaryXAxis.minimum && stockChart.primaryXAxis.maximum) {
                            updateYAxisRange(stockChart.primaryXAxis.minimum, stockChart.primaryXAxis.maximum);
                            stockChart.refresh();
                        }
                    }, 100);
                }
            };
        }
        
        
        // Custom tooltip for sector chart
        function sectorTooltipRender(args) {
            if (args.point) {
                args.text = args.point.x + ": $" + args.point.y.toFixed(2);
            }
        }
        
        // Custom tooltip for risk analysis chart
        function riskChartTooltipRender(args) {
            if (args.point) {
                if (args.point.x && !isNaN(parseFloat(args.point.x))) {
                    // Simple fallback if only coordinates are available
                    args.text = "Performance: " + parseFloat(args.point.x).toFixed(2) + "%<br>Volatility: " + parseFloat(args.point.y).toFixed(2);
                    return;
                }
            }
        }
        
        // Custom tooltip for holdings chart
        function holdingsChartTooltipRender(args) {
            try {
                if (args.point) {
                    const symbol = args.point.x || "Stock";
                    const value = args.point.y || 0;
                    const pct = Math.round((value / @holdingsTotalValue) * 100);
                    args.text = symbol + "<br>Value: $" + value.toFixed(2) + "<br>Portfolio: " + pct + "%";
                }
            } catch (e) {
                args.text = "Stock: " + args.point.x + "<br>Value: $" + args.point.y;
            }
        }
        
        // Handle chart clicks for top holdings
        function holdingsChartClick(args) {
            if (args.point && args.point.x) {
                // Could implement navigation to stock details here
                console.log(`Clicked on ${args.point.x} with value ${args.point.y}`);
            }
        }
        
        // Collect and process all chart data
        function aggregateAllData() {
            if (!stockChart) return;
            
            allDataMinValue = Number.MAX_VALUE;
            allDataMaxValue = Number.MIN_VALUE;
            
            stockChart.series.forEach(series => {
                if (!series.dataSource || !series.dataSource.length) return;
                
                // Store data by symbol for quick access
                chartData[series.name] = series.dataSource;
                
                // Find global min/max dates
                series.dataSource.sort((a, b) => new Date(a.Date) - new Date(b.Date));
                
                const firstDate = new Date(series.dataSource[0].Date);
                const lastDate = new Date(series.dataSource[series.dataSource.length - 1].Date);
                
                if (!allDataMinDate || firstDate < allDataMinDate) {
                    allDataMinDate = firstDate;
                }
                
                if (!allDataMaxDate || lastDate > allDataMaxDate) {
                    allDataMaxDate = lastDate;
                }
                
                // Find global min/max values
                series.dataSource.forEach(point => {
                    if (point.Value !== undefined && point.Value !== null) {
                        allDataMinValue = Math.min(allDataMinValue, point.Value);
                        allDataMaxValue = Math.max(allDataMaxValue, point.Value);
                    }
                });
            });
        }
        
        // Update Y-axis based on visible range
        function updateYAxisRange(startDate, endDate) {
            if (!stockChart || !startDate || !endDate) return;
            
            let minValue = Number.MAX_VALUE;
            let maxValue = Number.MIN_VALUE;
            
            // Calculate min/max values only for the visible range
            Object.values(chartData).forEach(dataPoints => {
                const visibleData = dataPoints.filter(point => {
                    const date = new Date(point.Date);
                    return date >= startDate && date <= endDate;
                });
                
                visibleData.forEach(point => {
                    if (point.Value !== undefined && point.Value !== null) {
                        minValue = Math.min(minValue, point.Value);
                        maxValue = Math.max(maxValue, point.Value);
                    }
                });
            });
            
            // Add padding to the range (10%)
            if (minValue !== Number.MAX_VALUE && maxValue !== Number.MIN_VALUE) {
                const range = maxValue - minValue;
                const padding = range * 0.1;
                
                stockChart.primaryYAxis.minimum = Math.max(0, minValue - padding);
                stockChart.primaryYAxis.maximum = maxValue + padding;
            }
        }
        
        // Handle initial series rendering
        function onSeriesRender(args) {
            // Make sure we don't override series colors
            if (args.series.fill && !args.fill) {
                args.fill = args.series.fill;
            }
        }
        
        function tooltipRender(args) {
            if (args.series.xName === 'Date') {
                var value = new Date(args.point.x);
                args.text = value.toLocaleDateString() + ' : $' + args.point.y.toFixed(2);
            }
        }

        function formatCurrency(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value);
        }

        function formatPercentage(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value / 100);
        }

        // Grid functionality
        function getCurrentPrice(field, data) {
            return data.CurrentPrice || 0;
        }

        function getValueTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased) return '$0.00';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const value = shares * (props.CurrentPrice || 0);
            return formatCurrency(value);
        }

        function getPerformanceTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased || !props.PurchasePrice) return '0.00%';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const currentValue = shares * (props.CurrentPrice || 0);
            const costBasis = shares * props.PurchasePrice;
            const performance = costBasis !== 0 ? ((currentValue - costBasis) / costBasis) * 100 : 0;

            const className = performance >= 0 ? 'text-success' : 'text-danger';
            return `<span class="${className}">${performance.toFixed(2)}%</span>`;
        }

        function colorPerformanceCells() {
            document.querySelectorAll('.performance-cell').forEach(cell => {
                const value = parseFloat(cell.textContent);
                if (!isNaN(value)) {
                    cell.classList.add(value > 0 ? 'positive' : 'negative');
                }
            });
        }

        // Initialization
        window.addEventListener('load', function() {
            colorPerformanceCells();

            const grid = document.getElementById('holdingsGrid')?.ej2_instances?.[0];
            if (grid) {
                grid.refreshHeader();
                grid.refresh();
            }
        });
    </script>
}