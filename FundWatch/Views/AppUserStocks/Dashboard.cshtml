@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids

@* Explicitly reference correct TabItem from all available libraries *@
@using TabHeader = Syncfusion.EJ2.Navigations.TabHeader
@{
    ViewData["Title"] = "Stock Portfolio Dashboard";
    var culture = new System.Globalization.CultureInfo("en-US");
    
    // Check for API configuration issues
    bool hasApiError = TempData["ApiError"] != null;
    bool hasPerformanceData = Model.PerformanceData != null && Model.PerformanceData.Any() && 
                              Model.PerformanceData.Any(kvp => kvp.Value != null && kvp.Value.Any());
}

<div class="container mt-4" id="dashboard-container">
    <!-- Global loading indicator removed since we're using component-specific loading -->

    <!-- Tab Navigation - loaded as a partial view -->
    @await Html.PartialAsync("_DashboardTabs")

    <!-- Tab Content Container -->
    <div class="tab-content" id="dashboardTabContent">
    
        <!-- Tab Content: Overview -->
        <div id="overviewTab" class="tab-pane fade show active" role="tabpanel">
            @await Html.PartialAsync("_OverviewTab", Model)
        </div>

        <!-- Tab Content: Performance -->
        <div id="performanceTab" class="tab-pane fade" role="tabpanel">
            @await Html.PartialAsync("_PerformanceTab", Model)
        </div>

        <!-- Tab Content: Analytics -->
        <div id="analyticsTab" class="tab-pane fade" role="tabpanel">
            @await Html.PartialAsync("_AnalyticsTab", Model)
        </div>

        <!-- Tab Content: Holdings -->
        <div id="holdingsTab" class="tab-pane fade" role="tabpanel">
            @await Html.PartialAsync("_HoldingsTab", Model)
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_DashboardCommonScripts")
    @await Html.PartialAsync("_DashboardScripts")
    @await Html.PartialAsync("_DirectChartInit", Model)
    
    <script>
        // Initialize Highcharts when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Dashboard view loaded - main script');
            
            // Force a tab view on dashboard load to ensure charts render
            setTimeout(function() {
                // Get the active tab or default to overview
                let activeTab = document.querySelector('.nav-link.active[data-bs-toggle="tab"]');
                if (!activeTab) {
                    activeTab = document.querySelector('#overview-tab');
                }
                
                // Simulate click to trigger the tab's shown event
                if (activeTab) {
                    activeTab.click();
                    console.log('Triggered active tab:', activeTab.id);
                }
                
                // Force performance tab charts to render by showing that tab and switching back
                const performanceTab = document.querySelector('#performance-tab');
                if (performanceTab) {
                    setTimeout(() => {
                        performanceTab.click();
                        console.log('Forcing performance tab render');
                        
                        // Switch back to previous tab after a delay
                        setTimeout(() => {
                            activeTab.click();
                            console.log('Switching back to original tab');
                        }, 1000);
                    }, 1500);
                }
            }, 500);
        });
    </script>
}