@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids

<!-- Holdings Grid -->
<div class="col-md-12">
    <div class="card shadow">
        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Current Holdings</h5>
            <a class="btn btn-light btn-sm" href="/AppUserStocks/CreateOrEdit">
                <i class="fa-solid fa-plus"></i> Add Stock
            </a>
        </div>
        <div class="card-body" style="height:700px;">
            @(Html.EJS().Grid("holdingsGrid")
                .DataSource(Model.UserStocks)
                .AllowPaging()
                .AllowSorting()
                .AllowResizing(true)
                .Toolbar(new List<string>() { "Search" })
                .PageSettings(page => page.PageSize(5))
                .Columns(col =>
                {
                    col.Field("StockSymbol").HeaderText("Symbol").TextAlign(TextAlign.Center).Width(100).Add();
                    col.Field("CurrentPrice").HeaderText("Current Price").TextAlign(TextAlign.Right).Width(120)
                    .Format("C2").Add();
                    col.Field("NumberOfSharesPurchased").HeaderText("Shares").TextAlign(TextAlign.Right).Width(100).Add();
                    col.Field("PurchasePrice").HeaderText("Purchase Price").TextAlign(TextAlign.Right).Width(120)
                    .Format("C2").Add();
                    col.Field("TotalValue").HeaderText("Total Value").TextAlign(TextAlign.Right).Width(120)
                    .Format("C2").Add();
                    col.Field("PerformancePercentage").HeaderText("Return").TextAlign(TextAlign.Right).Width(100)
                    .Format("P2")
                    .CustomAttributes(new { @class = "performance-cell" }).Add();
                    col.Field("DatePurchased").HeaderText("Purchase Date").TextAlign(TextAlign.Right).Width(130)
                    .Format("MMM-dd-yyyy").Type("date").Add();
                    col.Template("#actionColumnTemplate").HeaderText("Actions").TextAlign(TextAlign.Center).Width(140).Add();
                })
                .Height("600px")
                .GridLines(GridLine.Both)
                .RowHeight(50)
                .Render()
                )
        </div>
    </div>
</div>

<script id="actionColumnTemplate" type="text/x-template">
    <div class="action-buttons-container">
        <a class="btn btn-outline-primary grid-action-btn" href="/AppUserStocks/CreateOrEdit/${Id}" title="Edit">
            <i class="fa-solid fa-pen"></i>
        </a>
        <a class="btn btn-outline-info grid-action-btn" href="/AppUserStocks/Details/${Id}" title="Details">
            <i class="fa-solid fa-info-circle"></i>
        </a>
        <form action="/AppUserStocks/Delete/${Id}" method="post" style="display:inline-block;">
    @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-danger grid-action-btn delete-btn" title="Delete">
                <i class="fa-solid fa-trash-can"></i>
            </button>
        </form>
    </div>
</script>


@section Scripts {
    <script>
        // Existing functions
        function getCurrentPrice(field, data) {
            return data.CurrentPrice || 0;
        }

        function getValueTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased) return '$0.00';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const value = shares * (props.CurrentPrice || 0);
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value);
        }

        function getPerformanceTemplate(props) {
            if (!props || !props.NumberOfSharesPurchased || !props.PurchasePrice) return '0.00%';
            const shares = props.NumberOfSharesPurchased - (props.NumberOfSharesSold || 0);
            const currentValue = shares * (props.CurrentPrice || 0);
            const costBasis = shares * props.PurchasePrice;
            const performance = costBasis !== 0 ? ((currentValue - costBasis) / costBasis) * 100 : 0;

            const formatted = new Intl.NumberFormat('en-US', {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(performance / 100);

            const className = performance >= 0 ? 'text-success' : 'text-danger';
            return `<span class="${className}">${performance.toFixed(2)}%</span>`;
        }

        // Color performance cells
        function colorPerformanceCells() {
            const cells = document.querySelectorAll('.performance-cell');
            cells.forEach(cell => {
                const value = parseFloat(cell.textContent);
                if (value > 0) {
                    cell.classList.add('positive');
                } else if (value < 0) {
                    cell.classList.add('negative');
                }
            });
        }

        // Delete confirmation
        document.addEventListener('click', function (e) {
            if (e.target.closest('.delete-btn')) {
                e.preventDefault();
                if (confirm('Are you sure you want to delete this stock from your portfolio?')) {
                    e.target.closest('form').submit();
                }
            }
        });

        // Initialize grid
        window.addEventListener('load', function () {
            colorPerformanceCells();
            var grid = document.getElementById('holdingsGrid').ej2_instances[0];
            if (grid) {
                grid.refreshHeader();
                grid.refresh();
                
                // Force pager visibility
                setTimeout(function() {
                    const pagerElement = document.querySelector('.e-gridpager');
                    if (pagerElement) {
                        pagerElement.style.display = 'flex';
                        pagerElement.style.visibility = 'visible';
                        console.log('Pager visibility forced');
                    }
                }, 300);
            }
        });
    </script>
}