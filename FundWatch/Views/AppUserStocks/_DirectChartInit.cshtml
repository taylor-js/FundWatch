@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel

@* Direct initialization of charts - to be included in Dashboard.cshtml *@
<script>
    // This script directly initializes all charts without relying on the individual tab scripts
    
    // Wait for DOM and Highcharts to be ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log("Direct chart initialization started");
        
        // Log all chart data to help with debugging
        console.log("Monthly data:", @(Model.MonthlyPerformanceData?.Count ?? 0));
        console.log("Rolling Returns data:", @(Model.RollingReturnsData?.Count ?? 0));
        console.log("Portfolio Growth data:", @(Model.PortfolioGrowthData?.Count ?? 0));
        console.log("Risk Metrics data:", @(Model.RiskMetrics?.Count ?? 0));
        console.log("Drawdown data:", @(Model.DrawdownData?.Count ?? 0));
        
        // Add test data if real data is missing
        if (!window.monthlyPerfData || !window.monthlyPerfData.length) {
            console.log("Adding test data for Monthly Performance Chart");
            window.monthlyPerfData = [
                { month: "Jan", portfolioPerformance: 3.5, benchmarkPerformance: 2.1 },
                { month: "Feb", portfolioPerformance: -1.2, benchmarkPerformance: -0.8 },
                { month: "Mar", portfolioPerformance: 2.7, benchmarkPerformance: 1.5 },
                { month: "Apr", portfolioPerformance: 1.3, benchmarkPerformance: 0.9 },
                { month: "May", portfolioPerformance: -0.5, benchmarkPerformance: -0.3 },
                { month: "Jun", portfolioPerformance: 4.1, benchmarkPerformance: 3.2 }
            ];
        }
        
        if (!window.rollingReturnsData || !window.rollingReturnsData.length) {
            console.log("Adding test data for Rolling Returns Chart");
            window.rollingReturnsData = [
                { timePeriod: "1M", portfolioReturn: 2.4, benchmarkReturn: 1.8 },
                { timePeriod: "3M", portfolioReturn: 5.7, benchmarkReturn: 4.2 },
                { timePeriod: "6M", portfolioReturn: 8.3, benchmarkReturn: 7.1 },
                { timePeriod: "1Y", portfolioReturn: 12.5, benchmarkReturn: 10.9 },
                { timePeriod: "3Y", portfolioReturn: 32.8, benchmarkReturn: 29.3 }
            ];
        }
        
        if (!window.portfolioGrowthData || !window.portfolioGrowthData.length) {
            console.log("Adding test data for Portfolio Growth Chart");
            var dates = [];
            var today = new Date();
            for (var i = 180; i >= 0; i--) {
                var date = new Date();
                date.setDate(today.getDate() - i);
                dates.push(date);
            }
            
            window.portfolioGrowthData = dates.map(function(date, index) {
                var portfolioValue = 100 + (Math.sin(index/20) * 15) + (index / 10);
                var benchmarkValue = 100 + (Math.sin(index/25) * 10) + (index / 15);
                return {
                    date: date,
                    portfolioValue: portfolioValue,
                    benchmarkValue: benchmarkValue
                };
            });
        }
        
        // Function to check if dependencies are loaded and render charts
        function initializeAllCharts() {
            // Check if Highcharts is loaded
            if (typeof Highcharts === 'undefined') {
                console.error('Highcharts not loaded yet, will retry in 500ms');
                setTimeout(initializeAllCharts, 500);
                return;
            }
            
            // Check if ChartManager is defined
            if (typeof ChartManager === 'undefined') {
                console.error('ChartManager not defined yet, will retry in 500ms');
                setTimeout(initializeAllCharts, 500);
                return;
            }
            
            console.log('Dependencies loaded, rendering all charts');
            
            // PERFORMANCE TAB CHARTS
            
            // Monthly Performance Chart
            @if (Model.MonthlyPerformanceData?.Count > 0)
            {
                <text>
                setTimeout(function() {
                    console.log('Initializing Monthly Performance Chart with @Model.MonthlyPerformanceData.Count data points');
                    try {
                        var monthlyData = @Html.Raw(Json.Serialize(Model.MonthlyPerformanceData));
                        ChartManager.renderMonthlyPerformanceChart(monthlyData);
                        console.log('Monthly Performance Chart initialized');
                    } catch (err) {
                        console.error('Error initializing Monthly Performance Chart:', err);
                    }
                }, 100);
                </text>
            }
            else
            {
                <text>console.warn('No Monthly Performance data available for chart');</text>
            }
            
            // Rolling Returns Chart
            @if (Model.RollingReturnsData?.Count > 0)
            {
                <text>
                setTimeout(function() {
                    console.log('Initializing Rolling Returns Chart with @Model.RollingReturnsData.Count data points');
                    try {
                        var rollingData = @Html.Raw(Json.Serialize(Model.RollingReturnsData));
                        ChartManager.renderRollingReturnsChart(rollingData);
                        console.log('Rolling Returns Chart initialized');
                    } catch (err) {
                        console.error('Error initializing Rolling Returns Chart:', err);
                    }
                }, 200);
                </text>
            }
            else
            {
                <text>console.warn('No Rolling Returns data available for chart');</text>
            }
            
            // Portfolio Growth Chart
            @if (Model.PortfolioGrowthData?.Count > 0)
            {
                <text>
                setTimeout(function() {
                    console.log('Initializing Portfolio Growth Chart with @Model.PortfolioGrowthData.Count data points');
                    try {
                        var growthData = @Html.Raw(Json.Serialize(Model.PortfolioGrowthData));
                        ChartManager.renderPortfolioGrowthChart(growthData);
                        console.log('Portfolio Growth Chart initialized');
                    } catch (err) {
                        console.error('Error initializing Portfolio Growth Chart:', err);
                    }
                }, 300);
                </text>
            }
            else
            {
                <text>console.warn('No Portfolio Growth data available for chart');</text>
            }
            
            // ANALYTICS TAB CHARTS
            
            // Risk Analysis Chart
            @if (Model.RiskMetrics?.Count > 0)
            {
                <text>
                setTimeout(function() {
                    console.log('Initializing Risk Analysis Chart with @Model.RiskMetrics.Count data points');
                    try {
                        var riskData = @Html.Raw(Json.Serialize(Model.RiskMetrics));
                        ChartManager.renderRiskAnalysisChart(riskData);
                        console.log('Risk Analysis Chart initialized');
                    } catch (err) {
                        console.error('Error initializing Risk Analysis Chart:', err);
                    }
                }, 400);
                </text>
            }
            else
            {
                <text>console.warn('No Risk Metrics data available for chart');</text>
            }
            
            // Drawdown Chart
            @if (Model.DrawdownData?.Count > 0)
            {
                <text>
                setTimeout(function() {
                    console.log('Initializing Drawdown Chart with @Model.DrawdownData.Count data points');
                    try {
                        var drawdownData = @Html.Raw(Json.Serialize(Model.DrawdownData));
                        ChartManager.renderDrawdownChart(drawdownData);
                        console.log('Drawdown Chart initialized');
                    } catch (err) {
                        console.error('Error initializing Drawdown Chart:', err);
                    }
                }, 500);
                </text>
            }
            else
            {
                <text>console.warn('No Drawdown data available for chart');</text>
            }
            
            // Force reflow all charts after a delay
            setTimeout(function() {
                if (Highcharts.charts) {
                    Highcharts.charts.forEach(function(chart) {
                        if (chart) {
                            chart.reflow();
                            if (chart.renderTo && chart.renderTo.id) {
                                console.log('Reflowed chart:', chart.renderTo.id);
                            }
                        }
                    });
                }
            }, 1000);
        }
        
        // Start the initialization process
        setTimeout(initializeAllCharts, 500);
        
        // Also reinitialize when tabs are shown
        const tabs = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');
        tabs.forEach(tab => {
            tab.addEventListener('shown.bs.tab', function(e) {
                const targetId = e.target.getAttribute('data-bs-target');
                console.log('Tab shown, reinitializing charts for', targetId);
                
                // Reinitialize all charts in the tab after a delay
                setTimeout(function() {
                    if (Highcharts && Highcharts.charts) {
                        const targetTab = document.querySelector(targetId);
                        if (targetTab) {
                            // Find all chart containers in this tab
                            const chartContainers = targetTab.querySelectorAll('[id$="Chart"]');
                            chartContainers.forEach(container => {
                                const chartObj = Highcharts.charts.find(c => c && c.renderTo && c.renderTo.id === container.id);
                                if (chartObj) {
                                    chartObj.reflow();
                                    console.log('Reflowed chart on tab show:', container.id);
                                } else if (container.id === 'monthlyPerformanceChart' && typeof ChartManager !== 'undefined') {
                                    console.log('Re-rendering Monthly Performance Chart');
                                    @if (Model.MonthlyPerformanceData?.Count > 0)
                                    {
                                        <text>ChartManager.renderMonthlyPerformanceChart(@Html.Raw(Json.Serialize(Model.MonthlyPerformanceData)));</text>
                                    }
                                } else if (container.id === 'rollingReturnsChart' && typeof ChartManager !== 'undefined') {
                                    console.log('Re-rendering Rolling Returns Chart');
                                    @if (Model.RollingReturnsData?.Count > 0)
                                    {
                                        <text>ChartManager.renderRollingReturnsChart(@Html.Raw(Json.Serialize(Model.RollingReturnsData)));</text>
                                    }
                                } else if (container.id === 'portfolioGrowthChart' && typeof ChartManager !== 'undefined') {
                                    console.log('Re-rendering Portfolio Growth Chart');
                                    @if (Model.PortfolioGrowthData?.Count > 0)
                                    {
                                        <text>ChartManager.renderPortfolioGrowthChart(@Html.Raw(Json.Serialize(Model.PortfolioGrowthData)));</text>
                                    }
                                } else if (container.id === 'riskAnalysisChart' && typeof ChartManager !== 'undefined') {
                                    console.log('Re-rendering Risk Analysis Chart');
                                    @if (Model.RiskMetrics?.Count > 0)
                                    {
                                        <text>ChartManager.renderRiskAnalysisChart(@Html.Raw(Json.Serialize(Model.RiskMetrics)));</text>
                                    }
                                } else if (container.id === 'drawdownChart' && typeof ChartManager !== 'undefined') {
                                    console.log('Re-rendering Drawdown Chart');
                                    @if (Model.DrawdownData?.Count > 0)
                                    {
                                        <text>ChartManager.renderDrawdownChart(@Html.Raw(Json.Serialize(Model.DrawdownData)));</text>
                                    }
                                }
                            });
                        }
                    }
                }, 300);
            });
        });
    });
</script>