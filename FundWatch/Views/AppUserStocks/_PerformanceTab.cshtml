@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models.QuantitativeModels
@{
    var hasOptimization = Model.PortfolioOptimization != null;
    var optimization = Model.PortfolioOptimization;
}

<!-- Modern Portfolio Theory Introduction -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-lg border-0 bg-gradient-success text-white">
            <div class="card-body py-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h4 class="mb-2">Portfolio Optimization & Efficient Frontier</h4>
                        <p class="mb-0">
                            Discover your optimal portfolio allocation using Modern Portfolio Theory. 
                            The efficient frontier shows the best risk-return combinations, while Monte Carlo 
                            simulations reveal potential future outcomes based on 1,000+ scenarios.
                        </p>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="display-6">
                            <i class="fas fa-chart-area"></i> <i class="fas fa-exchange-alt mx-2"></i> <i class="fas fa-balance-scale"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (hasOptimization)
{
    <!-- Historical Performance vs Optimal Strategy -->
    @if (optimization.HistoricalPerformance != null && optimization.HistoricalPerformance.ActualPerformance?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-lg border-0 bg-gradient-info text-white">
                    <div class="card-body">
                        <h5 class="mb-3">
                            <i class="fas fa-history me-2"></i>Historical Performance Analysis
                        </h5>
                        <div class="row">
                            <div class="col-md-3">
                                <h6>Your Actual Return</h6>
                                <h3>@((optimization.HistoricalPerformance.ActualReturn * 100).ToString("F2"))%</h3>
                                <small>Since @optimization.HistoricalPerformance.StartDate.ToString("MMM yyyy")</small>
                            </div>
                            <div class="col-md-3">
                                <h6>Optimal Strategy Return</h6>
                                <h3 class="text-warning">@((optimization.HistoricalPerformance.OptimalReturn * 100).ToString("F2"))%</h3>
                                <small>What you could have earned</small>
                            </div>
                            <div class="col-md-3">
                                <h6>Missed Gains</h6>
                                <h3 class="@(optimization.HistoricalPerformance.MissedGains > 0 ? "text-danger" : "text-success")">
                                    @((optimization.HistoricalPerformance.MissedGains * 100).ToString("F2"))%
                                </h3>
                                <small>Opportunity cost</small>
                            </div>
                            <div class="col-md-3">
                                <h6>Days Analyzed</h6>
                                <h3>@((optimization.HistoricalPerformance.EndDate - optimization.HistoricalPerformance.StartDate).Days)</h3>
                                <small>Historical data points</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Historical Performance Chart -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-line me-2"></i>Historical Performance: Actual vs Optimal Strategy
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="historicalPerformanceChart" class="chart-container-450"></div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <!-- Key Metrics Comparison -->
    <div class="row mb-4">
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="icon-wrapper mb-3">
                        <i class="fas fa-bullseye fa-2x text-primary"></i>
                    </div>
                    <h6 class="text-muted">Current Sharpe Ratio</h6>
                    <h3 class="mb-0">@optimization.CurrentPortfolio.SharpeRatio.ToString("F2")</h3>
                    <small class="text-secondary">Risk-adjusted return</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="icon-wrapper mb-3">
                        <i class="fas fa-rocket fa-2x text-success"></i>
                    </div>
                    <h6 class="text-muted">Optimal Sharpe Ratio</h6>
                    <h3 class="mb-0 text-success">@optimization.MaxSharpeRatio.ToString("F2")</h3>
                    <small class="text-secondary">
                        <i class="fas fa-arrow-up"></i> 
                        @((optimization.MaxSharpeRatio - optimization.CurrentPortfolio.SharpeRatio).ToString("F2")) improvement
                    </small>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="icon-wrapper mb-3">
                        <i class="fas fa-shield-alt fa-2x text-danger"></i>
                    </div>
                    <h6 class="text-muted">Value at Risk (95%)</h6>
                    <h3 class="mb-0 text-danger">@((optimization.RiskAnalysis.ValueAtRisk95 * 100).ToString("F1"))%</h3>
                    <small class="text-secondary">Max loss in 95% of cases</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="icon-wrapper mb-3">
                        <i class="fas fa-chart-line fa-2x text-info"></i>
                    </div>
                    <h6 class="text-muted">Expected Return</h6>
                    <h3 class="mb-0">@((optimization.OptimalPortfolio.Return * 100).ToString("F1"))%</h3>
                    <small class="text-secondary">Annualized</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Visualization Area -->
    <div class="row mb-4">
        <!-- Efficient Frontier -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-scatter me-2"></i>Efficient Frontier Analysis
                    </h5>
                </div>
                <div class="card-body">
                    <div class="frontier-explanation mb-3 p-3 bg-light rounded">
                        <p class="mb-0 small">
                            <strong>The Efficient Frontier:</strong> Each point represents a portfolio with the best possible return 
                            for a given level of risk. Your current portfolio (●) can be optimized to the green star (★) for better 
                            risk-adjusted returns.
                        </p>
                    </div>
                    <div id="efficientFrontierChart" class="chart-container-450"></div>
                </div>
            </div>
        </div>
        
        <!-- Portfolio Weights Recommendation -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-weight me-2"></i>Optimal Allocation
                    </h5>
                </div>
                <div class="card-body">
                    <div class="allocation-comparison">
                        <h6 class="mb-3">Recommended Changes:</h6>
                        @foreach (var symbol in optimization.OptimalWeights.Keys.OrderByDescending(k => optimization.OptimalWeights[k]))
                        {
                            var currentWeight = optimization.CurrentWeights.ContainsKey(symbol) ? optimization.CurrentWeights[symbol] : 0;
                            var optimalWeight = optimization.OptimalWeights[symbol];
                            var change = optimalWeight - currentWeight;
                            
                            <div class="allocation-item mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <strong>@symbol</strong>
                                    <span class="badge @(change > 0 ? "bg-success" : change < 0 ? "bg-danger" : "bg-secondary")">
                                        @(change > 0 ? "+" : "")@((change * 100).ToString("F1"))%
                                    </span>
                                </div>
                                <div class="progress progress-height-25">
                                    <div class="progress-bar bg-secondary" 
                                         style="width: @((currentWeight * 100).ToString("F1"))%">
                                        Current: @((currentWeight * 100).ToString("F1"))%
                                    </div>
                                    <div class="progress-bar bg-success" 
                                         style="width: @(((optimalWeight - currentWeight) * 100).ToString("F1"))%">
                                        Optimal: @((optimalWeight * 100).ToString("F1"))%
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="mt-4 p-3 bg-light rounded">
                        <h6 class="mb-2">Rebalancing Impact:</h6>
                        <ul class="mb-0 small">
                            <li>Sharpe Ratio: @optimization.CurrentPortfolio.SharpeRatio.ToString("F2") → @optimization.MaxSharpeRatio.ToString("F2")</li>
                            <li>Risk: @((optimization.CurrentPortfolio.Risk * 100).ToString("F1"))% → @((optimization.OptimalPortfolio.Risk * 100).ToString("F1"))%</li>
                            <li>Return: @((optimization.CurrentPortfolio.Return * 100).ToString("F1"))% → @((optimization.OptimalPortfolio.Return * 100).ToString("F1"))%</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Monte Carlo Simulation Results -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h5 class="mb-0">
                                <i class="fas fa-dice me-2"></i>Monte Carlo Simulation - 1,000 Scenarios
                            </h5>
                        </div>
                        <div class="col-md-4 text-end">
                            <small>5-Year Projection with Optimal Allocation</small>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Simulation Fan Chart -->
                        <div class="col-lg-8">
                            <div id="monteCarloChart" class="chart-container-400"></div>
                        </div>
                        
                        <!-- Probability Distribution -->
                        <div class="col-lg-4">
                            <h6 class="mb-3">Outcome Probabilities</h6>
                            <div id="outcomeDistribution" class="chart-container-350"></div>
                            
                            <div class="mt-3">
                                <h6>Key Statistics:</h6>
                                <ul class="list-unstyled small">
                                    <li><strong>Best Case (95th percentile):</strong> 
                                        $@optimization.MonteCarloSimulations.FirstOrDefault(s => s.Percentile >= 95)?.FinalValue.ToString("F2")</li>
                                    <li><strong>Median Case:</strong> 
                                        $@optimization.MonteCarloSimulations.FirstOrDefault(s => s.Percentile >= 50)?.FinalValue.ToString("F2")</li>
                                    <li><strong>Worst Case (5th percentile):</strong> 
                                        $@optimization.MonteCarloSimulations.FirstOrDefault(s => s.Percentile >= 5)?.FinalValue.ToString("F2")</li>
                                    <li><strong>Max Drawdown:</strong> 
                                        @((optimization.RiskAnalysis.MaxDrawdown * 100).ToString("F1"))%</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Risk Metrics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-tachometer-alt me-2"></i>Advanced Risk Metrics
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div id="riskGaugeChart" class="chart-container-300"></div>
                        </div>
                        <div class="col-md-8">
                            <div class="risk-metrics-grid">
                                <div class="row g-3">
                                    <div class="col-sm-6">
                                        <div class="metric-box p-3 border rounded">
                                            <h6 class="text-muted mb-1">Sortino Ratio</h6>
                                            <h4 class="mb-0">@optimization.RiskAnalysis.SortinoRatio.ToString("F2")</h4>
                                            <small>Downside risk-adjusted return</small>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="metric-box p-3 border rounded">
                                            <h6 class="text-muted mb-1">Information Ratio</h6>
                                            <h4 class="mb-0">@optimization.RiskAnalysis.InformationRatio.ToString("F2")</h4>
                                            <small>Active return vs tracking error</small>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="metric-box p-3 border rounded">
                                            <h6 class="text-muted mb-1">Conditional VaR</h6>
                                            <h4 class="mb-0 text-danger">@((optimization.RiskAnalysis.ConditionalValueAtRisk * 100).ToString("F1"))%</h4>
                                            <small>Expected loss beyond VaR</small>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="metric-box p-3 border rounded">
                                            <h6 class="text-muted mb-1">Treynor Ratio</h6>
                                            <h4 class="mb-0">@optimization.RiskAnalysis.TreynorRatio.ToString("F2")</h4>
                                            <small>Return per unit of market risk</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- No Optimization Data -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body text-center py-5">
                    <i class="fas fa-chart-area fa-4x text-muted mb-3"></i>
                    <h4>Portfolio Optimization Coming Soon</h4>
                    <p class="text-muted mb-3">
                        Portfolio optimization requires:
                    </p>
                    <ul class="list-unstyled text-muted">
                        <li><i class="fas fa-check-circle text-success me-2"></i>At least 2 stocks in your portfolio</li>
                        <li><i class="fas fa-clock text-warning me-2"></i>2+ years of historical price data</li>
                        <li><i class="fas fa-calendar text-info me-2"></i>Regular price updates over time</li>
                    </ul>
                    <p class="text-muted mt-3">
                        The system is currently collecting historical data. Check back in a few days to see 
                        advanced analytics including efficient frontier, Monte Carlo simulations, and risk metrics.
                    </p>
                    @if (Model.UserStocks?.Count < 2)
                    {
                        <a href="@Url.Action("CreateOrEdit", "AppUserStocks")" class="btn btn-primary mt-3">
                            <i class="fas fa-plus me-2"></i>Add More Stocks
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}


@if (hasOptimization)
{
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add tab visibility check and delay chart initialization
    function initializePerformanceCharts() {
            <text>
            console.log('Initializing Performance tab charts...');
            
            // Prepare optimization data
            var efficientFrontier = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.EfficientFrontier) ?? "[]");
            var currentPortfolio = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.CurrentPortfolio) ?? "null");
            var optimalPortfolio = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.OptimalPortfolio) ?? "null");
            var monteCarloResults = @Html.Raw(optimization.MonteCarloSimulations != null ? Newtonsoft.Json.JsonConvert.SerializeObject(optimization.MonteCarloSimulations.Take(100)) : "[]"); // Sample for performance
            var historicalPerformance = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.HistoricalPerformance) ?? "null");
            
            console.log('Efficient Frontier data:', efficientFrontier);
            console.log('Current Portfolio:', currentPortfolio);
            console.log('Optimal Portfolio:', optimalPortfolio);
            console.log('Monte Carlo Results:', monteCarloResults);
            console.log('Historical Performance:', historicalPerformance);
        
        // Light theme configuration for charts
        var lightTheme = {
            chart: {
                backgroundColor: '#ffffff',
                borderRadius: 8,
                style: {
                    fontFamily: 'Roboto, sans-serif'
                }
            },
            title: {
                style: {
                    color: '#333333',
                    fontSize: '18px',
                    fontWeight: '600'
                }
            },
            subtitle: {
                style: {
                    color: '#666666'
                }
            },
            xAxis: {
                gridLineColor: '#e0e0e0',
                labels: {
                    style: {
                        color: '#333333'
                    }
                },
                title: {
                    style: {
                        color: '#333333',
                        fontSize: '14px'
                    }
                },
                lineColor: '#cccccc'
            },
            yAxis: {
                gridLineColor: '#e0e0e0',
                labels: {
                    style: {
                        color: '#333333'
                    }
                },
                title: {
                    style: {
                        color: '#333333',
                        fontSize: '14px'
                    }
                }
            },
            tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                borderColor: '#cccccc',
                style: {
                    color: '#333333'
                }
            },
            legend: {
                backgroundColor: '#ffffff',
                itemStyle: {
                    color: '#333333'
                },
                itemHoverStyle: {
                    color: '#000000'
                }
            }
        };
        
        // 1. Efficient Frontier Chart
        if (document.getElementById('efficientFrontierChart') && efficientFrontier && efficientFrontier.length > 0) {
            var frontierData = efficientFrontier.map(p => ({
                x: p.Risk * 100,
                y: p.Return * 100,
                sharpe: p.SharpeRatio
            }));
            
            Highcharts.chart('efficientFrontierChart', Highcharts.merge(lightTheme, {
                chart: {
                    type: 'scatter'
                },
                title: {
                    text: 'Risk vs Return Analysis'
                },
                xAxis: {
                    title: { text: 'Risk (Volatility %)' },
                    min: 0
                },
                yAxis: {
                    title: { text: 'Expected Return (%)' }
                },
                tooltip: {
                    formatter: function() {
                        if (this.series.name === 'Efficient Frontier') {
                            return '<b>Efficient Portfolio</b><br>' +
                                   'Risk: ' + this.x.toFixed(2) + '%<br>' +
                                   'Return: ' + this.y.toFixed(2) + '%<br>' +
                                   'Sharpe: ' + this.point.sharpe.toFixed(2);
                        }
                        return '<b>' + this.series.name + '</b><br>' +
                               'Risk: ' + this.x.toFixed(2) + '%<br>' +
                               'Return: ' + this.y.toFixed(2) + '%';
                    }
                },
                plotOptions: {
                    scatter: {
                        marker: {
                            radius: 5,
                            states: {
                                hover: {
                                    enabled: true,
                                    lineColor: 'rgb(100,100,100)'
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'Efficient Frontier',
                    data: frontierData,
                    color: '#007bff',
                    lineWidth: 2,
                    marker: { radius: 3 },
                    type: 'line'
                }, {
                    name: 'Current Portfolio',
                    data: currentPortfolio && currentPortfolio.Risk !== undefined && currentPortfolio.Return !== undefined ? [{
                        x: currentPortfolio.Risk * 100,
                        y: currentPortfolio.Return * 100
                    }] : [],
                    color: '#dc3545',
                    marker: {
                        symbol: 'circle',
                        radius: 10
                    }
                }, {
                    name: 'Optimal Portfolio',
                    data: optimalPortfolio && optimalPortfolio.Risk !== undefined && optimalPortfolio.Return !== undefined ? [{
                        x: optimalPortfolio.Risk * 100,
                        y: optimalPortfolio.Return * 100
                    }] : [],
                    color: '#28a745',
                    marker: {
                        symbol: 'diamond',
                        radius: 12
                    }
                }],
                annotations: currentPortfolio && optimalPortfolio ? [{
                    labels: [{
                        point: {
                            x: currentPortfolio.Risk * 100,
                            y: currentPortfolio.Return * 100
                        },
                        text: 'Current'
                    }, {
                        point: {
                            x: optimalPortfolio.Risk * 100,
                            y: optimalPortfolio.Return * 100
                        },
                        text: 'Optimal'
                    }]
                }] : []
            }));
        }
        
        // 2. Monte Carlo Fan Chart
        if (document.getElementById('monteCarloChart') && monteCarloResults && monteCarloResults.length > 0) {
            // Extract percentile paths
            var p5 = monteCarloResults.find(r => r.Percentile >= 5);
            var p25 = monteCarloResults.find(r => r.Percentile >= 25);
            var p50 = monteCarloResults.find(r => r.Percentile >= 50);
            var p75 = monteCarloResults.find(r => r.Percentile >= 75);
            var p95 = monteCarloResults.find(r => r.Percentile >= 95);
            
            // Create time series data
            var categories = [];
            if (p50 && p50.Path && p50.Path.length > 0) {
                for (var i = 0; i <= p50.Path.length; i += 63) { // Quarterly points
                    categories.push('Q' + Math.floor(i / 63));
                }
            }
            
            Highcharts.chart('monteCarloChart', Highcharts.merge(lightTheme, {
                chart: {
                    type: 'arearange'
                },
                title: {
                    text: 'Portfolio Value Projections'
                },
                xAxis: {
                    categories: categories,
                    title: { text: 'Time (Quarters)' }
                },
                yAxis: {
                    title: { text: 'Portfolio Value ($)' }
                },
                tooltip: {
                    crosshairs: true,
                    shared: true,
                    valuePrefix: '$'
                },
                series: [{
                    name: '90% Confidence Interval',
                    data: categories.map((_, i) => {
                        var idx = i * 63;
                        if (p5 && p5.Path && p95 && p95.Path) {
                            return [p5.Path[idx] || p5.Path[p5.Path.length - 1], 
                                    p95.Path[idx] || p95.Path[p95.Path.length - 1]];
                        }
                        return [0, 0];
                    }),
                    type: 'arearange',
                    lineWidth: 0,
                    color: '#28a745',
                    fillOpacity: 0.2
                }, {
                    name: '50% Confidence Interval',
                    data: categories.map((_, i) => {
                        var idx = i * 63;
                        if (p25 && p25.Path && p75 && p75.Path) {
                            return [p25.Path[idx] || p25.Path[p25.Path.length - 1], 
                                    p75.Path[idx] || p75.Path[p75.Path.length - 1]];
                        }
                        return [0, 0];
                    }),
                    type: 'arearange',
                    lineWidth: 0,
                    color: '#28a745',
                    fillOpacity: 0.4
                }, {
                    name: 'Median Path',
                    data: categories.map((_, i) => {
                        var idx = i * 63;
                        if (p50 && p50.Path) {
                            return p50.Path[idx] || p50.Path[p50.Path.length - 1];
                        }
                        return 0;
                    }),
                    type: 'line',
                    lineWidth: 3,
                    color: '#212529',
                    marker: { enabled: false }
                }]
            }));
        }
        
        // 3. Outcome Distribution
        if (document.getElementById('outcomeDistribution')) {
            var finalValues = monteCarloResults.map(r => r.FinalValue);
            var histogram = [];
            var bins = 20;
            var min = Math.min(...finalValues);
            var max = Math.max(...finalValues);
            var binWidth = (max - min) / bins;
            
            for (var i = 0; i < bins; i++) {
                var binMin = min + i * binWidth;
                var binMax = binMin + binWidth;
                var count = finalValues.filter(v => v >= binMin && v < binMax).length;
                histogram.push({
                    x: (binMin + binMax) / 2,
                    y: count
                });
            }
            
            Highcharts.chart('outcomeDistribution', Highcharts.merge(lightTheme, {
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Final Value Distribution'
                },
                xAxis: {
                    title: { text: 'Portfolio Value ($)' }
                },
                yAxis: {
                    title: { text: 'Frequency' }
                },
                series: [{
                    name: 'Outcomes',
                    data: histogram,
                    color: '#17a2b8'
                }],
                legend: { enabled: false }
            });
        }
        
        // 4. Risk Gauge Chart
        if (document.getElementById('riskGaugeChart') && optimization.RiskAnalysis && optimization.RiskAnalysis.ValueAtRisk95 !== undefined) {
            var riskScore = optimization.RiskAnalysis.ValueAtRisk95 * 100;
            
            Highcharts.chart('riskGaugeChart', {
                chart: {
                    type: 'gauge',
                    backgroundColor: '#ffffff'
                },
                title: {
                    text: 'Portfolio Risk Level'
                },
                pane: {
                    startAngle: -150,
                    endAngle: 150,
                    background: [{
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#FFF'],
                                [1, '#333']
                            ]
                        },
                        borderWidth: 0,
                        outerRadius: '109%'
                    }, {
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#333'],
                                [1, '#FFF']
                            ]
                        },
                        borderWidth: 1,
                        outerRadius: '107%'
                    }, {
                        backgroundColor: '#DDD',
                        borderWidth: 0,
                        outerRadius: '105%',
                        innerRadius: '103%'
                    }]
                },
                yAxis: {
                    min: 0,
                    max: 50,
                    minorTickInterval: 'auto',
                    minorTickWidth: 1,
                    minorTickLength: 10,
                    minorTickPosition: 'inside',
                    minorTickColor: '#666',
                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 10,
                    tickColor: '#666',
                    labels: {
                        step: 2,
                        rotation: 'auto'
                    },
                    title: {
                        text: 'VaR %'
                    },
                    plotBands: [{
                        from: 0,
                        to: 10,
                        color: '#55BF3B' // green
                    }, {
                        from: 10,
                        to: 20,
                        color: '#DDDF0D' // yellow
                    }, {
                        from: 20,
                        to: 30,
                        color: '#FFA500' // orange
                    }, {
                        from: 30,
                        to: 50,
                        color: '#DF5353' // red
                    }]
                },
                series: [{
                    name: 'Risk',
                    data: [Math.abs(riskScore)],
                    tooltip: {
                        valueSuffix: '%'
                    }
                }]
            }));
        }
        
        // 5. Historical Performance Chart
        if (document.getElementById('historicalPerformanceChart') && historicalPerformance && historicalPerformance.ActualPerformance) {
            // Prepare data series
            var actualData = historicalPerformance.ActualPerformance.map(p => ({
                x: new Date(p.Date).getTime(),
                y: p.Value
            }));
            
            var optimalData = historicalPerformance.OptimalPerformance.map(p => ({
                x: new Date(p.Date).getTime(),
                y: p.Value
            }));
            
            Highcharts.chart('historicalPerformanceChart', Highcharts.merge(lightTheme, {
                chart: {
                    type: 'line',
                    zoomType: 'x'
                },
                title: {
                    text: 'Portfolio Performance: Actual vs Optimal Strategy'
                },
                subtitle: {
                    text: 'What could have been earned with optimal allocation from ' + 
                          new Date(historicalPerformance.StartDate).toLocaleDateString()
                },
                xAxis: {
                    type: 'datetime',
                    title: { text: 'Date' }
                },
                yAxis: {
                    title: { text: 'Portfolio Value ($)' }
                },
                tooltip: {
                    shared: true,
                    crosshairs: true,
                    formatter: function() {
                        var date = new Date(this.x).toLocaleDateString();
                        var s = '<b>' + date + '</b>';
                        
                        this.points.forEach(function(point) {
                            var value = point.y.toFixed(2);
                            var actualPoint = historicalPerformance.ActualPerformance.find(p => 
                                new Date(p.Date).getTime() === point.x);
                            var optimalPoint = historicalPerformance.OptimalPerformance.find(p => 
                                new Date(p.Date).getTime() === point.x);
                            
                            if (point.series.name === 'Your Actual Strategy' && actualPoint) {
                                s += '<br/>' + point.series.name + ': $' + value + 
                                     ' (' + (actualPoint.CumulativeReturn * 100).toFixed(2) + '% return)';
                            } else if (point.series.name === 'Optimal Strategy' && optimalPoint) {
                                s += '<br/>' + point.series.name + ': $' + value + 
                                     ' (' + (optimalPoint.CumulativeReturn * 100).toFixed(2) + '% return)';
                            }
                        });
                        
                        return s;
                    }
                },
                plotOptions: {
                    line: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                series: [{
                    name: 'Your Actual Strategy',
                    data: actualData,
                    color: '#dc3545',
                    lineWidth: 2
                }, {
                    name: 'Optimal Strategy',
                    data: optimalData,
                    color: '#28a745',
                    lineWidth: 2,
                    dashStyle: 'shortdash'
                }],
                annotations: [{
                    labelOptions: {
                        backgroundColor: 'rgba(255,255,255,0.8)',
                        borderColor: '#666',
                        borderRadius: 5
                    },
                    labels: [{
                        point: {
                            xAxis: 0,
                            yAxis: 0,
                            x: actualData[actualData.length - 1].x,
                            y: actualData[actualData.length - 1].y
                        },
                        text: 'Actual: $' + actualData[actualData.length - 1].y.toFixed(2)
                    }, {
                        point: {
                            xAxis: 0,
                            yAxis: 0,
                            x: optimalData[optimalData.length - 1].x,
                            y: optimalData[optimalData.length - 1].y
                        },
                        text: 'Optimal: $' + optimalData[optimalData.length - 1].y.toFixed(2)
                    }]
                }]
            }));
        }
        </text>
        }
        else
        {
            <text>
            console.log('Portfolio optimization is not available - need more historical data or stocks');
            </text>
        }
    }
    
    // Initialize charts when tab becomes visible
    setTimeout(function() {
        initializePerformanceCharts();
    }, 100);
    
    // Also initialize when tab is shown
    var performanceTab = document.querySelector('#performance-tab');
    if (performanceTab) {
        performanceTab.addEventListener('shown.bs.tab', function() {
            setTimeout(initializePerformanceCharts, 100);
        });
    }
});
</script>
}