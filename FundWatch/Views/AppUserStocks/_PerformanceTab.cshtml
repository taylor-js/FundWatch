@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models.QuantitativeModels
@{
    var hasOptimization = Model.PortfolioOptimization != null;
    var optimization = Model.PortfolioOptimization;
}

<!-- Modern Portfolio Theory Introduction -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-lg border-0 bg-gradient-success text-white compact-header-card">
            <div class="card-body">
                <div class="row align-items-center g-3">
                    <div class="col-md-9">
                        <h5 class="mb-1">Portfolio Optimization & Efficient Frontier</h5>
                        <p class="mb-0 small">
                            Discover your optimal portfolio allocation using Modern Portfolio Theory. 
                            The efficient frontier shows the best risk-return combinations, while Monte Carlo 
                            simulations reveal potential future outcomes based on 1,000+ scenarios.
                        </p>
                    </div>
                    <div class="col-md-3 text-end">
                        <div class="fs-3">
                            <i class="fas fa-chart-area"></i> <i class="fas fa-exchange-alt mx-1"></i> <i class="fas fa-balance-scale"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (hasOptimization)
{
    <!-- Historical Performance vs Optimal Strategy -->
    @if (optimization.HistoricalPerformance != null && optimization.HistoricalPerformance.ActualPerformance?.Any() == true)
    {
        <!-- Historical Performance Analysis Header -->
        <div class="row mb-3">
            <div class="col-12">
                <h5 class="text-light">
                    <i class="fas fa-history me-2"></i>Historical Performance Analysis
                </h5>
            </div>
        </div>
        
        <!-- Historical Performance Metrics Cards -->
        <div class="row mb-4">
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <h6 class="text-muted mb-2" style="font-size: 0.85rem;">Your Actual Return</h6>
                        <h3 class="mb-1 @(optimization.HistoricalPerformance.ActualReturn < 0 ? "text-danger" : "text-success")" style="font-size: 1.75rem;">
                            @((optimization.HistoricalPerformance.ActualReturn * 100).ToString("F2"))%
                        </h3>
                        <small class="text-muted" style="font-size: 0.75rem;">Since @optimization.HistoricalPerformance.StartDate.ToString("MMM yyyy")</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <h6 class="text-muted mb-2" style="font-size: 0.85rem;">Optimal Strategy Return</h6>
                        <h3 class="mb-1 text-primary" style="font-size: 1.75rem;">
                            @((optimization.HistoricalPerformance.OptimalReturn * 100).ToString("F2"))%
                        </h3>
                        <small class="text-muted" style="font-size: 0.75rem;">What you could have earned</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <h6 class="text-muted mb-2" style="font-size: 0.85rem;">Missed Gains</h6>
                        <h3 class="mb-1 @(optimization.HistoricalPerformance.MissedGains > 0 ? "text-warning" : "text-success")" style="font-size: 1.75rem;">
                            @((optimization.HistoricalPerformance.MissedGains * 100).ToString("F2"))%
                        </h3>
                        <small class="text-muted" style="font-size: 0.75rem;">Opportunity cost</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <h6 class="text-muted mb-2" style="font-size: 0.85rem;">Days Analyzed</h6>
                        <h3 class="mb-1 text-info" style="font-size: 1.75rem;">
                            @((optimization.HistoricalPerformance.EndDate - optimization.HistoricalPerformance.StartDate).Days)
                        </h3>
                        <small class="text-muted" style="font-size: 0.75rem;">Historical data points</small>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Historical Performance Chart -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-line me-2"></i>Historical Performance: Actual vs Optimal Strategy
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container-legend">
                            <canvas id="historicalPerformanceChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <!-- Key Metrics Comparison -->
    <div class="row mb-4">
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card border-0 shadow-sm compact-metric-card">
                <div class="card-body text-center">
                    <div class="icon-wrapper">
                        <i class="fas fa-bullseye fa-2x text-primary"></i>
                    </div>
                    <h6 class="text-muted">Current Sharpe Ratio</h6>
                    <h3>@optimization.CurrentPortfolio.SharpeRatio.ToString("F2")</h3>
                    <p class="text-muted small">(Risk-adjusted return)</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card border-0 shadow-sm compact-metric-card">
                <div class="card-body text-center">
                    <div class="icon-wrapper">
                        <i class="fas fa-chart-line fa-2x text-success"></i>
                    </div>
                    <h6 class="text-muted">Optimal Sharpe Ratio</h6>
                    <h3 class="text-success">@optimization.OptimalPortfolio.SharpeRatio.ToString("F2")</h3>
                    <p class="text-muted small">(Achievable with rebalancing)</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card border-0 shadow-sm compact-metric-card">
                <div class="card-body text-center">
                    <div class="icon-wrapper">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning"></i>
                    </div>
                    <h6 class="text-muted">Value at Risk (95%)</h6>
                    <h3 class="text-warning">@((optimization.RiskAnalysis.ValueAtRisk95 * 100).ToString("F1"))%</h3>
                    <p class="text-muted small">(5% chance of exceeding)</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 col-lg-3 mb-3">
            <div class="card border-0 shadow-sm compact-metric-card">
                <div class="card-body text-center">
                    <div class="icon-wrapper">
                        <i class="fas fa-shield-alt fa-2x text-info"></i>
                    </div>
                    <h6 class="text-muted">Max Drawdown</h6>
                    <h3 class="text-info">@((optimization.RiskAnalysis.MaxDrawdown * 100).ToString("F1"))%</h3>
                    <p class="text-muted small">(Worst historical decline)</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Charts Row 1: Efficient Frontier & Monte Carlo -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-scatter me-2"></i>Efficient Frontier Analysis
                    </h5>
                </div>
                <div class="card-body">
                    <div class="chart-container-legend">
                        <canvas id="efficientFrontierChart"></canvas>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            The efficient frontier shows all optimal portfolios. Your current allocation 
                            can be improved to achieve better returns for the same risk level.
                        </small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-area me-2"></i>Monte Carlo Projections
                    </h5>
                </div>
                <div class="card-body">
                    <div id="monteCarloChart" class="chart-container-legend"></div>
                    <div class="mt-3">
                        <small class="text-muted">
                            Based on 1,000 simulations, showing confidence intervals for future portfolio values. 
                            The shaded areas represent different probability ranges.
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Charts Row 2: Outcome Distribution & Risk Gauge -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-bar me-2"></i>Potential Outcome Distribution
                    </h5>
                </div>
                <div class="card-body">
                    <div id="outcomeDistribution" class="chart-container-400"></div>
                    <div class="mt-3">
                        <small class="text-muted">
                            Distribution of possible portfolio values after 5 years. Most likely outcomes 
                            cluster around the median, with tails showing extreme scenarios.
                        </small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">
                        <i class="fas fa-tachometer-alt me-2"></i>Portfolio Risk Assessment
                    </h5>
                </div>
                <div class="card-body">
                    <div id="riskGaugeChart" class="chart-container-400"></div>
                    <div class="mt-3 text-center">
                        <h6>Risk Level: 
                            @if (optimization.RiskAnalysis.ValueAtRisk95 < 0.1)
                            {
                                <span class="badge bg-success">Low</span>
                            }
                            else if (optimization.RiskAnalysis.ValueAtRisk95 < 0.2)
                            {
                                <span class="badge bg-warning">Moderate</span>
                            }
                            else if (optimization.RiskAnalysis.ValueAtRisk95 < 0.3)
                            {
                                <span class="badge bg-orange">High</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Very High</span>
                            }
                        </h6>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Optimal Allocation Recommendations -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-balance-scale me-2"></i>Recommended Portfolio Allocation
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">Your Current Allocation</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Stock</th>
                                            <th class="text-end">Weight</th>
                                            <th class="text-end">Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var kvp in optimization.CurrentPortfolio.Weights.OrderByDescending(h => h.Value))
                                        {
                                            var stock = Model.UserStocks.FirstOrDefault(s => s.StockSymbol == kvp.Key);
                                            var value = stock != null ? (stock.TotalValue * (decimal)kvp.Value) : 0;
                                            <tr>
                                                <td>@kvp.Key</td>
                                                <td class="text-end">@((kvp.Value * 100).ToString("F1"))%</td>
                                                <td class="text-end">$@value.ToString("N0")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">Optimal Allocation <span class="badge bg-success">Recommended</span></h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Stock</th>
                                            <th class="text-end">Weight</th>
                                            <th class="text-end">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var kvp in optimization.OptimalPortfolio.Weights.OrderByDescending(h => h.Value))
                                        {
                                            var currentWeight = optimization.CurrentPortfolio.Weights.ContainsKey(kvp.Key) ? optimization.CurrentPortfolio.Weights[kvp.Key] : 0;
                                            var difference = kvp.Value - currentWeight;
                                            <tr>
                                                <td>@kvp.Key</td>
                                                <td class="text-end">@((kvp.Value * 100).ToString("F1"))%</td>
                                                <td class="text-end">
                                                    @if (Math.Abs(difference) < 0.01)
                                                    {
                                                        <span class="text-muted">No change</span>
                                                    }
                                                    else if (difference > 0)
                                                    {
                                                        <span class="text-success">+@((difference * 100).ToString("F1"))%</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-danger">@((difference * 100).ToString("F1"))%</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3 mb-0">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Rebalancing Benefits:</strong> Moving to the optimal allocation could improve your 
                        Sharpe ratio from @optimization.CurrentPortfolio.SharpeRatio.ToString("F2") to 
                        @optimization.OptimalPortfolio.SharpeRatio.ToString("F2"), providing better risk-adjusted returns.
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- No Optimization Available -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body text-center py-5">
                    <i class="fas fa-chart-area fa-4x text-muted mb-3"></i>
                    <h4>Portfolio Optimization Coming Soon</h4>
                    <p class="text-muted mb-3">
                        Portfolio optimization requires:
                    </p>
                    <ul class="list-unstyled text-muted">
                        <li><i class="fas fa-check-circle text-success me-2"></i>At least 2 stocks in your portfolio</li>
                        <li><i class="fas fa-clock text-warning me-2"></i>2+ years of historical price data</li>
                        <li><i class="fas fa-calendar text-info me-2"></i>Regular price updates over time</li>
                    </ul>
                    <p class="text-muted mt-3">
                        The system is currently collecting historical data. Check back in a few days to see 
                        advanced analytics including efficient frontier, Monte Carlo simulations, and risk metrics.
                    </p>
                    @if (Model.UserStocks?.Count < 2)
                    {
                        <a href="@Url.Action("CreateOrEdit", "AppUserStocks")" class="btn btn-primary mt-3">
                            <i class="fas fa-plus me-2"></i>Add More Stocks
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Log environment info for debugging
    console.log('Performance Tab: DOMContentLoaded event fired');
    console.log('Current URL:', window.location.href);
    console.log('Is HTTPS:', window.location.protocol === 'https:');
    
    // Add tab visibility check and delay chart initialization
    function initializePerformanceChartsForTab() {
        @if (hasOptimization)
        {
            <text>
            console.log('Initializing Performance tab charts...');
            
            // Prepare optimization data for the module
            var chartData = {
                hasOptimization: true,
                efficientFrontier: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.EfficientFrontier) ?? "[]"),
                currentPortfolio: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.CurrentPortfolio) ?? "null"),
                optimalPortfolio: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.OptimalPortfolio) ?? "null"),
                monteCarloResults: @Html.Raw(optimization.MonteCarloSimulations != null ? Newtonsoft.Json.JsonConvert.SerializeObject(optimization.MonteCarloSimulations.Take(100)) : "[]"),
                historicalPerformance: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization.HistoricalPerformance) ?? "null"),
                optimization: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(optimization) ?? "null")
            };
            
            console.log('Chart data prepared:', chartData);
            console.log('EfficientFrontier chart container exists:', document.getElementById('efficientFrontierChart') !== null);
            console.log('HistoricalPerformance chart container exists:', document.getElementById('historicalPerformanceChart') !== null);
            
            // Use simple Chart.js implementation for these problematic charts
            if (typeof Chart !== 'undefined') {
                if (typeof SimplePerformanceCharts !== 'undefined' && SimplePerformanceCharts.initializeCharts) {
                    console.log('Initializing charts with SimplePerformanceCharts module');
                    SimplePerformanceCharts.initializeCharts(chartData);
                } else {
                    console.error('SimplePerformanceCharts module not loaded, waiting for it...');
                    // Wait for the module to load
                    var waitForModule = setInterval(function() {
                        if (typeof SimplePerformanceCharts !== 'undefined' && SimplePerformanceCharts.initializeCharts) {
                            console.log('SimplePerformanceCharts loaded, initializing charts');
                            clearInterval(waitForModule);
                            SimplePerformanceCharts.initializeCharts(chartData);
                        }
                    }, 100);
                    
                    // Stop waiting after 5 seconds
                    setTimeout(function() {
                        clearInterval(waitForModule);
                        console.error('SimplePerformanceCharts module failed to load after 5 seconds');
                    }, 5000);
                }
            } else {
                console.error('Chart.js not loaded - will wait for dynamic loading');
            }
            
            // Still initialize other charts with Highcharts
            if (typeof PerformanceCharts !== 'undefined' && PerformanceCharts.initializeCharts) {
                // This will handle the other charts (Monte Carlo, etc.)
                PerformanceCharts.initializeCharts(chartData);
            }
            </text>
        }
        else
        {
            <text>
            console.log('Portfolio optimization is not available - need more historical data or stocks');
            </text>
        }
    }
    
    // Initialize charts when tab becomes visible
    var retryCount = 0;
    var maxRetries = 20; // 10 seconds total
    
    function tryInitializeCharts() {
        console.log('Attempting to initialize performance charts... (attempt ' + (retryCount + 1) + ')');
        console.log('Chart.js available:', typeof Chart !== 'undefined');
        console.log('Highcharts available:', typeof Highcharts !== 'undefined');
        console.log('SimplePerformanceCharts available:', typeof SimplePerformanceCharts !== 'undefined');
        console.log('PerformanceCharts module available:', typeof PerformanceCharts !== 'undefined');
        
        // Check if Chart.js is loaded
        if (typeof Chart === 'undefined') {
            retryCount++;
            if (retryCount >= maxRetries) {
                console.error('Chart.js failed to load after ' + maxRetries + ' attempts. Trying dynamic load...');
                // Try to load Chart.js dynamically
                var script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js';
                script.crossOrigin = 'anonymous';
                script.onload = function() {
                    console.log('Chart.js loaded dynamically!');
                    retryCount = 0; // Reset retry count
                    tryInitializeCharts();
                };
                script.onerror = function() {
                    console.error('Failed to load Chart.js dynamically');
                };
                document.head.appendChild(script);
                return;
            }
            console.warn('Chart.js not yet loaded, retrying in 500ms...');
            setTimeout(tryInitializeCharts, 500);
            return;
        }
        
        // Check if SimplePerformanceCharts is loaded
        if (typeof SimplePerformanceCharts === 'undefined') {
            retryCount++;
            if (retryCount >= maxRetries) {
                console.error('SimplePerformanceCharts failed to load after ' + maxRetries + ' attempts');
                return;
            }
            console.warn('SimplePerformanceCharts not yet loaded, retrying in 500ms...');
            setTimeout(tryInitializeCharts, 500);
            return;
        }
        
        // All libraries loaded, initialize charts
        initializePerformanceChartsForTab();
    }
    
    // Start trying to initialize charts
    setTimeout(tryInitializeCharts, 100);
    
    // Check if Performance tab is already active (e.g., when loading with ?tab=performance)
    setTimeout(function() {
        var performanceTabPane = document.getElementById('performanceTab');
        var performanceTabLink = document.getElementById('performance-tab');
        
        if (performanceTabPane && performanceTabPane.classList.contains('active')) {
            console.log('Performance tab is already active, triggering reflow...');
            
            // Reinitialize charts after a delay
            setTimeout(function() {
                initializePerformanceChartsForTab();
            }, 1000);
        }
    }, 100);
    
    // Also initialize when tab is shown
    var performanceTab = document.querySelector('#performance-tab');
    if (performanceTab) {
        // Handle Bootstrap tab shown event
        performanceTab.addEventListener('shown.bs.tab', function() {
            console.log('Performance tab shown event triggered');
            
            // Reinitialize all charts when tab is shown
            setTimeout(function() {
                initializePerformanceChartsForTab();
            }, 100);
        });
    }
});
</script>