@model FundWatch.Models.ViewModels.StockDetailsViewModel
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids
@{
    ViewData["Title"] = "Stock Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = new System.Globalization.CultureInfo("en-US");
}

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Basic Information Card -->
        <div class="col-md-8 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                    <h5 class="mb-0 text-wrap">@Model.Stock.StockSymbol Details</h5>
                    <span class="badge bg-light text-primary mt-2 mt-md-0 text-wrap">@Model.CompanyDetails.Industry</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-muted">Company Information</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Name</dt>
                                <dd class="col-sm-8">@Model.CompanyDetails.Name</dd>
                                <dt class="col-sm-4">Market Cap</dt>
                                <dd class="col-sm-8">@(Model.CompanyDetails.MarketCap > 0 ? Model.CompanyDetails.MarketCap.ToString("C0", culture) : "N/A")</dd>
                                <dt class="col-sm-4">Employees</dt>
                                <dd class="col-sm-8">@(Model.CompanyDetails.Employees > 0 ? Model.CompanyDetails.Employees.ToString("N0", culture) : "N/A")</dd>
                                <dt class="col-sm-4">Website</dt>
                                <dd class="col-sm-8">
                                    @if (!string.IsNullOrEmpty(Model.CompanyDetails.Website))
                                    {
                                        <a href="@Model.CompanyDetails.Website" target="_blank">Visit Website</a>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted">Investment Details</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Purchase Date</dt>
                                <dd class="col-sm-8">@Model.Stock.DatePurchased.ToString("MMM dd, yyyy")</dd>
                                <dt class="col-sm-4">Purchase Price</dt>
                                <dd class="col-sm-8">@Model.Stock.PurchasePrice.ToString("C2", culture)</dd>
                                <dt class="col-sm-4">Shares Owned</dt>
                                <dd class="col-sm-8">@(Model.Stock.NumberOfSharesPurchased - (Model.Stock.NumberOfSharesSold ?? 0))</dd>
                                <dt class="col-sm-4">Total Investment</dt>
                                <dd class="col-sm-8">@((Model.Stock.PurchasePrice * Model.Stock.NumberOfSharesPurchased).ToString("C2", culture))</dd>
                            </dl>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.CompanyDetails.Description))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6 class="text-muted">Company Description</h6>
                                <p class="text-justify">@Model.CompanyDetails.Description</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Performance Metrics Card -->
        <div class="col-md-4 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Performance Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="metric-item mb-3">
                        <h6 class="text-muted">Current Price</h6>
                        <h3 class="mb-0">@Model.Stock.CurrentPrice.ToString("C2", culture)</h3>
                        <small class="@(Model.Stock.ValueChange >= 0 ? "text-success" : "text-danger")">
                            @(Model.Stock.ValueChange >= 0 ? "+" : "")@Model.Stock.ValueChange.ToString("C2", culture)
                        </small>
                    </div>

                    <div class="metric-item mb-3">
                        <h6 class="text-muted">Total Value</h6>
                        <h3 class="mb-0">@Model.Stock.TotalValue.ToString("C2", culture)</h3>
                        <small class="@(Model.Stock.PerformancePercentage >= 0 ? "text-success" : "text-danger")">
                            @(Model.Stock.PerformancePercentage >= 0 ? "+" : "")@Model.Stock.PerformancePercentage.ToString("N2")%
                        </small>
                    </div>

                    @if (Model.Stock.DateSold.HasValue)
                    {
                        <div class="metric-item">
                            <h6 class="text-muted">Sale Information</h6>
                            <dl class="row mb-0">
                                <dt class="col-sm-6">Date Sold</dt>
                                <dd class="col-sm-6">@Model.Stock.DateSold?.ToString("MMM dd, yyyy")</dd>
                                <dt class="col-sm-6">Shares Sold</dt>
                                <dd class="col-sm-6">@Model.Stock.NumberOfSharesSold</dd>
                            </dl>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Price History Chart -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Price History</h5>
                </div>
                <div class="card-body" style="height: 450px; padding-bottom: 30px;">
                    @(Html.EJS().StockChart("priceHistoryChart")
                        .PrimaryXAxis(px => px
                        .ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
                        .LabelFormat("MM/dd/yyyy")
                        .EdgeLabelPlacement(EdgeLabelPlacement.Shift)
                        .MajorGridLines(mg => mg.Width(0))
                        )
                        .PrimaryYAxis(py => py
                        .LabelFormat("${value}")
                        .RangePadding(ChartRangePadding.Auto)
                        .LineStyle(ls => ls.Width(0))
                        .MajorTickLines(mt => mt.Width(0))
                        )
                        .Series(sr =>
                        {
                            sr.Type(ChartSeriesType.Candle)
                            .DataSource(Model.HistoricalData)
                            .XName("Date")
                            .High("High")
                            .Low("Low")
                            .Open("Open")
                            .Close("Close")
                            .Name(Model.Stock.StockSymbol)
                            .Add();
                        })
                        .Tooltip(ts => ts
                        .Enable(true)
                        .Format("Date: ${point.x}<br>Open: ${point.open}<br>High: ${point.high}<br>Low: ${point.low}<br>Close: ${point.close}")
                        )
                        .Crosshair(ch => ch
                        .Enable(true)
                        .LineType(LineType.Vertical)
                        )
                        .EnablePeriodSelector(true)
                        .EnableSelector(false)
                        .Periods(p =>
                        {
                            p.Text("1M").Interval(1).IntervalType(RangeIntervalType.Months).Add();
                            p.Text("3M").Interval(3).IntervalType(RangeIntervalType.Months).Add();
                            p.Text("6M").Interval(6).IntervalType(RangeIntervalType.Months).Add();
                            p.Text("1Y").Interval(1).IntervalType(RangeIntervalType.Years).Add();
                            // Custom YTD calculation
                            p.Text("YTD").Interval(1).IntervalType(RangeIntervalType.Years).Add(); // Will be handled in JS
                            p.Text("5Y").Interval(5).IntervalType(RangeIntervalType.Years).Selected(true).Add();
                            p.Text("ALL").Interval(20).IntervalType(RangeIntervalType.Years).Add();
                        })
                        .ZoomSettings(z => z
                            .EnableSelectionZooming(true)
                            .EnableScrollbar(true)
                            .EnablePan(true)
                            .Mode(ZoomMode.X)
                        )
                        .ChartArea(ca => ca.Border(b => b.Width(0)))
                        .Margin(m => m.Bottom(30)) // Add bottom margin for x-axis
                        .Load("onDetailsChartLoad")
                        .Render()
                        )
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between">
                <a asp-action="CreateOrEdit" asp-route-id="@Model.Stock.Id" class="btn btn-warning mb-2 mb-md-0">
                    <i class="fas fa-edit"></i> Edit
                </a>
                <div class="d-flex flex-column flex-md-row">
                    <a asp-action="Delete" asp-route-id="@Model.Stock.Id" class="btn btn-danger me-0 me-md-2 mb-2 mb-md-0">
                        <i class="fas fa-trash"></i> Delete
                    </a>
                    <a asp-action="Dashboard" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

</div>

@section Styles {
    <style>
        .metric-item {
            padding: 1rem;
            border-radius: 0.5rem;
            background-color: rgb(61 64 67);
        }

        .text-justify {
            text-align: justify;
        }

        .badge {
            font-size: 0.9rem;
        }
        
        /* Ensure chart x-axis is visible */
        #priceHistoryChart {
            margin-bottom: 20px;
            height: calc(100% - 20px) !important;
        }
    </style>
}

@section Scripts {
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
        
        // Global reference to chart
        let detailsChart;
        
        // Store chart data and extremes
        let candleData = [];
        let allMinHigh = Number.MAX_VALUE;
        let allMaxLow = Number.MIN_VALUE;
        let allMinDate = null;
        let allMaxDate = null;
        
        // Handle chart initialization
        function onDetailsChartLoad(args) {
            detailsChart = args.stockChart;
            
            // Get all candlestick data
            if (detailsChart.series && detailsChart.series[0] && detailsChart.series[0].dataSource) {
                candleData = detailsChart.series[0].dataSource;
                
                // Sort data by date to ensure proper limits
                candleData.sort((a, b) => new Date(a.Date) - new Date(b.Date));
                
                // Find global min/max dates
                if (candleData.length > 0) {
                    allMinDate = new Date(candleData[0].Date);
                    allMaxDate = new Date(candleData[candleData.length - 1].Date);
                }
                
                // Find global min/max price values
                candleData.forEach(point => {
                    if (point.High !== undefined && point.Low !== undefined) {
                        allMinHigh = Math.min(allMinHigh, point.Low);
                        allMaxLow = Math.max(allMaxLow, point.High);
                    }
                });
            }
            
            // Handle YTD period specially
            detailsChart.stockEvents.periodChanged = function(args) {
                if (!args || !args.text) return;
                
                const now = new Date();
                let minDate, maxDate;
                
                if (args.text === "1M") {
                    minDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                } else if (args.text === "3M") {
                    minDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
                } else if (args.text === "6M") {
                    minDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());
                } else if (args.text === "1Y") {
                    minDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
                } else if (args.text === "YTD") {
                    minDate = new Date(now.getFullYear(), 0, 1); // January 1st of current year
                } else if (args.text === "5Y") {
                    minDate = new Date(now.getFullYear() - 5, now.getMonth(), now.getDate());
                } else if (args.text === "ALL") {
                    minDate = allMinDate;
                }
                
                maxDate = now;
                
                // Apply the date range after Syncfusion's internal processing
                setTimeout(() => {
                    detailsChart.primaryXAxis.minimum = minDate;
                    detailsChart.primaryXAxis.maximum = maxDate || now;
                    
                    // Calculate Y-axis range based on visible data
                    updateYAxisRange(minDate, maxDate || now);
                    
                    detailsChart.refresh();
                }, 100);
            };
        }
        
        // Update Y-axis range based on visible data points
        function updateYAxisRange(startDate, endDate) {
            if (!detailsChart || !candleData.length) return;
            
            let minY = Number.MAX_VALUE;
            let maxY = Number.MIN_VALUE;
            
            // Find min/max values in the visible range
            const visibleData = candleData.filter(point => {
                const date = new Date(point.Date);
                return date >= startDate && date <= endDate;
            });
            
            if (visibleData.length > 0) {
                visibleData.forEach(point => {
                    if (point.High !== undefined && point.Low !== undefined) {
                        minY = Math.min(minY, point.Low);
                        maxY = Math.max(maxY, point.High);
                    }
                });
                
                // Apply padding to y-axis range (10% padding)
                if (minY !== Number.MAX_VALUE && maxY !== Number.MIN_VALUE) {
                    const range = maxY - minY;
                    const padding = range * 0.1;
                    
                    detailsChart.primaryYAxis.minimum = Math.max(0, minY - padding);
                    detailsChart.primaryYAxis.maximum = maxY + padding;
                }
            }
        }
    </script>
}