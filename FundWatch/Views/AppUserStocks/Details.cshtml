@model FundWatch.Models.ViewModels.StockDetailsViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Stock Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = new System.Globalization.CultureInfo("en-US");
}

<div class="container mt-4">
    <div class="row equal-height-cards">
        <!-- Basic Information Card -->
        <div class="col-md-8 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                    <h5 class="mb-0 text-wrap">@Model.Stock.StockSymbol Details</h5>
                    <span class="badge bg-light text-primary mt-2 mt-md-0 text-wrap">@Model.CompanyDetails.Industry</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex mb-3">
                                <h6 class="text-muted me-3">Company Information</h6>
                            </div>
                            <dl class="row">
                                <dt class="col-sm-5">Name</dt>
                                <dd class="col-sm-7">@Model.CompanyDetails.Name</dd>
                                <dt class="col-sm-5">Market Cap</dt>
                                <dd class="col-sm-7">@(Model.CompanyDetails.MarketCap > 0 ? Model.CompanyDetails.MarketCap.ToString("C0", culture) : "N/A")</dd>
                                <dt class="col-sm-5">Employees</dt>
                                <dd class="col-sm-7">@(Model.CompanyDetails.Employees > 0 ? Model.CompanyDetails.Employees.ToString("N0", culture) : "N/A")</dd>
                                <dt class="col-sm-5">Website</dt>
                                <dd class="col-sm-7">
                                    @if (!string.IsNullOrEmpty(Model.CompanyDetails.Website))
                                    {
                                        <a href="@Model.CompanyDetails.Website" target="_blank">Visit Website</a>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex mb-3">
                                <h6 class="text-muted me-3">Investment Details</h6>
                            </div>
                            <dl class="row">
                                <dt class="col-sm-4">Purchase Date</dt>
                                <dd class="col-sm-8">@Model.Stock.DatePurchased.ToString("MMM dd, yyyy")</dd>
                                <dt class="col-sm-4">Purchase Price</dt>
                                <dd class="col-sm-8">@Model.Stock.PurchasePrice.ToString("C2", culture)</dd>
                                <dt class="col-sm-4">Shares Owned</dt>
                                <dd class="col-sm-8">@(Model.Stock.NumberOfSharesPurchased - (Model.Stock.NumberOfSharesSold ?? 0))</dd>
                                <dt class="col-sm-4">Total Investment</dt>
                                <dd class="col-sm-8">@((Model.Stock.PurchasePrice * Model.Stock.NumberOfSharesPurchased).ToString("C2", culture))</dd>
                            </dl>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.CompanyDetails.Description))
                    {
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6 class="text-muted">Company Description</h6>
                                <p class="text-justify">@Model.CompanyDetails.Description</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Performance Metrics Card -->
        <div class="col-md-4 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Performance Metrics</h5>
                </div>
                <div class="card-body p-3 d-flex flex-column justify-content-between" style="min-height: 270px">
                    <div class="metric-item mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="text-muted small">Current Price</div>
                                <div class="price-value">@Model.Stock.CurrentPrice.ToString("C2", culture)</div>
                            </div>
                            <span class="@(Model.Stock.ValueChange >= 0 ? "text-success" : "text-danger") price-change">
                                @(Model.Stock.ValueChange >= 0 ? "+" : "")@Model.Stock.ValueChange.ToString("C2", culture)
                            </span>
                        </div>
                    </div>

                    <div class="metric-item mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="text-muted small">Total Value</div>
                                <div class="price-value">@Model.Stock.TotalValue.ToString("C2", culture)</div>
                            </div>
                            <span class="@(Model.Stock.PerformancePercentage >= 0 ? "text-success" : "text-danger") price-change">
                                @(Model.Stock.PerformancePercentage >= 0 ? "+" : "")@Model.Stock.PerformancePercentage.ToString("N2")%
                            </span>
                        </div>
                    </div>

                    @if (Model.Stock.DateSold.HasValue)
                    {
                        <div class="metric-item">
                            <div class="text-muted small mb-2">Sale Information</div>
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="small fw-bold">Date Sold:</div>
                                    <div class="small fw-bold">Shares Sold:</div>
                                </div>
                                <div class="text-end">
                                    <div class="small">@Model.Stock.DateSold?.ToString("MMM dd, yyyy")</div>
                                    <div class="small">@Model.Stock.NumberOfSharesSold</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Price History Chart -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Price History</h5>
                </div>
                <div class="card-body" style="padding: 25px; overflow: hidden; max-width: 100%;">
                    <div class="btn-group period-selector mb-3" role="group" aria-label="Time period">
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="1m">1M</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="3m">3M</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="6m">6M</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="1y">1Y</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="ytd">YTD</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary active" data-period="5y">5Y</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" data-period="all">ALL</button>
                    </div>
                    <div id="priceHistoryChart" style="height: 400px; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between">
                <a asp-action="CreateOrEdit" asp-route-id="@Model.Stock.Id" class="btn btn-warning mb-2 mb-md-0">
                    <i class="fas fa-edit"></i> Edit
                </a>
                <div class="d-flex flex-column flex-md-row">
                    <a asp-action="Delete" asp-route-id="@Model.Stock.Id" class="btn btn-danger me-0 me-md-2 mb-2 mb-md-0">
                        <i class="fas fa-trash"></i> Delete
                    </a>
                    <a asp-action="Dashboard" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

</div>


@section Scripts {
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Debug and format historical data for Highcharts
        function formatCandlestickData() {
            let historicalData = @Json.Serialize(Model.HistoricalData);
            console.log("Raw historical data sample:", historicalData ? historicalData.slice(0, 2) : 'none');

            if (!historicalData || historicalData.length === 0) {
                console.error("No historical data available");
                return [];
            }

            const formattedData = historicalData.map(function(point) {
                // Skip invalid data points
                if (!point) {
                    console.warn("Skipping null point");
                    return null;
                }

                // The date can be in either Date property or date property (lowercase)
                let dateStr = null;
                if (typeof point.Date !== 'undefined') {
                    dateStr = point.Date;
                } else if (typeof point.date !== 'undefined') {
                    dateStr = point.date;
                }

                if (!dateStr) {
                    console.warn("Missing date in data point:", point);
                    return null;
                }

                // Get OHLC values, handling both uppercase and lowercase property names
                let open, high, low, close;

                if (typeof point.Open !== 'undefined') {
                    open = Number(point.Open);
                    high = Number(point.High);
                    low = Number(point.Low);
                    close = Number(point.Close);
                } else if (typeof point.open !== 'undefined') {
                    open = Number(point.open);
                    high = Number(point.high);
                    low = Number(point.low);
                    close = Number(point.close);
                } else {
                    console.warn("No OHLC data in point:", point);
                    return null;
                }

                // Parse the date - handling various formats
                let timestamp;
                try {
                    // Try to parse the date
                    const date = new Date(dateStr);
                    timestamp = date.getTime();

                    // If the timestamp is invalid (NaN), try alternative parsing
                    if (isNaN(timestamp)) {
                        console.warn("Invalid date format, trying alternative parsing:", dateStr);

                        // Try parsing assuming format like "/Date(1622764800000)/"
                        const matches = /\/Date\((\d+)\)\//.exec(dateStr);
                        if (matches && matches[1]) {
                            timestamp = parseInt(matches[1]);
                        } else {
                            // For other formats, try extracting just the date part
                            const parts = dateStr.split('T')[0].split('-');
                            if (parts.length === 3) {
                                const simpleDate = new Date(parts[0], parts[1] - 1, parts[2]);
                                timestamp = simpleDate.getTime();
                            }
                        }
                    }
                } catch (e) {
                    console.error("Error parsing date:", dateStr, e);
                    return null;
                }

                // Skip if any of the values are NaN or invalid
                if (isNaN(open) || isNaN(high) || isNaN(low) || isNaN(close) || isNaN(timestamp)) {
                    console.warn("Invalid numeric values in data point:", point);
                    return null;
                }

                return [
                    timestamp,  // x: time
                    open,       // open
                    high,       // high
                    low,        // low
                    close       // close
                ];
            })
            .filter(point => point !== null)  // Remove any invalid points
            .sort(function(a, b) { return a[0] - b[0]; }); // Sort by date

            console.log("Formatted data count:", formattedData.length);
            if (formattedData.length > 0) {
                console.log("First data point:", formattedData[0]);
                console.log("Last data point:", formattedData[formattedData.length - 1]);
            }
            return formattedData;
        }

        // Chart configuration
        const candleData = formatCandlestickData();
        let stockChart;

        // Initialize Highcharts candlestick chart
        document.addEventListener('DOMContentLoaded', function() {
            // Create the chart only if we have data
            if (!candleData || candleData.length === 0) {
                console.error("No data available for chart");
                document.getElementById('priceHistoryChart').innerHTML = '<div class="alert alert-warning">No historical price data available</div>';
                return;
            }

            console.log("Creating chart with data:", candleData.slice(0, 3), "...", candleData.slice(-3));

            stockChart = Highcharts.stockChart('priceHistoryChart', {
                chart: {
                    type: 'candlestick',
                    backgroundColor: '#333333'
                },
                rangeSelector: {
                    enabled: false
                },
                navigator: {
                    enabled: true
                },
                scrollbar: {
                    enabled: true
                },
                title: {
                    text: null
                },
                xAxis: {
                    type: 'datetime',
                    labels: {
                        format: '{value:%m/%d/%Y}'
                    }
                },
                yAxis: {
                    title: {
                        text: 'Price'
                    },
                    labels: {
                        formatter: function() {
                            return '$' + this.value.toFixed(2);
                        }
                    }
                },
                tooltip: {
                    formatter: function() {
                        return '<span style="color:' + this.series.color + '">\u25CF</span> <b>' + this.series.name + '</b><br/>' +
                        'Date: ' + Highcharts.dateFormat('%Y-%m-%d', this.x) + '<br/>' +
                        'Open: $' + Highcharts.numberFormat(this.point.open, 2) + '<br/>' +
                        'High: $' + Highcharts.numberFormat(this.point.high, 2) + '<br/>' +
                        'Low: $' + Highcharts.numberFormat(this.point.low, 2) + '<br/>' +
                        'Close: $' + Highcharts.numberFormat(this.point.close, 2);
                    }
                },
                plotOptions: {
                    candlestick: {
                        color: '#f44336', // Red candles (bearish)
                        upColor: '#4caf50', // Green candles (bullish)
                        lineColor: '#f44336', // Bearish line color
                        upLineColor: '#4caf50' // Bullish line color
                    }
                },
                series: [{
                    name: '@Model.Stock.StockSymbol',
                    data: candleData,
                    dataGrouping: {
                        enabled: false
                    }
                }]
            });

            // Check if we have data before setting the initial period
            if (candleData && candleData.length > 0) {
                // Set initial range to 5Y
                setChartPeriod('5y');
            } else {
                console.error("No valid data to display in chart");
            }
        });

        // Set time period for chart
        function setChartPeriod(period) {
            if (!stockChart || !candleData || candleData.length === 0) {
                console.warn("Cannot set period - chart or data not available");
                return;
            }

            const now = new Date();
            let startDate;

            // Get the actual data date range
            const firstDate = new Date(candleData[0][0]);
            const lastDate = new Date(candleData[candleData.length - 1][0]);

            console.log("Data range:", firstDate, "to", lastDate);

            switch (period) {
                case '1m':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                    break;
                case '3m':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
                    break;
                case '6m':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());
                    break;
                case '1y':
                    startDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
                    break;
                case 'ytd':
                    startDate = new Date(now.getFullYear(), 0, 1); // January 1st of current year
                    break;
                case '5y':
                    startDate = new Date(now.getFullYear() - 5, now.getMonth(), now.getDate());
                    break;
                case 'all':
                    startDate = firstDate;
                    break;
                default:
                    startDate = new Date(now.getFullYear() - 5, now.getMonth(), now.getDate());
            }

            // Ensure endDate is not beyond our actual data
            const endDate = now > lastDate ? lastDate : now;

            // Ensure startDate is not before our actual data
            if (startDate < firstDate) {
                startDate = firstDate;
            }

            console.log("Setting time range:", startDate, "to", endDate);

            try {
                stockChart.xAxis[0].setExtremes(
                    startDate.getTime(),
                    endDate.getTime()
                );
            } catch (error) {
                console.error("Error setting extremes:", error);
            }
        }

        // Period selector buttons
        document.querySelectorAll('.period-selector button').forEach(button => {
            button.addEventListener('click', function() {
                // Update active button
                document.querySelectorAll('.period-selector button').forEach(btn => {
                    btn.classList.remove('active');
                });
                this.classList.add('active');

                // Set chart period
                setChartPeriod(this.getAttribute('data-period'));
            });
        });
    </script>
}