@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using FundWatch.Models.QuantitativeModels
@{
    var hasFourierAnalysis = Model.FourierAnalysis != null;
    var fourier = Model.FourierAnalysis;
}

<!-- Fourier Analysis & Market Cycles Introduction -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-lg border-0 bg-gradient-analytics text-white">
            <div class="card-body py-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h4 class="mb-2">Fourier Analysis & Hidden Market Cycles</h4>
                        <p class="mb-0">
                            Uncover the hidden rhythms in your portfolio using Fourier transforms - the same mathematics 
                            that powers music recognition and signal processing. Discover weekly, monthly, and seasonal 
                            patterns that repeat in market data, plus advanced correlation analysis between your holdings.
                        </p>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="display-6">
                            <i class="fas fa-wave-square"></i> <i class="fas fa-sync mx-2"></i> <i class="fas fa-project-diagram"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (hasFourierAnalysis)
{
    <!-- Market Cycles Discovery -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow border-0">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-sync-alt me-2"></i>Discovered Market Cycles in Your Portfolio
                    </h5>
                </div>
                <div class="card-body">
                    <div class="cycles-grid">
                        @foreach (var cycle in fourier.MarketCycles.Take(4))
                        {
                            var phaseColor = cycle.PhaseDescription.Contains("Rising") ? "success" : "danger";
                            var iconClass = cycle.PhaseDescription.Contains("Rising") ? "fa-arrow-trend-up" : "fa-arrow-trend-down";
                            
                            <div class="cycle-card">
                                <div class="cycle-header">
                                    <h6 class="mb-0">@cycle.CycleName</h6>
                                    <span class="badge bg-@phaseColor">
                                        <i class="fas @iconClass me-1"></i>@cycle.PhaseDescription
                                    </span>
                                </div>
                                <div class="cycle-body">
                                    <div class="cycle-metric">
                                        <span class="label">Strength</span>
                                        <div class="progress progress-height-10">
                                            <div class="progress-bar bg-info" 
                                                 style="width: @((cycle.Strength * 20).ToString("F0"))%">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="cycle-dates">
                                        <div class="date-item">
                                            <i class="fas fa-mountain text-success"></i>
                                            <span>Next Peak: @cycle.NextPeak.ToString("MMM dd")</span>
                                        </div>
                                        <div class="date-item">
                                            <i class="fas fa-valley text-danger"></i>
                                            <span>Next Trough: @cycle.NextTrough.ToString("MMM dd")</span>
                                        </div>
                                    </div>
                                    <div class="phase-indicator">
                                        <canvas id="phase-@cycle.CycleName.Replace(" ", "")" width="100" height="100"></canvas>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Historical Pattern Validation -->
    @if (fourier.HistoricalValidation != null && fourier.HistoricalValidation.ValidatedCycles?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow border-0">
                    <div class="card-header bg-gradient-info text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-history me-2"></i>Historical Pattern Accuracy
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4 text-center">
                                <h6>Overall Pattern Accuracy</h6>
                                <div class="display-4 text-info">@((fourier.HistoricalValidation.PatternAccuracy * 100).ToString("F1"))%</div>
                                <small class="text-muted">Based on historical backtesting</small>
                            </div>
                            <div class="col-md-4 text-center">
                                <h6>Prediction Accuracy</h6>
                                <div class="display-4 text-success">@((fourier.HistoricalValidation.PredictionAccuracy * 100).ToString("F1"))%</div>
                                <small class="text-muted">Within confidence intervals</small>
                            </div>
                            <div class="col-md-4 text-center">
                                <h6>Validated Cycles</h6>
                                <div class="display-4 text-primary">@fourier.HistoricalValidation.ValidatedCycles.Count</div>
                                <small class="text-muted">Confirmed patterns</small>
                            </div>
                        </div>
                        
                        <h6 class="mt-4 mb-3">Cycle Performance History</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Cycle Name</th>
                                        <th class="text-center">Predicted Peaks</th>
                                        <th class="text-center">Actual Peaks</th>
                                        <th class="text-center">Accuracy</th>
                                        <th class="text-center">Reliability</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cycle in fourier.HistoricalValidation.ValidatedCycles.OrderByDescending(c => c.Accuracy))
                                    {
                                        var reliability = fourier.HistoricalValidation.CycleReliability?.GetValueOrDefault(cycle.CycleName, 0) ?? 0;
                                        var reliabilityClass = reliability > 0.8 ? "success" : reliability > 0.6 ? "warning" : "danger";
                                        
                                        <tr>
                                            <td>@cycle.CycleName</td>
                                            <td class="text-center">@cycle.PredictedPeaks</td>
                                            <td class="text-center">@cycle.ActualPeaks</td>
                                            <td class="text-center">
                                                <span class="badge bg-info">@((cycle.Accuracy * 100).ToString("F0"))%</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-@reliabilityClass">@((reliability * 100).ToString("F0"))%</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (fourier.HistoricalValidation.PastPredictions?.Any() == true)
                        {
                            <h6 class="mt-4 mb-3">Recent Prediction Performance</h6>
                            <div id="predictionAccuracyChart" class="chart-container-300"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Main Fourier Analysis Visualizations -->
    <div class="row mb-4">
        <!-- Frequency Spectrum & Power Analysis -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-signal me-2"></i>Frequency Power Spectrum
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted small mb-3">
                        Higher peaks indicate stronger cyclical patterns. The x-axis shows cycle frequency 
                        (how often patterns repeat), while height shows the pattern's strength in your portfolio.
                    </p>
                    <div id="powerSpectrumChart" class="chart-container-400"></div>
                </div>
            </div>
        </div>

        <!-- Price Decomposition -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-layer-group me-2"></i>Price Decomposition
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted small mb-3">
                        Your portfolio value separated into trend (long-term direction), seasonal patterns, 
                        cyclical movements, and random noise.
                    </p>
                    <div id="decompositionChart" class="chart-container-400"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Fourier Prediction & Wavelet Analysis -->
    <div class="row mb-4">
        <!-- 30-Day Fourier Prediction -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-info text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-crystal-ball me-2"></i>Cycle-Based Price Prediction
                        </h5>
                        <small>30-Day Forecast</small>
                    </div>
                </div>
                <div class="card-body">
                    <div class="alert alert-info mb-3">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>How it works:</strong> By combining all discovered cycles and projecting them forward, 
                        we can estimate future price movements. Confidence decreases over time as shown by the widening bands.
                    </div>
                    <div id="fourierPredictionChart" class="chart-container-350"></div>
                </div>
            </div>
        </div>

        <!-- Wavelet Turning Points -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>Detected Turning Points
                    </h5>
                </div>
                <div class="card-body">
                    <div class="turning-points-list">
                        @if (fourier.WaveletTransform?.DetectedTurningPoints?.Any() == true)
                        {
                            foreach (var point in fourier.WaveletTransform.DetectedTurningPoints.OrderByDescending(p => p.Date).Take(10))
                            {
                                var iconClass = point.Type == "Peak" ? "fa-mountain text-success" : "fa-valley text-danger";
                                var confidence = (point.Confidence * 100).ToString("F0");
                                
                                <div class="turning-point-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <i class="fas @iconClass me-2"></i>
                                            <strong>@point.Type</strong>
                                            <small class="text-muted ms-2">@point.TimeScale</small>
                                        </div>
                                        <div class="text-end">
                                            <small>@point.Date.ToString("MMM dd, yyyy")</small>
                                            <div class="confidence-badge">
                                                <span class="badge bg-secondary">@confidence% confidence</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No significant turning points detected in recent data.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Correlation Analysis -->
    @if (fourier.CrossCorrelations != null && fourier.CrossCorrelations.StrongCorrelations?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-network-wired me-2"></i>Portfolio Correlation Network
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <!-- Correlation Matrix Heatmap -->
                            <div class="col-lg-6">
                                <h6 class="mb-3">Correlation Heatmap</h6>
                                <div id="correlationHeatmap" class="chart-container-400"></div>
                            </div>
                            
                            <!-- Network Visualization & Insights -->
                            <div class="col-lg-6">
                                <h6 class="mb-3">Key Relationships</h6>
                                <div class="correlation-insights">
                                    @foreach (var corr in fourier.CrossCorrelations.StrongCorrelations.Take(5))
                                    {
                                        var strength = Math.Abs(corr.Correlation) > 0.8 ? "Very Strong" : "Strong";
                                        var color = corr.Correlation > 0 ? "success" : "danger";
                                        
                                        <div class="correlation-item mb-3 p-3 border-start border-4 border-@color">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@corr.Symbol1 ↔ @corr.Symbol2</strong>
                                                    <span class="badge bg-@color ms-2">@corr.Relationship</span>
                                                </div>
                                                <div class="text-end">
                                                    <h5 class="mb-0 text-@color">@((corr.Correlation * 100).ToString("F0"))%</h5>
                                                    <small class="text-muted">@strength</small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    
                                    @if (fourier.CrossCorrelations.LeadLagRelationships?.Any() == true)
                                    {
                                        <h6 class="mt-4 mb-3">Lead-Lag Relationships</h6>
                                        @foreach (var leadLag in fourier.CrossCorrelations.LeadLagRelationships.Take(3))
                                        {
                                            <div class="lead-lag-item mb-2 p-2 bg-light rounded">
                                                <i class="fas fa-clock text-info me-2"></i>
                                                <strong>@leadLag.Symbol1</strong> @leadLag.Relationship 
                                                <strong>@leadLag.Symbol2</strong> by 
                                                <span class="badge bg-info">@Math.Abs(leadLag.LagDays) days</span>
                                            </div>
                                        }
                                    }
                                </div>
                                
                                <div class="mt-4 p-3 bg-light rounded">
                                    <h6 class="mb-2">Portfolio Insight</h6>
                                    <p class="mb-0 small">
                                        @if (fourier.CrossCorrelations.StrongCorrelations.Count(c => c.Correlation > 0.7) > 2)
                                        {
                                            <i class="fas fa-exclamation-circle text-warning me-1"></i>
                                            <text>Your portfolio has high internal correlation. Consider diversifying into uncorrelated assets to reduce risk.</text>
                                        }
                                        else
                                        {
                                            <i class="fas fa-check-circle text-success me-1"></i>
                                            <text>Your portfolio shows good diversification with limited internal correlations.</text>
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Wavelet Energy Analysis -->
    @if (fourier.WaveletTransform?.Levels?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-bolt me-2"></i>Multi-Scale Energy Analysis
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">
                            Wavelet analysis reveals patterns at different time scales. Higher energy indicates 
                            stronger price movements at that time scale.
                        </p>
                        <div id="waveletEnergyChart" class="chart-container-300"></div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <!-- No Fourier Analysis Data -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body text-center py-5">
                    <i class="fas fa-wave-square fa-4x text-muted mb-3"></i>
                    <h4>Fourier Analysis Coming Soon</h4>
                    <p class="text-muted mb-3">
                        Advanced market cycle detection requires:
                    </p>
                    <ul class="list-unstyled text-muted">
                        <li><i class="fas fa-check-circle text-success me-2"></i>Multiple stocks in your portfolio</li>
                        <li><i class="fas fa-clock text-warning me-2"></i>2+ years of historical price data</li>
                        <li><i class="fas fa-sync text-info me-2"></i>Continuous price updates to detect patterns</li>
                    </ul>
                    <p class="text-muted mt-3">
                        Once sufficient data is collected, you'll see:
                    </p>
                    <ul class="list-unstyled text-muted small">
                        <li><i class="fas fa-chart-line me-2"></i>Hidden market cycles and patterns</li>
                        <li><i class="fas fa-network-wired me-2"></i>Correlation analysis between holdings</li>
                        <li><i class="fas fa-crystal-ball me-2"></i>Cycle-based price predictions</li>
                        <li><i class="fas fa-exclamation-triangle me-2"></i>Turning point detection</li>
                    </ul>
                    @if (Model.UserStocks?.Count < 2)
                    {
                        <a href="@Url.Action("CreateOrEdit", "AppUserStocks")" class="btn btn-primary mt-3">
                            <i class="fas fa-plus me-2"></i>Add More Stocks
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Analytics tab DOM loaded');
    console.log('Has Fourier analysis: @hasFourierAnalysis');
    console.log('Fourier analysis: @(Model.FourierAnalysis != null ? "Available" : "Not available")');
    @if (Model.FourierAnalysis != null)
    {
        <text>
        console.log('Market Cycles: @(fourier.MarketCycles?.Count ?? 0)');
        console.log('Dominant Frequencies: @(fourier.DominantFrequencies?.Count ?? 0)');
        console.log('Power Spectrum: @(fourier.PowerSpectrum != null ? "Available" : "Not available")');
        console.log('Decomposition: @(fourier.Decomposition != null ? "Available" : "Not available")');
        </text>
    }
    
    // Add tab visibility check and delay chart initialization
    function initializeAnalyticsCharts() {
        @if (hasFourierAnalysis)
        {
            <text>
            console.log('Initializing Analytics tab charts...');
            
            // Prepare Fourier analysis data
            var powerSpectrum = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.PowerSpectrum ?? new FourierAnalysisModel.SpectralAnalysis()));
            var decomposition = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.Decomposition ?? new FourierAnalysisModel.PriceDecomposition()));
            var predictions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.FourierPrediction ?? new List<FourierAnalysisModel.PredictionPoint>()));
            var marketCycles = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.MarketCycles ?? new List<FourierAnalysisModel.CycleAnalysis>()));
            
            console.log('Power Spectrum:', powerSpectrum);
            console.log('Decomposition:', decomposition);
            console.log('Predictions:', predictions);
            console.log('Market Cycles:', marketCycles);
            
            // Light theme configuration for charts
        var lightTheme = {
            chart: {
                backgroundColor: '#ffffff',
                borderRadius: 8,
                style: {
                    fontFamily: 'Roboto, sans-serif'
                }
            },
            title: {
                style: {
                    color: '#333333',
                    fontSize: '18px',
                    fontWeight: '600'
                }
            },
            subtitle: {
                style: {
                    color: '#666666'
                }
            },
            xAxis: {
                gridLineColor: '#e0e0e0',
                labels: {
                    style: {
                        color: '#333333'
                    }
                },
                title: {
                    style: {
                        color: '#333333',
                        fontSize: '14px'
                    }
                },
                lineColor: '#cccccc'
            },
            yAxis: {
                gridLineColor: '#e0e0e0',
                labels: {
                    style: {
                        color: '#333333'
                    }
                },
                title: {
                    style: {
                        color: '#333333',
                        fontSize: '14px'
                    }
                }
            },
            tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                borderColor: '#cccccc',
                style: {
                    color: '#333333'
                }
            },
            legend: {
                backgroundColor: '#ffffff',
                itemStyle: {
                    color: '#333333'
                },
                itemHoverStyle: {
                    color: '#000000'
                }
            }
        };
        
        // 1. Power Spectrum Chart
        if (document.getElementById('powerSpectrumChart') && powerSpectrum && powerSpectrum.PowerSpectralDensity && powerSpectrum.PowerSpectralDensity.length > 0) {
            var spectrumData = [];
            for (var i = 0; i &lt; powerSpectrum.PowerSpectralDensity.length; i++) {
                if (powerSpectrum.SignificantPeaks.includes(i)) {
                    spectrumData.push({
                        x: 1 / powerSpectrum.Frequencies[i], // Convert to period
                        y: powerSpectrum.PowerSpectralDensity[i],
                        marker: {
                            radius: 8,
                            fillColor: '#dc3545'
                        }
                    });
                } else {
                    spectrumData.push({
                        x: 1 / powerSpectrum.Frequencies[i],
                        y: powerSpectrum.PowerSpectralDensity[i]
                    });
                }
            }
            
            Highcharts.chart('powerSpectrumChart', {
                chart: {
                    type: 'area',
                    backgroundColor: '#ffffff'
                },
                title: {
                    text: 'Dominant Market Cycles'
                },
                xAxis: {
                    type: 'logarithmic',
                    title: { text: 'Period (Days)' },
                    min: 1,
                    max: 365
                },
                yAxis: {
                    title: { text: 'Power Spectral Density' }
                },
                tooltip: {
                    formatter: function() {
                        return '<b>Period:</b> ' + this.x.toFixed(1) + ' days<br>' +
                               '<b>Power:</b> ' + this.y.toFixed(4);
                    }
                },
                series: [{
                    name: 'Power Spectrum',
                    data: spectrumData,
                    color: '#007bff',
                    fillOpacity: 0.3
                }]
            });
        }
        
        // 2. Decomposition Chart
        if (document.getElementById('decompositionChart') && decomposition && decomposition.Dates && decomposition.Dates.length > 0) {
            var dates = decomposition.Dates.map(d => new Date(d).getTime());
            
            Highcharts.chart('decompositionChart', {
                chart: {
                    type: 'line',
                    backgroundColor: '#ffffff'
                },
                title: {
                    text: 'Time Series Components'
                },
                xAxis: {
                    type: 'datetime'
                },
                yAxis: {
                    title: { text: 'Value' }
                },
                tooltip: {
                    shared: true,
                    crosshairs: true
                },
                series: [{
                    name: 'Trend',
                    data: dates.map((d, i) => [d, decomposition.Trend[i]]),
                    color: '#28a745',
                    lineWidth: 3
                }, {
                    name: 'Seasonal',
                    data: dates.map((d, i) => [d, decomposition.Seasonal[i]]),
                    color: '#17a2b8',
                    lineWidth: 2
                }, {
                    name: 'Cyclical',
                    data: dates.map((d, i) => [d, decomposition.Cyclical[i]]),
                    color: '#ffc107',
                    lineWidth: 2
                }, {
                    name: 'Residual',
                    data: dates.map((d, i) => [d, decomposition.Residual[i]]),
                    color: '#6c757d',
                    lineWidth: 1,
                    opacity: 0.5
                }]
            });
        }
        
        // 3. Fourier Prediction Chart
        if (document.getElementById('fourierPredictionChart') && predictions && predictions.length > 0) {
            var predictionData = predictions.map(p => ({
                x: new Date(p.Date).getTime(),
                y: p.PredictedPrice,
                high: p.UpperBound,
                low: p.LowerBound,
                confidence: p.Confidence
            }));
            
            Highcharts.chart('fourierPredictionChart', {
                chart: {
                    type: 'arearange',
                    backgroundColor: '#ffffff'
                },
                title: {
                    text: 'Price Forecast Based on Cycles'
                },
                xAxis: {
                    type: 'datetime'
                },
                yAxis: {
                    title: { text: 'Predicted Price ($)' }
                },
                tooltip: {
                    crosshairs: true,
                    shared: true,
                    valuePrefix: '$'
                },
                series: [{
                    name: 'Confidence Range',
                    data: predictionData.map(p => [p.x, p.low, p.high]),
                    type: 'arearange',
                    lineWidth: 0,
                    color: '#17a2b8',
                    fillOpacity: 0.3
                }, {
                    name: 'Predicted Price',
                    data: predictionData.map(p => [p.x, p.y]),
                    color: '#212529',
                    lineWidth: 3,
                    marker: {
                        enabled: false
                    }
                }]
            });
        }
        
        // 4. Phase Indicators for Cycles
        marketCycles.forEach(function(cycle) {
            var canvasId = 'phase-' + cycle.CycleName.replace(/\s/g, '');
            var canvas = document.getElementById(canvasId);
            if (canvas) {
                var ctx = canvas.getContext('2d');
                var centerX = canvas.width / 2;
                var centerY = canvas.height / 2;
                var radius = 35;
                
                // Draw circle
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
                ctx.strokeStyle = '#dee2e6';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // Draw phase indicator
                var phaseRad = cycle.CurrentPhase * Math.PI / 180;
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(
                    centerX + radius * Math.cos(phaseRad - Math.PI / 2),
                    centerY + radius * Math.sin(phaseRad - Math.PI / 2)
                );
                ctx.strokeStyle = cycle.PhaseDescription.includes('Rising') ? '#28a745' : '#dc3545';
                ctx.lineWidth = 4;
                ctx.stroke();
                
                // Draw phase dot
                ctx.beginPath();
                ctx.arc(
                    centerX + radius * Math.cos(phaseRad - Math.PI / 2),
                    centerY + radius * Math.sin(phaseRad - Math.PI / 2),
                    5, 0, 2 * Math.PI
                );
                ctx.fillStyle = cycle.PhaseDescription.includes('Rising') ? '#28a745' : '#dc3545';
                ctx.fill();
            }
        });
        
        // 5. Correlation Heatmap
        @if (fourier.CrossCorrelations != null)
        {
            <text>
            if (document.getElementById('correlationHeatmap')) {
                var correlations = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.CrossCorrelations));
                var heatmapData = [];
                
                for (var i = 0; i &lt; correlations.Symbols.length; i++) {
                    for (var j = 0; j &lt; correlations.Symbols.length; j++) {
                        heatmapData.push([i, j, correlations.Matrix[i][j]]);
                    }
                }
                
                Highcharts.chart('correlationHeatmap', {
                    chart: {
                        type: 'heatmap',
                        backgroundColor: '#ffffff'
                    },
                    title: {
                        text: 'Stock Correlation Matrix'
                    },
                    xAxis: {
                        categories: correlations.Symbols,
                        opposite: true
                    },
                    yAxis: {
                        categories: correlations.Symbols,
                        reversed: true
                    },
                    colorAxis: {
                        min: -1,
                        max: 1,
                        stops: [
                            [0, '#dc3545'],
                            [0.5, '#ffffff'],
                            [1, '#28a745']
                        ]
                    },
                    legend: {
                        align: 'right',
                        layout: 'vertical',
                        margin: 0,
                        verticalAlign: 'top',
                        y: 25,
                        symbolHeight: 280
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + this.series.xAxis.categories[this.point.x] + '</b> - <b>' +
                                   this.series.yAxis.categories[this.point.y] + '</b><br>' +
                                   'Correlation: <b>' + (this.point.value * 100).toFixed(0) + '%</b>';
                        }
                    },
                    series: [{
                        name: 'Correlation',
                        data: heatmapData,
                        borderWidth: 1,
                        dataLabels: {
                            enabled: true,
                            color: '#000000',
                            formatter: function() {
                                return (this.point.value * 100).toFixed(0);
                            }
                        }
                    }]
                });
            }
            </text>
        }
        
        // 6. Wavelet Energy Chart
        @if (fourier.WaveletTransform?.Levels?.Any() == true)
        {
            <text>
            if (document.getElementById('waveletEnergyChart')) {
                var waveletLevels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.WaveletTransform.Levels));
                
                Highcharts.chart('waveletEnergyChart', {
                    chart: {
                        type: 'column',
                        backgroundColor: '#ffffff'
                    },
                    title: {
                        text: 'Energy Distribution Across Time Scales'
                    },
                    xAxis: {
                        categories: waveletLevels.map(l => l.TimeScale),
                        title: { text: 'Time Scale' }
                    },
                    yAxis: {
                        title: { text: 'Energy' }
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + this.x + '</b><br>' +
                                   'Energy: ' + this.y.toFixed(2) + '<br>' +
                                   'Level: ' + (this.point.index + 1);
                        }
                    },
                    series: [{
                        name: 'Wavelet Energy',
                        data: waveletLevels.map(l => l.Energy),
                        colorByPoint: true,
                        colors: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1']
                    }]
                });
            }
            </text>
        }
        
        // 7. Historical Prediction Accuracy Chart
        @if (fourier.HistoricalValidation?.PastPredictions?.Any() == true)
        {
            <text>
            if (document.getElementById('predictionAccuracyChart')) {
                var historicalValidation = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fourier.HistoricalValidation));
                var predictions = historicalValidation.PastPredictions;
                
                // Group predictions by date for visualization
                var accuracyData = predictions.map(p => ({
                    x: new Date(p.TargetDate).getTime(),
                    y: Math.abs(p.Error) * 100,
                    color: p.WithinConfidenceInterval ? '#28a745' : '#dc3545',
                    predicted: p.PredictedValue,
                    actual: p.ActualValue
                }));
                
                Highcharts.chart('predictionAccuracyChart', {
                    chart: {
                        type: 'scatter',
                        backgroundColor: '#ffffff',
                        zoomType: 'xy'
                    },
                    title: {
                        text: 'Prediction Error Over Time'
                    },
                    subtitle: {
                        text: 'Green: Within confidence interval, Red: Outside interval'
                    },
                    xAxis: {
                        type: 'datetime',
                        title: { text: 'Date' }
                    },
                    yAxis: {
                        title: { text: 'Prediction Error (%)' },
                        min: 0
                    },
                    tooltip: {
                        formatter: function() {
                            return '<b>' + new Date(this.x).toLocaleDateString() + '</b><br>' +
                                   'Error: ' + this.y.toFixed(2) + '%<br>' +
                                   'Predicted: $' + this.point.predicted.toFixed(2) + '<br>' +
                                   'Actual: $' + this.point.actual.toFixed(2);
                        }
                    },
                    plotOptions: {
                        scatter: {
                            marker: {
                                radius: 5,
                                states: {
                                    hover: {
                                        enabled: true,
                                        lineColor: 'rgb(100,100,100)'
                                    }
                                }
                            }
                        }
                    },
                    series: [{
                        name: 'Prediction Errors',
                        data: accuracyData,
                        colorByPoint: true
                    }]
                });
            }
            </text>
        }
        </text>
        }
        else
        {
            <text>
            console.log('Fourier analysis is not available - need more historical data');
            </text>
        }
    }
    
    // Initialize charts when tab becomes visible
    setTimeout(function() {
        initializeAnalyticsCharts();
    }, 100);
    
    // Also initialize when tab is shown
    var analyticsTab = document.querySelector('#analytics-tab');
    if (analyticsTab) {
        analyticsTab.addEventListener('shown.bs.tab', function() {
            setTimeout(initializeAnalyticsCharts, 100);
        });
    }
});
</script>