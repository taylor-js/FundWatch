@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel

<div class="row g-3 mb-4">
    <!-- Portfolio Risk Analysis -->
    <div class="col-md-6">
        <div class="card shadow h-100">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">Portfolio Risk Analysis</h5>
            </div>
            <div class="card-body">
                <div id="riskAnalysisChart" style="height: 450px;"></div>
            </div>
        </div>
    </div>

    <!-- Portfolio Diversification Analysis -->
    <div class="col-md-6">
        <div class="card shadow h-100">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Portfolio Diversification Analysis</h5>
            </div>
            <div class="card-body">
                <div id="diversificationChart" style="height: 450px;"></div>
            </div>
        </div>
    </div>
</div>

<div class="row g-3 mb-4">
    <!-- Portfolio Risk/Return Analysis (Drawdown) -->
    <div class="col-md-12">
        <div class="card shadow">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">Portfolio Risk/Return Analysis (Drawdown)</h5>
            </div>
            <div class="card-body">
                <div id="drawdownChart" style="width: 100%; height: 500px; max-height: 500px; overflow: hidden;"></div>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize Analytics Tab Charts
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Analytics tab script loaded');

        // Get real data from the model
        window.riskMetricsData = @Html.Raw(Json.Serialize(Model.RiskMetrics ?? new List<RiskAnalysisData>()));
        window.diversificationData = @Html.Raw(Json.Serialize(Model.DiversificationData ?? new List<DiversificationData>()));
        
        // Parse drawdown data from the model
        var rawDrawdownData = @Html.Raw(Json.Serialize(Model.DrawdownData ?? new List<DrawdownPoint>()));

        // Log data availability
        console.log("Risk metrics data points:", window.riskMetricsData.length);
        console.log("Diversification data points:", window.diversificationData.length);
        console.log("Raw drawdown data points:", rawDrawdownData.length);

        // Process drawdown data
        if (rawDrawdownData && rawDrawdownData.length > 0) {
            console.log("Processing drawdown data from the model");

            // Ensure the data is processed correctly
            window.drawdownData = rawDrawdownData.map(function(item) {
                // Convert date strings to Date objects if needed
                let date;
                if (typeof item.date === 'string') {
                    date = new Date(item.date);
                } else {
                    date = new Date(item.date);
                }

                return {
                    date: date,
                    portfolioDrawdown: item.portfolioDrawdown,
                    benchmarkDrawdown: item.benchmarkDrawdown
                };
            });

            if (window.drawdownData && window.drawdownData.length > 0) {
                console.log("Drawdown data processed:");
                console.log("- First date:", window.drawdownData[0].date.toISOString());
                console.log("- Last date:", window.drawdownData[window.drawdownData.length-1].date.toISOString());
                console.log("- Total data points:", window.drawdownData.length);

                // Calculate additional stats
                let minPortfolioDrawdown = Math.min(...window.drawdownData.map(d => d.portfolioDrawdown));
                let minBenchmarkDrawdown = Math.min(...window.drawdownData.map(d => d.benchmarkDrawdown));
                let peaksPortfolio = window.drawdownData.filter(d => d.portfolioDrawdown >= -0.1).length;
                let peaksBenchmark = window.drawdownData.filter(d => d.benchmarkDrawdown >= -0.1).length;

                console.log("Drawdown statistics:");
                console.log("- Max portfolio drawdown:", minPortfolioDrawdown.toFixed(2) + "%");
                console.log("- Max benchmark drawdown:", minBenchmarkDrawdown.toFixed(2) + "%");
                console.log("- Periods at peak (portfolio):", peaksPortfolio);
                console.log("- Periods at peak (benchmark):", peaksBenchmark);
            }
        } else {
            console.warn("No drawdown data available");
            window.drawdownData = [];
        }

        console.log("Analytics tab data loaded:");
        console.log("Risk metrics data points:", window.riskMetricsData.length);
        console.log("Diversification data points:", window.diversificationData.length);
        console.log("Drawdown data points:", window.drawdownData.length);

        // Initialize charts immediately
        renderAnalyticsCharts();

        // Also render when the tab is shown
        var analyticsTabLink = document.querySelector('a[data-bs-target="#analyticsTab"]');
        if (analyticsTabLink) {
            analyticsTabLink.addEventListener('shown.bs.tab', function() {
                console.log('Analytics tab shown - rendering charts');
                renderAnalyticsCharts();

                // Force a reflow of all charts after a slight delay
                setTimeout(function() {
                    reflowAnalyticsCharts();
                }, 300);
            });
        }
    });

    function reflowAnalyticsCharts() {
        if (typeof Highcharts !== 'undefined' && Highcharts.charts) {
            Highcharts.charts.forEach(function(chart) {
                if (chart && chart.renderTo) {
                    var chartId = chart.renderTo.id;
                    if (chartId === 'riskAnalysisChart' || chartId === 'diversificationChart' || chartId === 'drawdownChart') {
                        chart.reflow();
                        console.log('Reflowed chart:', chartId);
                    }
                }
            });
        }
    }

    function renderAnalyticsCharts() {
        try {
            console.log('Rendering Analytics Tab Charts');

            // Direct rendering for each chart
            renderRiskAnalysisChart();
            renderDiversificationChart();
            renderDrawdownChart();

            // Schedule a reflow after charts are rendered
            setTimeout(function() {
                reflowAnalyticsCharts();
            }, 200);

            console.log('All Analytics charts rendered');
        } catch (err) {
            console.error('Error rendering Analytics charts:', err);
        }
    }

    function renderRiskAnalysisChart() {
        try {
            console.log("Rendering Risk Analysis chart");
            
            if (!window.riskMetricsData || window.riskMetricsData.length === 0) {
                console.warn("No risk metrics data available");
                document.getElementById('riskAnalysisChart').innerHTML = '<div class="text-center text-muted p-5">No risk metrics data available</div>';
                return;
            }

            // Destroy existing chart if it exists
            const existingChart = Highcharts.charts.find(chart => chart && chart.renderTo && chart.renderTo.id === 'riskAnalysisChart');
            if (existingChart) {
                existingChart.destroy();
                console.log("Destroyed existing risk analysis chart");
            }

            // Create a scatter plot with volatility vs. sharpe ratio
            Highcharts.chart('riskAnalysisChart', {
                chart: {
                    type: 'scatter',
                    backgroundColor: '#212529'
                },
                title: {
                    text: null
                },
                xAxis: {
                    title: {
                        text: 'Volatility (%)',
                        style: {
                            color: '#FFFFFF'
                        }
                    },
                    labels: {
                        style: {
                            color: '#FFFFFF'
                        }
                    },
                    gridLineColor: 'rgba(255, 255, 255, 0.1)',
                    lineColor: '#FFFFFF',
                    tickColor: '#FFFFFF'
                },
                yAxis: {
                    title: {
                        text: 'Sharpe Ratio',
                        style: {
                            color: '#FFFFFF'
                        }
                    },
                    labels: {
                        style: {
                            color: '#FFFFFF'
                        }
                    },
                    gridLineColor: 'rgba(255, 255, 255, 0.1)',
                    lineColor: '#FFFFFF',
                    tickColor: '#FFFFFF'
                },
                tooltip: {
                    headerFormat: '<b>{point.key}</b><br>',
                    pointFormat: 'Volatility: {point.x:.2f}%<br>' +
                                'Sharpe Ratio: {point.y:.2f}<br>' +
                                'Beta: {point.beta:.2f}<br>' +
                                'Max Drawdown: {point.maxDrawdown:.2f}%'
                },
                plotOptions: {
                    scatter: {
                        marker: {
                            radius: 10,
                            symbol: 'circle'
                        }
                    }
                },
                series: [{
                    name: 'Portfolio Holdings',
                    data: window.riskMetricsData.map(function(item) {
                        return {
                            x: item.volatility,
                            y: item.sharpeRatio,
                            name: item.symbol,
                            key: item.symbol,
                            beta: item.beta,
                            maxDrawdown: item.maxDrawdown
                        };
                    }),
                    color: '#4361EE'
                }],
                legend: {
                    itemStyle: {
                        color: '#FFFFFF'
                    },
                    itemHoverStyle: {
                        color: '#CCCCCC'
                    }
                },
                credits: { enabled: false }
            });

            console.log("Risk Analysis chart rendered successfully");
        } catch (err) {
            console.error("Error rendering Risk Analysis chart:", err);
        }
    }

    function renderDiversificationChart() {
        try {
            console.log("Rendering Diversification chart");
            
            if (!window.diversificationData || window.diversificationData.length === 0) {
                console.warn("No diversification data available");
                document.getElementById('diversificationChart').innerHTML = '<div class="text-center text-muted p-5">No diversification data available</div>';
                return;
            }

            // Create a pie chart showing sector allocation
            Highcharts.chart('diversificationChart', {
                chart: {
                    type: 'pie',
                    backgroundColor: '#212529'
                },
                title: {
                    text: null
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b><br>Value: <b>${point.y:,.2f}</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f}%',
                            connectorColor: 'silver'
                        },
                        showInLegend: false
                    }
                },
                series: [{
                    name: 'Sector Allocation',
                    data: window.diversificationData,
                    colors: [
                        '#4361EE', '#3A0CA3', '#F72585', '#4CC9F0', '#7209B7',
                        '#F77F00', '#D62828', '#FCBF49', '#EAE2B7', '#003049'
                    ]
                }],
                credits: { enabled: false }
            });

            console.log("Diversification chart rendered successfully");
        } catch (err) {
            console.error("Error rendering Diversification chart:", err);
        }
    }

    function renderDrawdownChart() {
        try {
            console.log("Rendering Drawdown chart with stockChart");
            
            if (!window.drawdownData || window.drawdownData.length === 0) {
                console.warn("No drawdown data available");
                document.getElementById('drawdownChart').innerHTML = '<div class="text-center text-muted p-5">No drawdown data available</div>';
                return;
            }

            // Prepare series data
            var portfolioSeries = [];
            var benchmarkSeries = [];

            window.drawdownData.forEach(function(item) {
                var timestamp;
                if (item.date instanceof Date) {
                    timestamp = item.date.getTime();
                } else if (typeof item.date === 'string') {
                    timestamp = new Date(item.date).getTime();
                } else {
                    timestamp = new Date(item.date).getTime();
                }

                if (!isNaN(timestamp)) {
                    portfolioSeries.push([timestamp, item.portfolioDrawdown]);
                    benchmarkSeries.push([timestamp, item.benchmarkDrawdown]);
                }
            });

            // Sort by timestamp
            portfolioSeries.sort(function(a, b) { return a[0] - b[0]; });
            benchmarkSeries.sort(function(a, b) { return a[0] - b[0]; });

            // Calculate min/max dates for consistent display
            let minDate = new Date();
            minDate.setFullYear(minDate.getFullYear() - 5); // Go back 5 years
            let maxDate = new Date(); // Current date

            // Create a stockChart for drawdown analysis
            Highcharts.stockChart('drawdownChart', {
                chart: {
                    type: 'area',
                    zoomType: 'x',
                    backgroundColor: '#212529',
                    style: {
                        fontFamily: 'Inter, sans-serif'
                    },
                    height: 500 // Set explicit height to match Stock Performance chart
                },
                title: {
                    text: 'Portfolio Drawdown Analysis',
                    style: {
                        color: '#CCCCCC',
                        fontSize: '14px'
                    }
                },
                subtitle: {
                    text: 'Shows percentage decline from previous peak (0% = at peak, -20% = 20% below peak)',
                    style: {
                        color: '#AAAAAA',
                        fontSize: '12px'
                    }
                },
                // Add range selector buttons
                rangeSelector: {
                    selected: 5, // Default to 5Y view
                    buttons: [
                        { type: 'month', count: 1, text: '1M' },
                        { type: 'month', count: 3, text: '3M' },
                        { type: 'month', count: 6, text: '6M' },
                        { type: 'ytd', text: 'YTD' },
                        { type: 'year', count: 1, text: '1Y' },
                        { type: 'year', count: 5, text: '5Y' },
                        { type: 'all', text: 'ALL' }
                    ],
                    buttonTheme: {
                        fill: 'none',
                        stroke: 'none',
                        'stroke-width': 0,
                        r: 8,
                        style: {
                            color: '#CCCCCC',
                            fontWeight: 'normal'
                        },
                        states: {
                            hover: {
                                fill: '#4361EE',
                                style: { color: 'white' }
                            },
                            select: {
                                fill: '#4361EE',
                                style: { color: 'white' }
                            }
                        }
                    },
                    inputEnabled: false
                },
                navigator: {
                    enabled: true,
                    outlineColor: '#444',
                    outlineWidth: 1,
                    handles: {
                        backgroundColor: '#666',
                        borderColor: '#AAA'
                    },
                    series: {
                        color: '#F72585',
                        fillOpacity: 0.05
                    }
                },
                scrollbar: {
                    enabled: true,
                    barBackgroundColor: '#555',
                    barBorderColor: '#999',
                    barBorderWidth: 1,
                    buttonBackgroundColor: '#555',
                    buttonBorderColor: '#999',
                    buttonBorderWidth: 1,
                    trackBackgroundColor: '#212529',
                    trackBorderColor: '#444',
                    trackBorderWidth: 1
                },
                xAxis: {
                    type: 'datetime',
                    min: minDate.getTime(), // Ensure we show 5 years
                    max: maxDate.getTime(), // Up to today
                    dateTimeLabelFormats: {
                        millisecond: '%H:%M:%S.%L',
                        second: '%H:%M:%S',
                        minute: '%H:%M',
                        hour: '%H:%M',
                        day: '%e. %b',
                        week: '%e. %b',
                        month: '%b %Y',
                        year: '%Y'
                    },
                    labels: {
                        style: { color: '#CCCCCC' }
                    },
                    ordinal: false, // This ensures equal spacing between data points
                    tickInterval: 365 * 24 * 3600 * 1000 // One year intervals for cleaner display
                },
                yAxis: {
                    title: {
                        text: 'Drawdown (%)',
                        style: { color: '#CCCCCC' }
                    },
                    min: -40, // Allow for larger drawdowns
                    max: 5,   // A small buffer above 0% for better visualization
                    labels: {
                        format: '{value}%',
                        style: { color: '#CCCCCC' }
                    },
                    gridLineColor: 'rgba(255, 255, 255, 0.1)',
                    // Add a zero line for visual reference
                    plotLines: [{
                        value: 0,
                        color: '#AAAAAA',
                        dashStyle: 'shortdash',
                        width: 1,
                        label: {
                            text: 'Peak',
                            align: 'right',
                            style: { color: '#CCCCCC' }
                        }
                    }]
                },
                tooltip: {
                    pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y:.2f}%</b><br/>',
                    valueDecimals: 2,
                    shared: true,
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    style: { color: '#FFFFFF' }
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false,
                            states: {
                                hover: {
                                    enabled: true,
                                    radius: 3
                                }
                            }
                        }
                    },
                    area: {
                        fillOpacity: 0.3,
                        lineWidth: 2,
                        threshold: null
                    }
                },
                series: [{
                    name: 'Your Portfolio (Drawdown)',
                    data: portfolioSeries,
                    color: '#F72585',
                    fillColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                        stops: [
                            [0, 'rgba(247, 37, 133, 0.5)'],
                            [1, 'rgba(247, 37, 133, 0.05)']
                        ]
                    }
                }, {
                    name: 'S&P 500 (Drawdown)',
                    data: benchmarkSeries,
                    color: '#4CC9F0',
                    fillColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                        stops: [
                            [0, 'rgba(76, 201, 240, 0.5)'],
                            [1, 'rgba(76, 201, 240, 0.05)']
                        ]
                    }
                }],
                credits: { enabled: false }
            });

            console.log("Drawdown chart rendered successfully with stockChart");
        } catch (err) {
            console.error("Error rendering Drawdown chart:", err);
        }
    }
</script>