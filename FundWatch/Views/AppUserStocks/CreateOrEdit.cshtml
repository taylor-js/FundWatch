@model FundWatch.Models.AppUserStock
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Calendars
@using Syncfusion.EJ2.Inputs
@{
    ViewData["Title"] = Model.Id == 0 ? "Create" : "Edit";
    var stockSymbols = ViewBag.StockSymbols as List<StockSymbolData>;
    
    // Check if we have initial stock data from ViewBag
    var hasInitialStock = ViewBag.InitialStock != null;
    
    // Debug info for troubleshooting
    var debugInfo = $"Model.Id: {Model.Id}, Model.StockSymbol: {Model.StockSymbol}, HasInitialStock: {hasInitialStock}";
}

<div class="mt-4 mb-4 container">
    <div class="card shadow border">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@(Model.Id == 0 ? "Create" : "Edit") Stock Position</h3>
        </div>
        <div class="card-body p-4">
            <form asp-action="CreateOrEdit" method="post">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                @if (Model.Id != 0)
                {
                    <input type="hidden" asp-for="Id" />
                }
                <input type="hidden" asp-for="UserId" />

                <div class="row g-2">
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().DropDownList("StockSymbol")
                            .Placeholder("Stock Symbol or Company Name")
                            .FloatLabelType(FloatLabelType.Always)
                            .AllowFiltering(true)
                            .FilterBarPlaceholder("Search by symbol or company name...")
                            .FilterType(FilterType.Contains)
                            .PopupHeight("300px")
                            .Width("100%")
                            .CssClass("e-outline")
                            .Fields(new DropDownListFieldSettings
                            {
                                Text = "display",
                                Value = "symbol"
                            })
                            .DataSource(ViewBag.InitialStock ?? new List<object>())
                            .Value(Model.StockSymbol)
                            .ShowClearButton(false)
                            .Render())
                            
                        <!-- Hidden debug info (comment out in production) -->
                        <div class="d-none">@debugInfo</div>
                        <span asp-validation-for="StockSymbol" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().NumericTextBox("NumberOfSharesPurchased")
                            .Format("n0")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Number of Shares")
                            .Width("100%")
                            .Value(Model.NumberOfSharesPurchased)
                            .Render())
                        <span asp-validation-for="NumberOfSharesPurchased" class="text-danger"></span>
                    </div>
                </div>

                <div class="row g-2">
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().DatePicker("DatePurchased")
                            .Format("MM/dd/yyyy")
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Purchase Date")
                            .Width("100%")
                            .Value(Model.DatePurchased)
                            .Render())
                        <span asp-validation-for="DatePurchased" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().NumericTextBox("PurchasePrice")
                            .Format("c2")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Purchase Price")
                            .Width("100%")
                            .Value(Model.PurchasePrice)
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row g-2">
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().DatePicker("DateSold")
                            .Format("MM/dd/yyyy")
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Sale Date (Optional)")
                            .Width("100%")
                            .Value(Model.DateSold)
                            .Render())
                        <span asp-validation-for="DateSold" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-2">
                        @(Html.EJS().NumericTextBox("CurrentPrice")
                            .Format("c2")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Current Price")
                            .Width("100%")
                            .Value(Model.CurrentPrice)
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="CurrentPrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-2">
                    @(Html.EJS().NumericTextBox("NumberOfSharesSold")
                        .Format("n0")
                        .Min(0)
                        .FloatLabelType(FloatLabelType.Always)
                        .Placeholder("Number of Shares Sold (Optional)")
                        .Width("100%")
                        .Value(Model.NumberOfSharesSold)
                        .Render())
                    <span asp-validation-for="NumberOfSharesSold" class="text-danger"></span>
                </div>

                <div class="d-flex justify-content-between mt-3">
                    <a asp-action="Dashboard" class="btn btn-secondary">Back to Dashboard</a>
                    @(Html.EJS().Button("submitButton")
                        .Content(Model.Id == 0 ? "Create" : "Save")
                        .IsPrimary(true)
                        .CssClass("e-success")
                        .Render())
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script type="text/javascript">
        // Store server-side data in JavaScript variables
        var hasDuplicateStock = @(TempData["DuplicateStock"] != null && TempData["ExistingStockId"] != null ? "true" : "false");
        var hasEqualShares = @(TempData["EqualShares"] != null ? "true" : "false");
        var existingStockId = "@(TempData["ExistingStockId"]?.ToString() ?? "")";
        
        document.addEventListener("DOMContentLoaded", function() {
            // Get the dropdown instance
            var dropdownList = document.getElementById("StockSymbol").ej2_instances[0];
            var datePurchasedPicker = document.getElementById("DatePurchased").ej2_instances[0];
            var dateSoldPicker = document.getElementById("DateSold").ej2_instances[0];
            var purchasePriceInput = document.getElementById("PurchasePrice").ej2_instances[0];
            var currentPriceInput = document.getElementById("CurrentPrice").ej2_instances[0];
            var submitButton = document.getElementById("submitButton");
            
            // If we're in edit mode, ensure the stock symbol is displayed
            var modelId = @(Model.Id);
            var stockSymbol = "@(Model.StockSymbol)";
            
            console.log("Model.Id: " + modelId + ", StockSymbol: " + stockSymbol);
            
            // For edit mode, ensure the value is set
            if (modelId > 0 && stockSymbol !== "" && dropdownList) {
                // Make sure dropdown has the value set
                setTimeout(function() {
                    // If initialStock exists in ViewBag but dropdown isn't showing it
                    if (dropdownList.value === stockSymbol && (!dropdownList.text || dropdownList.text.trim() === "")) {
                        console.log("Forcing dropdown display for: " + stockSymbol);
                        // Check if we have dataSource with display text
                        var ds = dropdownList.dataSource;
                        if (ds && ds.length > 0 && ds[0].display) {
                            // Use display from dataSource
                            dropdownList.text = ds[0].display;
                        } else {
                            // Fallback to just the symbol
                            dropdownList.text = stockSymbol;
                        }
                        
                        // Force UI refresh
                        dropdownList.dataBind();
                        
                        // Update the input visually
                        var input = document.querySelector("#StockSymbol_hidden");
                        if (input) {
                            input.value = stockSymbol;
                        }
                    }
                }, 300);
            }
            
            // Track API requests in progress
            var pendingRequests = 0;
            var formSubmitted = false;
            
            // Handle server-side warnings with pure JavaScript
            if (hasDuplicateStock) {
                setTimeout(function() {
                    if (confirm("This stock already exists in your portfolio. Would you like to view and edit the existing record?")) {
                        window.location.href = "/AppUserStocks/Details/" + existingStockId;
                    }
                }, 100);
            }
            
            if (hasEqualShares) {
                setTimeout(function() {
                    alert("When shares purchased equals shares sold, no data will be plotted. Please adjust your values.");
                }, 100);
            }
            
            // Disable submit button initially
            submitButton.disabled = true;
            
            // Configure the filtering
            dropdownList.filtering = function (e) {
                e.preventDefaultAction = true;

                if (!e.text || e.text.length < 1) {
                    dropdownList.dataSource = [];
                    return;
                }
                
                incrementPendingRequests();
                fetch('/AppUserStocks/SearchStocks?term=' + encodeURIComponent(e.text))
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && Array.isArray(data.stocks)) {
                            const stocks = data.stocks.map(function(stock) {
                                // Highlight the matching text in both symbol and name
                                let displayText = stock.symbol;
                                if (stock.name) {
                                    displayText += " - " + stock.name;
                                }
                                return {
                                    symbol: stock.symbol,
                                    display: displayText,
                                    // Store full data for reference
                                    fullName: stock.name
                                };
                            });
                            dropdownList.dataSource = stocks;
                        } else {
                            dropdownList.dataSource = [];
                        }
                        decrementPendingRequests();
                    })
                    .catch(error => {
                        console.error('Error fetching stocks:', error);
                        dropdownList.dataSource = [];
                        decrementPendingRequests();
                    });
            };

            function updatePrices() {
                const symbol = dropdownList.value;
                if (!symbol) return;
                
                // Disable submit button while fetching data
                submitButton.disabled = true;

                // Track completion of both API requests
                let purchasePriceLoaded = false;
                let currentPriceLoaded = false;

                // Update purchase price
                if (datePurchasedPicker.value) {
                    const purchaseDate = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                    incrementPendingRequests();
                    fetch(`/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${purchaseDate}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                purchasePriceInput.value = data.price;
                            }
                            purchasePriceLoaded = true;
                            checkAllPricesLoaded();
                            decrementPendingRequests();
                        })
                        .catch(error => {
                            console.error('Error fetching purchase price:', error);
                            purchasePriceLoaded = true;
                            checkAllPricesLoaded();
                            decrementPendingRequests();
                        });
                } else {
                    purchasePriceLoaded = true;
                }

                // Update current/sale price based on sale date or current date
                const saleDate = dateSoldPicker.value ?
                    moment(dateSoldPicker.value).format('YYYY-MM-DD') :
                    moment().format('YYYY-MM-DD');

                incrementPendingRequests();
                fetch(`/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${saleDate}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            currentPriceInput.value = data.price;
                        }
                        currentPriceLoaded = true;
                        checkAllPricesLoaded();
                        decrementPendingRequests();
                    })
                    .catch(error => {
                        console.error('Error fetching current/sale price:', error);
                        currentPriceLoaded = true;
                        checkAllPricesLoaded();
                        decrementPendingRequests();
                    });
                
                function checkAllPricesLoaded() {
                    if (purchasePriceLoaded && currentPriceLoaded) {
                        // Re-enable submit button only when both prices are loaded
                        submitButton.disabled = false;
                    }
                }
            }

            // This will be replaced by the stock existence check

            // Date change handlers
            datePurchasedPicker.change = function () {
                validateDates();
                updatePrices();
            };

            dateSoldPicker.change = function () {
                validateDates();
                updatePrices();
                validateShares(); // Also validate shares when date sold changes
            };

            function validateDates() {
                if (datePurchasedPicker.value) {
                    dateSoldPicker.min = datePurchasedPicker.value;
                    if (dateSoldPicker.value && dateSoldPicker.value < datePurchasedPicker.value) {
                        dateSoldPicker.value = null;
                        currentPriceInput.value = 0;
                    }
                }

                const today = new Date();
                today.setHours(23, 59, 59, 999);
                datePurchasedPicker.max = today;
                dateSoldPicker.max = today;
            }
            
            // Track API requests to prevent premature form submission
            function incrementPendingRequests() {
                pendingRequests++;
                submitButton.disabled = true;
            }
            
            function decrementPendingRequests() {
                pendingRequests--;
                if (pendingRequests <= 0) {
                    pendingRequests = 0;
                    // Only enable if we have valid data
                    if (dropdownList.value && purchasePriceInput.value > 0) {
                        submitButton.disabled = false;
                    }
                    
                    // If form was submitted while requests were pending, submit now
                    if (formSubmitted) {
                        document.querySelector('form').submit();
                    }
                }
            }
            
            // Validate number of shares sold vs purchased
            var sharesPurchasedInput = document.getElementById('NumberOfSharesPurchased').ej2_instances[0];
            var sharesSoldInput = document.getElementById('NumberOfSharesSold').ej2_instances[0];
            
            sharesSoldInput.change = function() {
                validateShares();
            };
            
            sharesPurchasedInput.change = function() {
                validateShares();
            };
            
            function validateShares() {
                if (sharesSoldInput.value && sharesPurchasedInput.value && 
                    sharesSoldInput.value === sharesPurchasedInput.value) {
                    alert("Warning: When shares purchased equals shares sold, no data will be plotted on the charts. Please adjust your values if you want to see this position in your dashboard.");
                }
            }
            
            // Check if stock already exists for this user
            dropdownList.change = function (e) {
                if (e.value) {
                    // Check if stock exists
                    fetch(`/AppUserStocks/CheckStockExists?stockSymbol=${encodeURIComponent(e.value)}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.exists) {
                                if (confirm(`You already have a position for ${e.value}. Would you like to view and edit that position instead?`)) {
                                    window.location.href = `/AppUserStocks/Details/${data.stockId}`;
                                    return;
                                }
                            }
                            updatePrices();
                        })
                        .catch(error => {
                            console.error('Error checking stock existence:', error);
                            updatePrices();
                        });
                } else {
                    submitButton.disabled = true;
                }
            };
            
            // Prevent form submission while API requests are in progress
            document.querySelector('form').addEventListener('submit', function(e) {
                // First check if shares purchased equals shares sold
                if (sharesSoldInput.value && sharesPurchasedInput.value && 
                    sharesSoldInput.value === sharesPurchasedInput.value) {
                    e.preventDefault();
                    alert("When shares purchased equals shares sold, no data will be plotted. Please adjust your values.");
                    return false;
                }
                
                if (pendingRequests > 0) {
                    e.preventDefault();
                    formSubmitted = true;
                    return false;
                }
                return true;
            });

            // Initial validation and price update
            validateDates();
            
            // Add slight delay to ensure dropdown is fully initialized
            setTimeout(() => {
                if (dropdownList.value) {
                    updatePrices();
                } else {
                    submitButton.disabled = true;
                }
            }, 100);
        });
    </script>
}