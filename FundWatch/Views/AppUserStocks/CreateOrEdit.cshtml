@model FundWatch.Models.AppUserStock
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Calendars
@using Syncfusion.EJ2.Inputs
@{
    ViewData["Title"] = Model.Id == 0 ? "Create" : "Edit";
    var stockSymbols = ViewBag.StockSymbols as List<StockSymbolData>;

    // Check if we have initial stock data from ViewBag
    var hasInitialStock = ViewBag.InitialStock != null;

    // Always default purchase date to 5 years ago for new entries
    var fiveYearsAgo = DateTime.Today.AddYears(-5);
    if (Model.Id == 0 || Model.DatePurchased == default(DateTime))
    {
        Model.DatePurchased = fiveYearsAgo;
    }
}

<div class="mt-4 mb-4 container">
    <div class="card shadow border">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@(Model.Id == 0 ? "Create" : "Edit") Stock Position</h3>
        </div>
        <div class="card-body p-4">
            <form asp-controller="AppUserStocks" asp-action="CreateOrEdit" method="post" id="stockForm">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="All" class="text-danger"></div>

                <!-- Always include Id field with explicit name -->
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="UserId" />

                <!-- Include sector and industry fields that are required but not mapped to DB -->
                <input type="hidden" asp-for="Sector" value="@(string.IsNullOrEmpty(Model.Sector) ? "Other" : Model.Sector)" />
                <input type="hidden" asp-for="Industry" value="@(string.IsNullOrEmpty(Model.Industry) ? "Other" : Model.Industry)" />

                <!-- Stock Symbol with Select2 dropdown -->
                <div class="row mb-3">
                    <label for="StockSymbol" class="form-label">Stock Symbol</label>
                    <select id="StockSymbol" name="StockSymbol" class="form-control" asp-for="StockSymbol">
                        @if (!string.IsNullOrEmpty(Model.StockSymbol))
                        {
                            <option value="@Model.StockSymbol" selected>@Model.StockSymbol</option>
                        }
                    </select>
                    <span asp-validation-for="StockSymbol" class="text-danger"></span>
                    <input type="hidden" id="hiddenStockSymbol" name="hiddenStockSymbol" value="@Model.StockSymbol" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="DatePurchased" class="form-label">Purchase Date</label>
                        @(Html.EJS().DatePicker("DatePurchased")
                            .Value(Model.DatePurchased)
                            .Format("yyyy-MM-dd")
                            .Start(CalendarView.Month)
                            .Depth(CalendarView.Month)
                            .Placeholder("YYYY-MM-DD")
                            .StrictMode(true)
                            .AllowEdit(false)
                            .Max(DateTime.Today)
                            .Min(DateTime.Today.AddYears(-5))
                            .Render())
                        <span asp-validation-for="DatePurchased" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchasePrice" class="form-label">Purchase Price</label>
                        @(Html.EJS().NumericTextBox("PurchasePrice")
                            .Value(Model.PurchasePrice)
                            .Format("c2")
                            .Min(0.01)
                            .Step(0.01)
                            .Decimals(2)
                            .ValidateDecimalOnType(true)
                            .Placeholder("0.00")
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="DateSold" class="form-label">Sale Date (Optional)</label>
                        @(Html.EJS().DatePicker("DateSold")
                            .Value(Model.DateSold)
                            .Format("yyyy-MM-dd")
                            .Start(CalendarView.Month)
                            .Depth(CalendarView.Month)
                            .Placeholder("YYYY-MM-DD")
                            .StrictMode(true)
                            .AllowEdit(false)
                            .Max(DateTime.Today)
                            .Min(DateTime.Today.AddYears(-5))
                            .Render())
                        <span asp-validation-for="DateSold" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="CurrentPrice" class="form-label">Sale Price</label>
                        @(Html.EJS().NumericTextBox("CurrentPrice")
                            .Value(Model.CurrentPrice)
                            .Format("c2")
                            .Min(0.01)
                            .Step(0.01)
                            .Decimals(2)
                            .ValidateDecimalOnType(true)
                            .Placeholder("0.00")
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="CurrentPrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="NumberOfSharesPurchased" class="form-label">Number of Shares Purchased</label>
                        @(Html.EJS().NumericTextBox("NumberOfSharesPurchased")
                            .Value(Model.NumberOfSharesPurchased)
                            .Format("n0")
                            .Min(1)
                            .Step(1)
                            .ValidateDecimalOnType(true)
                            .Placeholder("Enter number of shares...")
                            .Render())
                        <span asp-validation-for="NumberOfSharesPurchased" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="NumberOfSharesSold" class="form-label">Number of Shares Sold (Optional)</label>
                        @(Html.EJS().NumericTextBox("NumberOfSharesSold")
                            .Value(Model.NumberOfSharesSold)
                            .Format("n0")
                            .Min(0)
                            .Step(1)
                            .ValidateDecimalOnType(true)
                            .Placeholder("Enter number of shares sold...")
                            .Render())
                        <span asp-validation-for="NumberOfSharesSold" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div class="d-flex justify-content-between mt-3">
                            <a asp-action="Dashboard" class="btn btn-secondary">Dashboard</a>
                            <button type="submit" id="submitButton" class="btn btn-success" data-loading-text="@(Model.Id == 0 ? "Creating..." : "Saving...")">
                                @(Model.Id == 0 ? "Create" : "Save")
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Contain form to prevent overflow */
        #stockForm {
            position: relative;
            overflow: visible;
        }
        
        /* Stock symbol container - full row width */
        #StockSymbol + .select2-container {
            width: 100% !important;
            max-width: 100% !important;
        }
        
        /* Make Select2 match Syncfusion textbox styling */
        .select2-container--bootstrap-5 .select2-selection--single {
            height: 36px !important;
            background-color: rgba(255, 255, 255, 0.05) !important;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            color: #ffffff !important;
            font-family: 'Roboto', 'Segoe UI', 'GeezaPro', 'DejaVu Serif', sans-serif !important;
            font-size: 14px !important;
            border-radius: 4px !important;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out !important;
        }
        
        .select2-container--bootstrap-5.select2-container--focus .select2-selection--single,
        .select2-container--bootstrap-5.select2-container--open .select2-selection--single {
            border-color: #0078d4 !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 120, 212, 0.25) !important;
        }
        
        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__placeholder {
            color: rgba(255, 255, 255, 0.5) !important;
        }
        
        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow {
            height: 34px !important;
            right: 10px !important;
        }
        
        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__arrow b {
            border-color: #858585 transparent transparent transparent !important;
        }
        
        /* Dropdown styling */
        .select2-container--bootstrap-5 .select2-dropdown {
            background-color: #2b2b2b !important;
            border: 1px solid #3f3f3f !important;
            border-radius: 4px !important;
        }
        
        .select2-container--bootstrap-5 .select2-results__option {
            color: #e3e3e3 !important;
            background-color: #2b2b2b !important;
            padding: 8px 12px !important;
            font-size: 14px !important;
        }
        
        .select2-container--bootstrap-5 .select2-results__option--highlighted[aria-selected] {
            background-color: #0078d4 !important;
            color: #ffffff !important;
        }
        
        .select2-container--bootstrap-5 .select2-results__option[aria-selected="true"] {
            background-color: #3a3a3a !important;
        }
        
        .select2-container--bootstrap-5 .select2-search--dropdown .select2-search__field {
            background-color: #1e1e1e !important;
            border: 1px solid #3f3f3f !important;
            color: #e3e3e3 !important;
            border-radius: 4px !important;
            padding: 6px 12px !important;
            font-size: 14px !important;
        }
        
        .select2-container--bootstrap-5 .select2-search--dropdown .select2-search__field:focus {
            border-color: #0078d4 !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 120, 212, 0.25) !important;
        }
        
        /* Loading state */
        .select2-container--bootstrap-5 .select2-results__option.loading-results {
            background-color: #2b2b2b !important;
            color: #858585 !important;
        }
        
        /* No results message */
        .select2-container--bootstrap-5 .select2-results__message {
            color: #858585 !important;
            padding: 12px !important;
        }
        
        /* Clear button (X) styling */
        .select2-container--bootstrap-5 .select2-selection__clear {
            color: #858585 !important;
            font-weight: normal !important;
            margin-right: 8px !important;
        }
        
        .select2-container--bootstrap-5 .select2-selection__clear:hover {
            color: #e3e3e3 !important;
        }
        
        /* Match disabled state styling */
        .select2-container--bootstrap-5.select2-container--disabled .select2-selection--single {
            background-color: #1e1e1e !important;
            cursor: not-allowed !important;
        }
        
        /* Ensure consistent width */
        .select2-container {
            width: 100% !important;
            max-width: 100% !important;
        }
        
        /* Constrain dropdown to parent width */
        .select2-container--bootstrap-5 .select2-dropdown {
            width: 100% !important;
        }
        
        /* Ensure dropdown menu matches the select field width */
        .select2-dropdown.select2-dropdown--below,
        .select2-dropdown.select2-dropdown--above {
            width: 100% !important;
            min-width: 100% !important;
        }
        
        /* Prevent long text from expanding dropdown */
        .select2-results__option {
            overflow: hidden !important;
            text-overflow: ellipsis !important;
        }
        
        /* Ensure search field doesn't overflow */
        .select2-search--dropdown {
            padding: 4px !important;
            width: 100% !important;
            box-sizing: border-box !important;
        }
        
        .select2-search.select2-search--dropdown {
            width: 100% !important;
            max-width: 100% !important;
            box-sizing: border-box !important;
        }
        
        .select2-search--dropdown .select2-search__field {
            width: 100% !important;
            max-width: 100% !important;
            box-sizing: border-box !important;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <!-- Select2 for better dropdown support -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script type="text/javascript">
        // This function runs when the DOM is fully loaded
        window.addEventListener("DOMContentLoaded", function() {
            var hiddenStockSymbol = document.getElementById("hiddenStockSymbol");
            var lastValidSymbol = hiddenStockSymbol ? hiddenStockSymbol.value : "";
            
            // Initialize Select2 on stock symbol dropdown
            $('#StockSymbol').select2({
                theme: 'bootstrap-5',
                placeholder: 'Stock Symbol or Company Name',
                allowClear: true,
                minimumInputLength: 1,
                ajax: {
                    url: '/AppUserStocks/SearchStocks',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            term: params.term
                        };
                    },
                    processResults: function (data) {
                        if (data.success && Array.isArray(data.stocks)) {
                            return {
                                results: data.stocks.map(function(stock) {
                                    return {
                                        id: stock.symbol,
                                        text: stock.symbol + (stock.name ? ' - ' + stock.name : '')
                                    };
                                })
                            };
                        }
                        return { results: [] };
                    },
                    cache: true
                },
                // Prevent dropdown from stretching page
                dropdownAutoWidth: false,
                width: '100%',
                closeOnSelect: true,
                dropdownParent: $('#stockForm')
            });
            
            // Handle stock selection change
            $('#StockSymbol').on('select2:select', function (e) {
                var value = e.params.data.id;
                lastValidSymbol = value;
                
                // Update hidden field
                if (hiddenStockSymbol) {
                    hiddenStockSymbol.value = value;
                }
                
                // Update loading state
                loadingState.symbolValid = value ? true : false;
                updateLoadingState('symbolValid', loadingState.symbolValid);
                
                if (value) {
                    // Check if stock exists
                    updateLoadingState('stockCheck', true);
                    
                    fetch('/AppUserStocks/CheckStockExists?stockSymbol=' + encodeURIComponent(value))
                        .then(function(response) {
                            return response.json();
                        })
                        .then(function(data) {
                            updateLoadingState('stockCheck', false);
                            
                            if (data.exists && @(Model.Id) == 0) {
                                if (confirm('You already have a position for ' + value + '. Would you like to view and edit that position instead?')) {
                                    window.location.href = '/AppUserStocks/Details/' + data.stockId;
                                    return;
                                }
                            }
                            
                            // Get earliest available date and price
                            getEarliestAvailableDate(value, function(date, price) {
                                if (date && price && datePurchasedPicker && purchasePriceNumeric) {
                                    datePurchasedPicker.value = new Date(date);
                                    purchasePriceNumeric.value = price;
                                    
                                    if (dateSoldPicker) {
                                        var minSaleDate = new Date(date);
                                        minSaleDate.setDate(minSaleDate.getDate() + 1);
                                        dateSoldPicker.min = minSaleDate;
                                    }
                                }
                                updatePrices();
                            });
                        })
                        .catch(function(error) {
                            console.error('Error checking stock:', error);
                            updateLoadingState('stockCheck', false);
                        });
                }
            });

            // AJAX loading state management
            var loadingState = {
                purchasePrice: false,
                currentPrice: false,
                earliestDate: false,
                stockCheck: false,
                symbolValid: lastValidSymbol ? true : false, // Track if symbol is valid
                currentSymbol: null // Track the current symbol being processed
            };

            function updateLoadingState(requestType, isLoading) {
                loadingState[requestType] = isLoading;
                
                // Check if any requests are still loading
                var anyLoading = Object.keys(loadingState).some(function(key) {
                    return key !== 'currentSymbol' && key !== 'symbolValid' && loadingState[key] === true;
                });
                
                // Disable submit button if loading or symbol isn't valid
                var isFormReady = !anyLoading && loadingState.symbolValid === true;
                
                // Disable submit button while loading
                if (submitButton) {
                    submitButton.disabled = !isFormReady;
                    
                    if (anyLoading || !loadingState.symbolValid) {
                        // Show spinner in button
                        var loadingText = submitButton.getAttribute('data-loading-text') || '@(Model.Id == 0 ? "Creating..." : "Saving...")';
                        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>' + loadingText;
                        submitButton.classList.add('disabled');
                    } else {
                        // Restore original button text
                        submitButton.innerHTML = '@(Model.Id == 0 ? "Create" : "Save")';
                        submitButton.classList.remove('disabled');
                    }
                }
                
                console.log("Loading state updated:", requestType, isLoading, "Any loading:", anyLoading, "Symbol valid:", loadingState.symbolValid, "Form ready:", isFormReady);
            }


            // Get reference to submit button
            var submitButton = document.getElementById("submitButton");

            // References to Syncfusion controls
            var datePurchasedPicker = null;
            var dateSoldPicker = null;
            var purchasePriceNumeric = null;
            var currentPriceNumeric = null;
            var sharesPurchasedNumeric = null;
            var sharesSoldNumeric = null;

            try {
                // Initialize Syncfusion date pickers
                var datePurchasedElement = document.getElementById("DatePurchased");
                if (datePurchasedElement && datePurchasedElement.ej2_instances) {
                    datePurchasedPicker = datePurchasedElement.ej2_instances[0];
                    console.log("Syncfusion DatePurchased picker initialized successfully");
                }

                var dateSoldElement = document.getElementById("DateSold");
                if (dateSoldElement && dateSoldElement.ej2_instances) {
                    dateSoldPicker = dateSoldElement.ej2_instances[0];
                    console.log("Syncfusion DateSold picker initialized successfully");
                }

                // Initialize Syncfusion numeric controls
                var purchasePriceElement = document.getElementById("PurchasePrice");
                if (purchasePriceElement && purchasePriceElement.ej2_instances) {
                    purchasePriceNumeric = purchasePriceElement.ej2_instances[0];
                    console.log("Syncfusion PurchasePrice numeric initialized successfully");
                }

                var currentPriceElement = document.getElementById("CurrentPrice");
                if (currentPriceElement && currentPriceElement.ej2_instances) {
                    currentPriceNumeric = currentPriceElement.ej2_instances[0];
                    console.log("Syncfusion CurrentPrice numeric initialized successfully");
                }

                var sharesPurchasedElement = document.getElementById("NumberOfSharesPurchased");
                if (sharesPurchasedElement && sharesPurchasedElement.ej2_instances) {
                    sharesPurchasedNumeric = sharesPurchasedElement.ej2_instances[0];
                    console.log("Syncfusion NumberOfSharesPurchased numeric initialized successfully");
                }

                var sharesSoldElement = document.getElementById("NumberOfSharesSold");
                if (sharesSoldElement && sharesSoldElement.ej2_instances) {
                    sharesSoldNumeric = sharesSoldElement.ej2_instances[0];
                    console.log("Syncfusion NumberOfSharesSold numeric initialized successfully");
                }
            } catch (e) {
                console.error("Error accessing Syncfusion controls:", e);
            }

            // Don't disable submit button initially
            if (submitButton) {
                submitButton.disabled = false;
            }

            // Function to get earliest available date for a stock
            function getEarliestAvailableDate(symbol, callback) {
                const url = `/AppUserStocks/GetEarliestAvailableDate?stockSymbol=${encodeURIComponent(symbol)}&_=${Date.now()}`;
                
                updateLoadingState('earliestDate', true);
                
                var request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.onreadystatechange = function() {
                    if (this.readyState === 4) {
                        updateLoadingState('earliestDate', false);
                        
                        if (this.status === 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                if (data.success) {
                                    callback(data.date, data.price);
                                } else {
                                    console.warn("Failed to get earliest date:", data.message);
                                    callback(null, null);
                                }
                            } catch (e) {
                                console.error("Error parsing earliest date response:", e);
                                callback(null, null);
                            }
                        } else {
                            console.error("Earliest date request failed with status:", this.status);
                            callback(null, null);
                        }
                    }
                };
                request.send();
            }

            // Function to update prices based on dates and symbol
            function updatePrices() {
                console.log("⚠️ updatePrices() called");
                
                // Show loading spinner immediately when price fetching starts
                updateLoadingState('purchasePrice', true);
                updateLoadingState('currentPrice', true);

                // Get symbol value from Select2 dropdown
                var symbolValue = $('#StockSymbol').val();
                if (!symbolValue && hiddenStockSymbol) {
                    symbolValue = hiddenStockSymbol.value;
                }

                if (!symbolValue) {
                    console.log("No stock symbol available, skipping price update");
                    return;
                }

                // Use the symbol value we found
                const symbol = symbolValue;
                console.log("⚠️ Updating prices for symbol:", symbol);

                // Check if symbol has changed - clear prices if it has
                if (loadingState.currentSymbol && loadingState.currentSymbol !== symbol) {
                    console.log("Symbol changed from", loadingState.currentSymbol, "to", symbol, "- clearing prices");
                    if (purchasePriceNumeric) {
                        purchasePriceNumeric.value = null;
                    }
                    if (currentPriceNumeric) {
                        currentPriceNumeric.value = null;
                    }
                }
                
                // Update current symbol
                loadingState.currentSymbol = symbol;

                // Get dates from Syncfusion datepickers
                var purchaseDate = "";
                var saleDate = moment().format('YYYY-MM-DD');

                if (datePurchasedPicker && datePurchasedPicker.value) {
                    purchaseDate = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                    console.log("Got purchase date from datepicker:", purchaseDate);
                }

                if (dateSoldPicker && dateSoldPicker.value) {
                    saleDate = moment(dateSoldPicker.value).format('YYYY-MM-DD');
                    console.log("Got sale date from datepicker:", saleDate);
                }

                console.log("Purchase date:", purchaseDate, "Sale date:", saleDate);

                // Don't proceed if we don't have purchase date or symbol
                if (!purchaseDate || !symbol) {
                    // Clear loading state since we're not making API calls
                    updateLoadingState('purchasePrice', false);
                    updateLoadingState('currentPrice', false);
                    
                    // Mark symbol as invalid if it's missing
                    if (!symbol) {
                        loadingState.symbolValid = false;
                        updateLoadingState('symbolValid', false);
                    }
                    console.warn("Missing required data (purchaseDate or symbol) for price fetch");
                    return;
                }

                // Fetch purchase price
                console.log(`⚠️ Fetching price for ${symbol} on ${purchaseDate}`);
                const purchaseUrl = `/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${purchaseDate}&_=${Date.now()}`;
                console.log("Purchase API URL:", purchaseUrl);

                updateLoadingState('purchasePrice', true);

                var purchasePriceRequest = new XMLHttpRequest();
                purchasePriceRequest.open('GET', purchaseUrl, true);
                purchasePriceRequest.onreadystatechange = function() {
                    if (this.readyState === 4) {
                        console.log("Purchase price API response status:", this.status);

                        // Only process if this is still the current symbol
                        if (loadingState.currentSymbol !== symbol) {
                            console.log("Symbol changed during request, ignoring response");
                            updateLoadingState('purchasePrice', false);
                            return;
                        }

                        if (this.status === 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                console.log("Purchase price API response data:", data);

                                if (data.success && purchasePriceNumeric) {
                                    if (data.price > 0) {
                                        purchasePriceNumeric.value = data.price;
                                        purchasePriceNumeric.readonly = true;
                                        console.log(`⚠️ Purchase price set to: ${data.price}`);
                                    } else {
                                        console.warn("API returned zero or negative price");
                                        handleNoDataForDate();
                                    }
                                } else {
                                    console.error("Failed to get purchase price:", data);
                                    handleNoDataForDate();
                                }
                                
                                function handleNoDataForDate() {
                                    // Market might be closed on this date, find the next available trading day
                                    console.log("No data available for selected date, finding next trading day...");
                                    
                                    // Try the next business day
                                    var attemptDate = new Date(purchaseDate);
                                    var maxAttempts = 7; // Check up to a week ahead
                                    var attempts = 0;
                                    
                                    function tryNextDate() {
                                        if (attempts >= maxAttempts) {
                                            // Fallback to getting earliest available date
                                            getEarliestAvailableDate(symbol, function(date, price) {
                                                if (date && price) {
                                                    datePurchasedPicker.value = new Date(date);
                                                    purchasePriceNumeric.value = price;
                                                    console.log(`Auto-adjusted to earliest available date: ${date} with price: ${price}`);
                                                }
                                            });
                                            return;
                                        }
                                        
                                        attemptDate.setDate(attemptDate.getDate() + 1);
                                        var nextDateStr = moment(attemptDate).format('YYYY-MM-DD');
                                        
                                        var nextDateRequest = new XMLHttpRequest();
                                        nextDateRequest.open('GET', `/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${nextDateStr}&_=${Date.now()}`, true);
                                        nextDateRequest.onreadystatechange = function() {
                                            if (this.readyState === 4 && this.status === 200) {
                                                try {
                                                    var nextData = JSON.parse(this.responseText);
                                                    if (nextData.success && nextData.price > 0) {
                                                        datePurchasedPicker.value = attemptDate;
                                                        purchasePriceNumeric.value = nextData.price;
                                                        console.log(`Found next trading day: ${nextDateStr} with price: ${nextData.price}`);
                                                    } else {
                                                        attempts++;
                                                        tryNextDate();
                                                    }
                                                } catch (e) {
                                                    attempts++;
                                                    tryNextDate();
                                                }
                                            }
                                        };
                                        nextDateRequest.send();
                                    }
                                    
                                    tryNextDate();
                                }
                            } catch (e) {
                                console.error("Error parsing purchase price response:", e);
                            }
                            updateLoadingState('purchasePrice', false);
                        } else {
                            console.error("Purchase price request failed with status:", this.status);
                            updateLoadingState('purchasePrice', false);
                        }
                    }
                };
                purchasePriceRequest.send();

                // Similarly for current/sale price
                console.log(`⚠️ Fetching current price for ${symbol} on ${saleDate}`);
                const currentUrl = `/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${saleDate}&_=${Date.now()}`;
                console.log("Current API URL:", currentUrl);

                updateLoadingState('currentPrice', true);

                var currentPriceRequest = new XMLHttpRequest();
                currentPriceRequest.open('GET', currentUrl, true);
                currentPriceRequest.onreadystatechange = function() {
                    if (this.readyState === 4) {
                        console.log("Current price API response status:", this.status);

                        // Only process if this is still the current symbol
                        if (loadingState.currentSymbol !== symbol) {
                            console.log("Symbol changed during current price request, ignoring response");
                            updateLoadingState('currentPrice', false);
                            return;
                        }

                        if (this.status === 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                console.log("Current price API response data:", data);

                                if (data.success && currentPriceNumeric) {
                                    if (data.price > 0) {
                                        currentPriceNumeric.value = data.price;
                                        currentPriceNumeric.readonly = true;
                                        console.log(`⚠️ Current price set to: ${data.price}`);
                                    } else {
                                        console.warn("API returned zero or negative current price");
                                        // Default to today's price
                                        currentPriceNumeric.value = 1.00;
                                    }
                                } else {
                                    console.error("Failed to get current price:", data);
                                    currentPriceNumeric.value = 1.00;
                                }
                            } catch (e) {
                                console.error("Error parsing current price response:", e);
                                currentPriceNumeric.value = 1.00;
                            }
                            updateLoadingState('currentPrice', false);
                        } else {
                            console.error("Current price request failed with status:", this.status);
                            currentPriceNumeric.value = 1.00;
                            updateLoadingState('currentPrice', false);
                        }
                    }
                };
                currentPriceRequest.send();
            }
            

            
            // Add event listeners for date picker controls
            if (datePurchasedPicker) {
                console.log("Setting up purchase date change handler for Syncfusion control");
                
                // Set strict format for the date picker
                datePurchasedPicker.format = "yyyy-MM-dd";
                datePurchasedPicker.strictMode = true;
                
                // Set date limits (5 years back from today)
                var today = new Date();
                var fiveYearsAgo = new Date(today.getFullYear() - 5, today.getMonth(), today.getDate());
                datePurchasedPicker.max = today;
                datePurchasedPicker.min = fiveYearsAgo;
                
                datePurchasedPicker.change = function(args) {
                    console.log("Purchase date changed to:", args.value);
                    
                    // Preserve the stock symbol value in hidden field
                    if (hiddenStockSymbol && lastValidSymbol) {
                        hiddenStockSymbol.value = lastValidSymbol;
                    }
                    
                    // Ensure date is in correct format
                    if (args.value) {
                        var formattedDate = moment(args.value).format('YYYY-MM-DD');
                        console.log("Formatted purchase date:", formattedDate);
                        
                        // Update the minimum date for sale date picker (must be at least 1 day after purchase)
                        if (dateSoldPicker) {
                            var minSaleDate = new Date(args.value);
                            minSaleDate.setDate(minSaleDate.getDate() + 1);
                            dateSoldPicker.min = minSaleDate;
                            
                            // If current sale date is less than or equal to purchase date, clear it
                            if (dateSoldPicker.value && dateSoldPicker.value <= args.value) {
                                dateSoldPicker.value = null;
                                console.log("Cleared sale date as it was less than or equal to purchase date");
                            }
                        }
                    }
                    
                    updatePrices();
                };
                
                // Add blur event to preserve symbol value
                datePurchasedPicker.blur = function(args) {
                    if (hiddenStockSymbol && lastValidSymbol) {
                        hiddenStockSymbol.value = lastValidSymbol;
                    }
                };
                
                // Add focus event to ensure proper format
                datePurchasedPicker.focus = function(args) {
                    this.format = "yyyy-MM-dd";
                };
            }

            if (dateSoldPicker) {
                console.log("Setting up sale date change handler for Syncfusion control");
                
                // Set strict format for the date picker
                dateSoldPicker.format = "yyyy-MM-dd";
                dateSoldPicker.strictMode = true;
                
                // Set date limits (5 years back from today)
                var today = new Date();
                var fiveYearsAgo = new Date(today.getFullYear() - 5, today.getMonth(), today.getDate());
                dateSoldPicker.max = today;
                dateSoldPicker.min = fiveYearsAgo;
                
                // If purchase date is already set, update minimum sale date
                if (datePurchasedPicker && datePurchasedPicker.value) {
                    var minSaleDate = new Date(datePurchasedPicker.value);
                    minSaleDate.setDate(minSaleDate.getDate() + 1);
                    dateSoldPicker.min = minSaleDate;
                    console.log("Set initial minimum sale date to:", minSaleDate);
                }
                
                dateSoldPicker.change = function(args) {
                    console.log("Sale date changed to:", args.value);
                    
                    // Preserve the stock symbol value in hidden field
                    if (hiddenStockSymbol && lastValidSymbol) {
                        hiddenStockSymbol.value = lastValidSymbol;
                    }
                    
                    // Ensure date is in correct format
                    if (args.value) {
                        var formattedDate = moment(args.value).format('YYYY-MM-DD');
                        console.log("Formatted sale date:", formattedDate);
                    }
                    
                    updatePrices();
                };
                
                // Add blur event to preserve symbol value
                dateSoldPicker.blur = function(args) {
                    if (lastValidSymbol) {
                        $('#StockSymbol').val(lastValidSymbol).trigger('change');
                        if (hiddenStockSymbol) {
                            hiddenStockSymbol.value = lastValidSymbol;
                        }
                    }
                };
                
                // Add focus event to ensure proper format
                dateSoldPicker.focus = function(args) {
                    this.format = "yyyy-MM-dd";
                };
            }

            // Set initial submit button state based on symbol validity
            var submitButton = document.getElementById('submitButton');
            var submitButtonText = document.getElementById('submitButtonText');
            var submitButtonLoader = document.getElementById('submitButtonLoader');
            
            if (submitButton && submitButtonText && submitButtonLoader) {
                var currentSymbol = $('#StockSymbol').val();
                if (!currentSymbol) {
                    // No valid symbol yet, show spinner
                    submitButtonText.classList.add('opacity-0');
                    submitButtonLoader.classList.remove('d-none');
                    submitButton.disabled = true;
                }
            }
            
            // Force an initial prices fetch if we have initial data
            var initialSymbol = $('#StockSymbol').val();
            if (initialSymbol && datePurchasedPicker) {
                console.log("Initial data detected, triggering price fetch");
                
                // For new entries, get the earliest available date
                if (@(Model.Id) == 0) {
                    getEarliestAvailableDate(initialSymbol, function(date, price) {
                        if (date && price && datePurchasedPicker && purchasePriceNumeric) {
                            console.log("Setting initial earliest available date:", date, "with price:", price);
                            datePurchasedPicker.value = new Date(date);
                            purchasePriceNumeric.value = price;
                            setTimeout(updatePrices, 100);
                        } else {
                            setTimeout(updatePrices, 100);
                        }
                    });
                } else {
                    setTimeout(updatePrices, 100); // For existing entries, just update prices
                }
            }
            
            // Form validation
            var formElement = document.getElementById("stockForm");
            if (formElement) {
                console.log("Form element found");
                formElement.addEventListener("submit", function(e) {
                    console.log("Form submit event triggered");

                    // Add debugging to track form submission
                    console.log("⚠️ FORM SUBMISSION STARTED");
                    
                    // Show the spinner during form submission
                    if (submitButton) {
                        var loadingText = submitButton.getAttribute('data-loading-text') || '@(Model.Id == 0 ? "Creating..." : "Saving...")';
                        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>' + loadingText;
                        submitButton.disabled = true;
                    }

                    // Check if any requests are still loading but don't block submission
                    var anyLoading = Object.keys(loadingState).some(function(key) {
                        return key !== 'currentSymbol' && loadingState[key] === true;
                    });
                    
                    if (anyLoading) {
                        console.warn("Form submitted while prices still loading - proceeding anyway");
                        // Continue with submission anyway
                    }

                    // Get the direct stock symbol value
                    var symbolValue = $('#StockSymbol').val();
                    if (!symbolValue && hiddenStockSymbol && hiddenStockSymbol.value) {
                        symbolValue = hiddenStockSymbol.value;
                    }

                    // Log form field values
                    console.log("Form field values at submission:");
                    console.log("- stockSymbol (direct):", symbolValue);
                    console.log("- datePurchasedPicker:", datePurchasedPicker ? datePurchasedPicker.value : "null");
                    console.log("- purchasePriceNumeric:", purchasePriceNumeric ? purchasePriceNumeric.value : "null");
                    console.log("- currentPriceNumeric:", currentPriceNumeric ? currentPriceNumeric.value : "null");
                    console.log("- sharesPurchasedNumeric:", sharesPurchasedNumeric ? sharesPurchasedNumeric.value : "null");
                    console.log("- sharesSoldNumeric:", sharesSoldNumeric ? sharesSoldNumeric.value : "null");

                    // Basic validation against the direct values we have
                    if (!symbolValue) {
                        e.preventDefault();
                        console.error("Stock symbol validation failed");
                        alert("Please enter a stock symbol");
                        return false;
                    }

                    if (datePurchasedPicker && !datePurchasedPicker.value) {
                        e.preventDefault();
                        console.error("Purchase date validation failed");
                        alert("Please select a purchase date");
                        return false;
                    }
                    
                    // Validate sale date is after purchase date
                    if (dateSoldPicker && dateSoldPicker.value && datePurchasedPicker && datePurchasedPicker.value) {
                        var purchaseDate = new Date(datePurchasedPicker.value);
                        var saleDate = new Date(dateSoldPicker.value);
                        
                        if (saleDate <= purchaseDate) {
                            e.preventDefault();
                            console.error("Sale date validation failed - must be after purchase date");
                            alert("Sale date must be at least one day after the purchase date");
                            return false;
                        }
                    }

                    // Add hidden fields for dates if using Syncfusion datepickers
                    if (datePurchasedPicker && datePurchasedPicker.value) {
                        var existingPurchaseDate = document.querySelector('input[name="DatePurchased"][type="hidden"]');
                        if (!existingPurchaseDate) {
                            var hiddenPurchaseDate = document.createElement('input');
                            hiddenPurchaseDate.type = 'hidden';
                            hiddenPurchaseDate.name = 'DatePurchased';
                            hiddenPurchaseDate.value = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                            this.appendChild(hiddenPurchaseDate);
                        } else {
                            existingPurchaseDate.value = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                        }
                    }

                    if (dateSoldPicker && dateSoldPicker.value) {
                        var existingSaleDate = document.querySelector('input[name="DateSold"][type="hidden"]');
                        if (!existingSaleDate) {
                            var hiddenSaleDate = document.createElement('input');
                            hiddenSaleDate.type = 'hidden';
                            hiddenSaleDate.name = 'DateSold';
                            hiddenSaleDate.value = moment(dateSoldPicker.value).format('YYYY-MM-DD');
                            this.appendChild(hiddenSaleDate);
                        } else {
                            existingSaleDate.value = moment(dateSoldPicker.value).format('YYYY-MM-DD');
                        }
                    }

                    // Create a hidden input for the stock symbol to ensure it's submitted if it doesn't exist
                    // Note: formElement is already defined in the outer scope
                    var existingSymbolInput = document.querySelector('input[name="StockSymbol"][type="hidden"]');
                    if (!existingSymbolInput) {
                        var hiddenSymbolInput = document.createElement('input');
                        hiddenSymbolInput.type = 'hidden';
                        hiddenSymbolInput.name = 'StockSymbol';
                        hiddenSymbolInput.value = symbolValue;
                    } else {
                        existingSymbolInput.value = symbolValue;
                    }
                    this.appendChild(hiddenSymbolInput); // Using this instead of formElement
                    console.log("Added hidden stock symbol field:", hiddenSymbolInput.value);

                    // Validate that prices are properly loaded
                    if (purchasePriceNumeric && (!purchasePriceNumeric.value || parseFloat(purchasePriceNumeric.value) <= 0)) {
                        e.preventDefault();
                        console.error("Purchase price validation failed - no valid price");
                        alert("Please wait for purchase price to load or enter a valid price");
                        return false;
                    }

                    if (currentPriceNumeric && (!currentPriceNumeric.value || parseFloat(currentPriceNumeric.value) <= 0)) {
                        e.preventDefault();
                        console.error("Current/sale price validation failed - no valid price");
                        alert("Please wait for sale price to load or enter a valid price");
                        return false;
                    }

                    // Check shares purchased
                    if (sharesPurchasedNumeric && (!sharesPurchasedNumeric.value || parseFloat(sharesPurchasedNumeric.value) <= 0)) {
                        console.warn("Setting fallback shares purchased before submission");
                        sharesPurchasedNumeric.value = 1;
                    }

                    // Log form values right before submission
                    console.log("Final form values before submission:", {
                        id: idField ? idField.value : "missing",
                        stockSymbol: $('#StockSymbol').val() || "missing",
                        purchasePrice: purchasePriceNumeric ? purchasePriceNumeric.value : "missing",
                        currentPrice: currentPriceNumeric ? currentPriceNumeric.value : "missing",
                        datePurchased: datePurchasedPicker ? datePurchasedPicker.value : "missing"
                    });

                    // Ensure the ID field exists
                    var existingIdField = document.getElementById("Id");
                    if (!existingIdField) {
                        console.warn("ID field missing, creating it");
                        existingIdField = document.createElement('input');
                        existingIdField.type = 'hidden';
                        existingIdField.id = 'Id';
                        existingIdField.name = 'Id';
                        existingIdField.value = '0'; // For new records
                        this.appendChild(existingIdField);
                    }

                    console.log("Form action: " + this.action);
                    console.log("Form method: " + this.method);

                    // Log the Model.Id from Razor
                    console.log("Model ID from server: @(Model.Id)");

                    // We already added the StockSymbol hidden field above

                    // Add hidden fields for numeric values to ensure they're submitted
                    if (purchasePriceNumeric) {
                        var existingPurchasePrice = document.querySelector('input[name="PurchasePrice"][type="hidden"]');
                        if (!existingPurchasePrice) {
                            var hiddenPurchasePrice = document.createElement('input');
                            hiddenPurchasePrice.type = 'hidden';
                            hiddenPurchasePrice.name = 'PurchasePrice';
                            hiddenPurchasePrice.value = purchasePriceNumeric.value || '1.00';
                            this.appendChild(hiddenPurchasePrice);
                        } else {
                            existingPurchasePrice.value = purchasePriceNumeric.value || '1.00';
                        }
                    }

                    if (currentPriceNumeric) {
                        var existingCurrentPrice = document.querySelector('input[name="CurrentPrice"][type="hidden"]');
                        if (!existingCurrentPrice) {
                            var hiddenCurrentPrice = document.createElement('input');
                            hiddenCurrentPrice.type = 'hidden';
                            hiddenCurrentPrice.name = 'CurrentPrice';
                            hiddenCurrentPrice.value = currentPriceNumeric.value || '1.00';
                            this.appendChild(hiddenCurrentPrice);
                        } else {
                            existingCurrentPrice.value = currentPriceNumeric.value || '1.00';
                        }
                    }

                    if (sharesPurchasedNumeric) {
                        var existingSharesPurchased = document.querySelector('input[name="NumberOfSharesPurchased"][type="hidden"]');
                        if (!existingSharesPurchased) {
                            var hiddenSharesPurchased = document.createElement('input');
                            hiddenSharesPurchased.type = 'hidden';
                            hiddenSharesPurchased.name = 'NumberOfSharesPurchased';
                            hiddenSharesPurchased.value = sharesPurchasedNumeric.value || '1';
                            this.appendChild(hiddenSharesPurchased);
                        } else {
                            existingSharesPurchased.value = sharesPurchasedNumeric.value || '1';
                        }
                    }

                    if (sharesSoldNumeric) {
                        var existingSharesSold = document.querySelector('input[name="NumberOfSharesSold"][type="hidden"]');
                        if (!existingSharesSold) {
                            var hiddenSharesSold = document.createElement('input');
                            hiddenSharesSold.type = 'hidden';
                            hiddenSharesSold.name = 'NumberOfSharesSold';
                            hiddenSharesSold.value = sharesSoldNumeric.value || '0';
                            this.appendChild(hiddenSharesSold);
                        } else {
                            existingSharesSold.value = sharesSoldNumeric.value || '0';
                        }
                    }

                    console.log("Form submitting with values:", {
                        id: existingIdField ? existingIdField.value : "missing",
                        stockSymbol: symbolValue,
                        purchaseDate: datePurchasedPicker ? moment(datePurchasedPicker.value).format('YYYY-MM-DD') : "missing",
                        saleDate: dateSoldPicker ? moment(dateSoldPicker.value).format('YYYY-MM-DD') : "",
                        purchasePrice: purchasePriceNumeric ? purchasePriceNumeric.value : "missing",
                        currentPrice: currentPriceNumeric ? currentPriceNumeric.value : "missing",
                        sharesPurchased: sharesPurchasedNumeric ? sharesPurchasedNumeric.value : "missing",
                        sharesSold: sharesSoldNumeric ? sharesSoldNumeric.value : "missing"
                    });

                // Force submission using standard form submit to avoid any issues
                console.log("⚠️ FORM SUBMISSION COMPLETING - ABOUT TO SUBMIT");

                // Return true to allow standard form submission
                return true;
            });
            
            // Initialize price updates if stock is already selected
            if ($('#StockSymbol').val()) {
                updatePrices();
            }
        }
        });
    </script>
}