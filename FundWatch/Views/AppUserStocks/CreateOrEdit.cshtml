@model FundWatch.Models.AppUserStock
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Calendars
@using Syncfusion.EJ2.Inputs
@{
    ViewData["Title"] = Model.Id == 0 ? "Create" : "Edit";
    var stockSymbols = ViewBag.StockSymbols as List<StockSymbolData>;

    // Check if we have initial stock data from ViewBag
    var hasInitialStock = ViewBag.InitialStock != null;

    // Always default purchase date to 5 years ago for new entries
    var fiveYearsAgo = DateTime.Today.AddYears(-5);
    if (Model.Id == 0 || Model.DatePurchased == default(DateTime))
    {
        Model.DatePurchased = fiveYearsAgo;
    }
}

<div class="mt-4 mb-4 container">
    <div class="card shadow border">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@(Model.Id == 0 ? "Create" : "Edit") Stock Position</h3>
        </div>
        <div class="card-body p-4">
            <form asp-controller="AppUserStocks" asp-action="CreateOrEdit" method="post" id="stockForm">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="All" class="text-danger"></div>

                <!-- Always include Id field with explicit name -->
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="UserId" />

                <!-- Include sector and industry fields that are required but not mapped to DB -->
                <input type="hidden" asp-for="Sector" value="@(string.IsNullOrEmpty(Model.Sector) ? "Other" : Model.Sector)" />
                <input type="hidden" asp-for="Industry" value="@(string.IsNullOrEmpty(Model.Industry) ? "Other" : Model.Industry)" />

                <!-- Stock Symbol with Syncfusion dropdown -->
                <div class="mb-3">
                    <label for="StockSymbol" class="form-label">Stock Symbol</label>
                    @(Html.EJS().DropDownList("StockSymbol")
                        .Placeholder("Stock Symbol or Company Name")
                        .AllowFiltering(true)
                        .FilterBarPlaceholder("Search by symbol or company name...")
                        .FilterType(FilterType.Contains)
                        .PopupHeight("300px")
                        .Width("100%")
                        .Fields(new DropDownListFieldSettings
                        {
                            Text = "display",
                            Value = "symbol"
                        })
                        .DataSource(ViewBag.InitialStock ?? new List<object>())
                        .Value(Model.StockSymbol)
                        .Render())
                    <span asp-validation-for="StockSymbol" class="text-danger"></span>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="DatePurchased" class="form-label">Purchase Date</label>
                        @(Html.EJS().DatePicker("DatePurchased")
                            .Value(Model.DatePurchased)
                            .Format("yyyy-MM-dd")
                            .Start(CalendarView.Month)
                            .Depth(CalendarView.Month)
                            .CssClass("form-control")
                            .Placeholder("Select purchase date...")
                            .Render())
                        <span asp-validation-for="DatePurchased" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchasePrice" class="form-label">Purchase Price</label>
                        @(Html.EJS().NumericTextBox("PurchasePrice")
                            .Value(Model.PurchasePrice)
                            .Format("c2")
                            .Min(0.01)
                            .Step(0.01)
                            .Decimals(2)
                            .ValidateDecimalOnType(true)
                            .CssClass("form-control")
                            .Placeholder("0.00")
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="DateSold" class="form-label">Sale Date (Optional)</label>
                        @(Html.EJS().DatePicker("DateSold")
                            .Value(Model.DateSold)
                            .Format("yyyy-MM-dd")
                            .Start(CalendarView.Month)
                            .Depth(CalendarView.Month)
                            .CssClass("form-control")
                            .Placeholder("Select sale date...")
                            .Render())
                        <span asp-validation-for="DateSold" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="CurrentPrice" class="form-label">Sale Price</label>
                        @(Html.EJS().NumericTextBox("CurrentPrice")
                            .Value(Model.CurrentPrice)
                            .Format("c2")
                            .Min(0.01)
                            .Step(0.01)
                            .Decimals(2)
                            .ValidateDecimalOnType(true)
                            .CssClass("form-control")
                            .Placeholder("0.00")
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="CurrentPrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="NumberOfSharesPurchased" class="form-label">Number of Shares Purchased</label>
                        @(Html.EJS().NumericTextBox("NumberOfSharesPurchased")
                            .Value(Model.NumberOfSharesPurchased)
                            .Format("n0")
                            .Min(1)
                            .Step(1)
                            .ValidateDecimalOnType(true)
                            .CssClass("form-control")
                            .Placeholder("Enter number of shares...")
                            .Render())
                        <span asp-validation-for="NumberOfSharesPurchased" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="NumberOfSharesSold" class="form-label">Number of Shares Sold (Optional)</label>
                        @(Html.EJS().NumericTextBox("NumberOfSharesSold")
                            .Value(Model.NumberOfSharesSold)
                            .Format("n0")
                            .Min(0)
                            .Step(1)
                            .ValidateDecimalOnType(true)
                            .CssClass("form-control")
                            .Placeholder("Enter number of shares sold...")
                            .Render())
                        <span asp-validation-for="NumberOfSharesSold" class="text-danger"></span>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-3">
                    <a asp-action="Dashboard" class="btn btn-secondary">Back to Dashboard</a>
                    <button type="submit" id="submitButton" class="btn btn-success">@(Model.Id == 0 ? "Create" : "Save")</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script type="text/javascript">
        // This function runs when the DOM is fully loaded
        window.addEventListener("DOMContentLoaded", function() {
            console.log("Form initialized with Model.Id:", @(Model.Id));
            var idField = document.getElementById("Id");
            if (idField) {
                console.log("Hidden ID field value:", idField.value);
            }
            
            // Get form elements with error handling
            var stockSymbolElement = document.getElementById("StockSymbol");
            var stockSymbolDropdown = null;

            // Debug output for Syncfusion initialization
            console.log("StockSymbol element:", stockSymbolElement);

            try {
                // Attempt to access Syncfusion dropdown instance
                if (stockSymbolElement && stockSymbolElement.ej2_instances) {
                    stockSymbolDropdown = stockSymbolElement.ej2_instances[0];
                    console.log("Syncfusion dropdown initialized successfully");

                    // Testing if we can access dropdown properties safely
                    if (stockSymbolDropdown) {
                        console.log("Dropdown type:", typeof stockSymbolDropdown);
                        console.log("Dropdown initial value:", stockSymbolDropdown.value);
                    }
                } else {
                    console.error("Syncfusion dropdown failed to initialize - ej2_instances not found");
                    console.log("Element details:", stockSymbolElement);
                }
            } catch (e) {
                console.error("Error accessing Syncfusion dropdown:", e);
                console.log("Element exists:", !!stockSymbolElement);
            }

            // Get reference to submit button
            var submitButton = document.getElementById("submitButton");

            // References to Syncfusion controls
            var datePurchasedPicker = null;
            var dateSoldPicker = null;
            var purchasePriceNumeric = null;
            var currentPriceNumeric = null;
            var sharesPurchasedNumeric = null;
            var sharesSoldNumeric = null;

            try {
                // Initialize Syncfusion date pickers
                var datePurchasedElement = document.getElementById("DatePurchased");
                if (datePurchasedElement && datePurchasedElement.ej2_instances) {
                    datePurchasedPicker = datePurchasedElement.ej2_instances[0];
                    console.log("Syncfusion DatePurchased picker initialized successfully");
                }

                var dateSoldElement = document.getElementById("DateSold");
                if (dateSoldElement && dateSoldElement.ej2_instances) {
                    dateSoldPicker = dateSoldElement.ej2_instances[0];
                    console.log("Syncfusion DateSold picker initialized successfully");
                }

                // Initialize Syncfusion numeric controls
                var purchasePriceElement = document.getElementById("PurchasePrice");
                if (purchasePriceElement && purchasePriceElement.ej2_instances) {
                    purchasePriceNumeric = purchasePriceElement.ej2_instances[0];
                    console.log("Syncfusion PurchasePrice numeric initialized successfully");
                }

                var currentPriceElement = document.getElementById("CurrentPrice");
                if (currentPriceElement && currentPriceElement.ej2_instances) {
                    currentPriceNumeric = currentPriceElement.ej2_instances[0];
                    console.log("Syncfusion CurrentPrice numeric initialized successfully");
                }

                var sharesPurchasedElement = document.getElementById("NumberOfSharesPurchased");
                if (sharesPurchasedElement && sharesPurchasedElement.ej2_instances) {
                    sharesPurchasedNumeric = sharesPurchasedElement.ej2_instances[0];
                    console.log("Syncfusion NumberOfSharesPurchased numeric initialized successfully");
                }

                var sharesSoldElement = document.getElementById("NumberOfSharesSold");
                if (sharesSoldElement && sharesSoldElement.ej2_instances) {
                    sharesSoldNumeric = sharesSoldElement.ej2_instances[0];
                    console.log("Syncfusion NumberOfSharesSold numeric initialized successfully");
                }
            } catch (e) {
                console.error("Error accessing Syncfusion controls:", e);
            }

            // Don't disable submit button initially
            if (submitButton) {
                submitButton.disabled = false;
            }

            // Function to update prices based on dates and symbol
            function updatePrices() {
                console.log("⚠️ updatePrices() called");

                // Get symbol value from dropdown
                var symbolValue;
                if (stockSymbolDropdown && stockSymbolDropdown.value) {
                    symbolValue = stockSymbolDropdown.value;
                    console.log("Got symbol from dropdown:", symbolValue);
                } else {
                    // Try to get value directly from the input field
                    var inputField = document.getElementById("StockSymbol");
                    if (inputField) {
                        symbolValue = inputField.value;
                        console.log("Got symbol from input field:", symbolValue);
                    }
                }

                if (!symbolValue) {
                    console.log("No stock symbol available, skipping price update");
                    return;
                }

                // Use the symbol value we found
                const symbol = symbolValue;
                console.log("⚠️ Updating prices for symbol:", symbol);

                // Get dates from Syncfusion datepickers
                var purchaseDate = "";
                var saleDate = moment().format('YYYY-MM-DD');

                if (datePurchasedPicker && datePurchasedPicker.value) {
                    purchaseDate = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                    console.log("Got purchase date from datepicker:", purchaseDate);
                }

                if (dateSoldPicker && dateSoldPicker.value) {
                    saleDate = moment(dateSoldPicker.value).format('YYYY-MM-DD');
                    console.log("Got sale date from datepicker:", saleDate);
                }

                console.log("Purchase date:", purchaseDate, "Sale date:", saleDate);

                // Set fallback prices if needed for Syncfusion controls
                if (purchasePriceNumeric && (!purchasePriceNumeric.value || parseFloat(purchasePriceNumeric.value) <= 0)) {
                    purchasePriceNumeric.value = 1.00;
                    console.log("Setting fallback purchase price to 1.00");
                }

                if (currentPriceNumeric && (!currentPriceNumeric.value || parseFloat(currentPriceNumeric.value) <= 0)) {
                    currentPriceNumeric.value = 1.00;
                    console.log("Setting fallback current price to 1.00");
                }

                // Don't proceed if we don't have purchase date or symbol
                if (!purchaseDate || !symbol) {
                    console.warn("Missing required data (purchaseDate or symbol) for price fetch");
                    return;
                }

                // Fetch purchase price (with cache busting query param)
                console.log(`⚠️ Fetching price for ${symbol} on ${purchaseDate}`);
                const purchaseUrl = `/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${purchaseDate}&_=${Date.now()}`;
                console.log("Purchase API URL:", purchaseUrl);

                // Use plain XMLHttpRequest to avoid any fetch() compatibility issues
                var purchasePriceRequest = new XMLHttpRequest();
                purchasePriceRequest.open('GET', purchaseUrl, true);
                purchasePriceRequest.onreadystatechange = function() {
                    if (this.readyState === 4) {
                        console.log("Purchase price API response status:", this.status);

                        if (this.status === 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                console.log("Purchase price API response data:", data);

                                if (data.success && purchasePriceNumeric) {
                                    if (data.price > 0) {
                                        purchasePriceNumeric.value = data.price;
                                        console.log(`⚠️ Purchase price set to: ${data.price}`);
                                    } else {
                                        console.warn("API returned zero or negative price, using fallback");
                                        purchasePriceNumeric.value = 1.00;
                                    }
                                } else {
                                    console.error("Failed to get purchase price:", data);
                                    purchasePriceNumeric.value = 1.00;
                                }
                            } catch (e) {
                                console.error("Error parsing purchase price response:", e);
                                purchasePriceNumeric.value = 1.00;
                            }
                        } else {
                            console.error("Purchase price request failed with status:", this.status);
                            purchasePriceNumeric.value = 1.00;
                        }
                    }
                };
                purchasePriceRequest.send();

                // Similarly for current price
                console.log(`⚠️ Fetching current price for ${symbol} on ${saleDate}`);
                const currentUrl = `/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${saleDate}&_=${Date.now()}`;
                console.log("Current API URL:", currentUrl);

                var currentPriceRequest = new XMLHttpRequest();
                currentPriceRequest.open('GET', currentUrl, true);
                currentPriceRequest.onreadystatechange = function() {
                    if (this.readyState === 4) {
                        console.log("Current price API response status:", this.status);

                        if (this.status === 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                console.log("Current price API response data:", data);

                                if (data.success && currentPriceNumeric) {
                                    if (data.price > 0) {
                                        currentPriceNumeric.value = data.price;
                                        console.log(`⚠️ Current price set to: ${data.price}`);
                                    } else {
                                        console.warn("API returned zero or negative current price, using fallback");
                                        currentPriceNumeric.value = 1.00;
                                    }
                                } else {
                                    console.error("Failed to get current price:", data);
                                    currentPriceNumeric.value = 1.00;
                                }
                            } catch (e) {
                                console.error("Error parsing current price response:", e);
                                currentPriceNumeric.value = 1.00;
                            }
                        } else {
                            console.error("Current price request failed with status:", this.status);
                            currentPriceNumeric.value = 1.00;
                        }
                    }
                };
                currentPriceRequest.send();
            }
            
            // Configure manual event handlers for stock symbol field
            var stockSymbolField = document.getElementById("StockSymbol");
            if (stockSymbolField) {
                console.log("Setting up manual handlers for stock symbol field");
                stockSymbolField.addEventListener('change', function() {
                    console.log("Stock symbol field changed to:", this.value);
                    setTimeout(updatePrices, 100); // Delay slightly to ensure value is set
                });
                stockSymbolField.addEventListener('blur', function() {
                    console.log("Stock symbol field blur event with value:", this.value);
                    setTimeout(updatePrices, 100);
                });
            }

            // Configure event handlers for Syncfusion dropdown if available
            if (stockSymbolDropdown) {
                console.log("Setting up handlers for Syncfusion dropdown");
                // Configure filtering behavior
                stockSymbolDropdown.filtering = function(e) {
                    e.preventDefaultAction = true;
                    
                    if (!e.text || e.text.length < 1) {
                        stockSymbolDropdown.dataSource = [];
                        return;
                    }
                    
                    fetch('/AppUserStocks/SearchStocks?term=' + encodeURIComponent(e.text))
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && Array.isArray(data.stocks)) {
                                const stocks = data.stocks.map(function(stock) {
                                    let displayText = stock.symbol;
                                    if (stock.name) {
                                        displayText += " - " + stock.name;
                                    }
                                    return {
                                        symbol: stock.symbol,
                                        display: displayText,
                                        fullName: stock.name
                                    };
                                });
                                stockSymbolDropdown.dataSource = stocks;
                            } else {
                                stockSymbolDropdown.dataSource = [];
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching stocks:', error);
                            stockSymbolDropdown.dataSource = [];
                        });
                };
                
                // Handle stock selection change
                stockSymbolDropdown.change = function() {
                    var value = this.value;
                    if (value) {
                        // Check if stock exists
                        fetch('/AppUserStocks/CheckStockExists?stockSymbol=' + encodeURIComponent(value))
                            .then(function(response) {
                                return response.json();
                            })
                            .then(function(data) {
                                if (data.exists && @(Model.Id) == 0) {
                                    if (confirm('You already have a position for ' + value + '. Would you like to view and edit that position instead?')) {
                                        window.location.href = '/AppUserStocks/Details/' + data.stockId;
                                        return;
                                    }
                                }

                                // Update prices
                                updatePrices();
                            })
                            .catch(function(error) {
                                console.error('Error checking stock existence:', error);
                                updatePrices();
                            });
                    }
                };
            }
            
            // Add event listeners for date picker controls
            if (datePurchasedPicker) {
                console.log("Setting up purchase date change handler for Syncfusion control");
                datePurchasedPicker.change = function(args) {
                    console.log("Purchase date changed to:", args.value);
                    updatePrices();
                };
            }

            if (dateSoldPicker) {
                console.log("Setting up sale date change handler for Syncfusion control");
                dateSoldPicker.change = function(args) {
                    console.log("Sale date changed to:", args.value);
                    updatePrices();
                };
            }

            // Force an initial prices fetch if we have initial data
            if (stockSymbolField && stockSymbolField.value && datePurchasedPicker) {
                console.log("Initial data detected, triggering price fetch");
                setTimeout(updatePrices, 500); // Delay to ensure everything is initialized
            }
            
            // Form validation
            var formElement = document.getElementById("stockForm");
            if (formElement) {
                console.log("Form element found");
                formElement.addEventListener("submit", function(e) {
                    console.log("Form submit event triggered");

                    // Add debugging to track form submission
                    console.log("⚠️ FORM SUBMISSION STARTED");

                    // Get the direct stock symbol value
                    var symbolValue = "";
                    var stockSymbolField = document.getElementById("StockSymbol");
                    if (stockSymbolField) {
                        symbolValue = stockSymbolField.value;
                    } else if (stockSymbolDropdown && stockSymbolDropdown.value) {
                        symbolValue = stockSymbolDropdown.value;
                    }

                    // Log form field values
                    console.log("Form field values at submission:");
                    console.log("- stockSymbol (direct):", symbolValue);
                    console.log("- stockSymbolDropdown:", stockSymbolDropdown ? stockSymbolDropdown.value : "null");
                    console.log("- datePurchasedPicker:", datePurchasedPicker ? datePurchasedPicker.value : "null");
                    console.log("- purchasePriceNumeric:", purchasePriceNumeric ? purchasePriceNumeric.value : "null");
                    console.log("- currentPriceNumeric:", currentPriceNumeric ? currentPriceNumeric.value : "null");
                    console.log("- sharesPurchasedNumeric:", sharesPurchasedNumeric ? sharesPurchasedNumeric.value : "null");
                    console.log("- sharesSoldNumeric:", sharesSoldNumeric ? sharesSoldNumeric.value : "null");

                    // Basic validation against the direct values we have
                    if (!symbolValue) {
                        e.preventDefault();
                        console.error("Stock symbol validation failed");
                        alert("Please enter a stock symbol");
                        return false;
                    }

                    if (datePurchasedPicker && !datePurchasedPicker.value) {
                        e.preventDefault();
                        console.error("Purchase date validation failed");
                        alert("Please select a purchase date");
                        return false;
                    }

                    // Add hidden fields for dates if using Syncfusion datepickers
                    if (datePurchasedPicker && datePurchasedPicker.value) {
                        var hiddenPurchaseDate = document.createElement('input');
                        hiddenPurchaseDate.type = 'hidden';
                        hiddenPurchaseDate.name = 'DatePurchased';
                        hiddenPurchaseDate.value = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                        this.appendChild(hiddenPurchaseDate);
                    }

                    if (dateSoldPicker && dateSoldPicker.value) {
                        var hiddenSaleDate = document.createElement('input');
                        hiddenSaleDate.type = 'hidden';
                        hiddenSaleDate.name = 'DateSold';
                        hiddenSaleDate.value = moment(dateSoldPicker.value).format('YYYY-MM-DD');
                        this.appendChild(hiddenSaleDate);
                    }

                    // Create a hidden input for the stock symbol to ensure it's submitted
                    // Note: formElement is already defined in the outer scope
                    var hiddenSymbolInput = document.createElement('input');
                    hiddenSymbolInput.type = 'hidden';
                    hiddenSymbolInput.name = 'StockSymbol';
                    hiddenSymbolInput.value = symbolValue;
                    this.appendChild(hiddenSymbolInput); // Using this instead of formElement
                    console.log("Added hidden stock symbol field:", hiddenSymbolInput.value);

                    // Set fallback prices if needed to ensure form validation passes
                    if (purchasePriceNumeric && (!purchasePriceNumeric.value || parseFloat(purchasePriceNumeric.value) <= 0)) {
                        console.warn("Setting fallback purchase price before submission");
                        purchasePriceNumeric.value = 1.00;
                    }

                    if (currentPriceNumeric && (!currentPriceNumeric.value || parseFloat(currentPriceNumeric.value) <= 0)) {
                        console.warn("Setting fallback current price before submission");
                        currentPriceNumeric.value = 1.00;
                    }

                    // Check shares purchased
                    if (sharesPurchasedNumeric && (!sharesPurchasedNumeric.value || parseFloat(sharesPurchasedNumeric.value) <= 0)) {
                        console.warn("Setting fallback shares purchased before submission");
                        sharesPurchasedNumeric.value = 1;
                    }

                    // Log form values right before submission
                    console.log("Final form values before submission:", {
                        id: idField ? idField.value : "missing",
                        stockSymbol: stockSymbolDropdown ? stockSymbolDropdown.value : "missing",
                        purchasePrice: purchasePriceNumeric ? purchasePriceNumeric.value : "missing",
                        currentPrice: currentPriceNumeric ? currentPriceNumeric.value : "missing",
                        datePurchased: datePurchasedPicker ? datePurchasedPicker.value : "missing"
                    });

                    // Ensure the ID field exists
                    var existingIdField = document.getElementById("Id");
                    if (!existingIdField) {
                        console.warn("ID field missing, creating it");
                        existingIdField = document.createElement('input');
                        existingIdField.type = 'hidden';
                        existingIdField.id = 'Id';
                        existingIdField.name = 'Id';
                        existingIdField.value = '0'; // For new records
                        this.appendChild(existingIdField);
                    }

                    console.log("Form action: " + this.action);
                    console.log("Form method: " + this.method);

                    // Log the Model.Id from Razor
                    console.log("Model ID from server: @(Model.Id)");

                    // Create hidden fields for all critical values to ensure they're submitted correctly
                    var hiddenStockSymbol = document.createElement('input');
                    hiddenStockSymbol.type = 'hidden';
                    hiddenStockSymbol.name = 'StockSymbol';
                    hiddenStockSymbol.value = symbolValue; // Use the value we already captured
                    this.appendChild(hiddenStockSymbol);

                    // Add hidden fields for numeric values to ensure they're submitted
                    if (purchasePriceNumeric) {
                        var hiddenPurchasePrice = document.createElement('input');
                        hiddenPurchasePrice.type = 'hidden';
                        hiddenPurchasePrice.name = 'PurchasePrice';
                        hiddenPurchasePrice.value = purchasePriceNumeric.value || '1.00';
                        this.appendChild(hiddenPurchasePrice);
                    }

                    if (currentPriceNumeric) {
                        var hiddenCurrentPrice = document.createElement('input');
                        hiddenCurrentPrice.type = 'hidden';
                        hiddenCurrentPrice.name = 'CurrentPrice';
                        hiddenCurrentPrice.value = currentPriceNumeric.value || '1.00';
                        this.appendChild(hiddenCurrentPrice);
                    }

                    if (sharesPurchasedNumeric) {
                        var hiddenSharesPurchased = document.createElement('input');
                        hiddenSharesPurchased.type = 'hidden';
                        hiddenSharesPurchased.name = 'NumberOfSharesPurchased';
                        hiddenSharesPurchased.value = sharesPurchasedNumeric.value || '1';
                        this.appendChild(hiddenSharesPurchased);
                    }

                    if (sharesSoldNumeric) {
                        var hiddenSharesSold = document.createElement('input');
                        hiddenSharesSold.type = 'hidden';
                        hiddenSharesSold.name = 'NumberOfSharesSold';
                        hiddenSharesSold.value = sharesSoldNumeric.value || '0';
                        this.appendChild(hiddenSharesSold);
                    }

                    console.log("Form submitting with values:", {
                        id: existingIdField ? existingIdField.value : "missing",
                        stockSymbol: symbolValue,
                        purchaseDate: datePurchasedPicker ? moment(datePurchasedPicker.value).format('YYYY-MM-DD') : "missing",
                        saleDate: dateSoldPicker ? moment(dateSoldPicker.value).format('YYYY-MM-DD') : "",
                        purchasePrice: purchasePriceNumeric ? purchasePriceNumeric.value : "missing",
                        currentPrice: currentPriceNumeric ? currentPriceNumeric.value : "missing",
                        sharesPurchased: sharesPurchasedNumeric ? sharesPurchasedNumeric.value : "missing",
                        sharesSold: sharesSoldNumeric ? sharesSoldNumeric.value : "missing"
                    });

                // Force submission using standard form submit to avoid any issues
                console.log("⚠️ FORM SUBMISSION COMPLETING - ABOUT TO SUBMIT");

                // Return true to allow standard form submission
                return true;
            });
            
            // Initialize price updates if stock is already selected
            if (stockSymbolDropdown && stockSymbolDropdown.value) {
                updatePrices();
            }
        }
        });
    </script>
}