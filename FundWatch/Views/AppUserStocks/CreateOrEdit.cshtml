@model FundWatch.Models.AppUserStock
@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Calendars
@using Syncfusion.EJ2.Inputs
@{
    ViewData["Title"] = Model.Id == 0 ? "Create" : "Edit";
    var stockSymbols = ViewBag.StockSymbols as List<StockSymbolData>;
}

<div class="container mt-4 mb-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@(Model.Id == 0 ? "Create" : "Edit") Stock Position</h3>
        </div>
        <div class="card-body">
            <form asp-action="CreateOrEdit" method="post">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                @if (Model.Id != 0)
                {
                    <input type="hidden" asp-for="Id" />
                }
                <input type="hidden" asp-for="UserId" />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().DropDownList("StockSymbol")
                            .Placeholder("Stock Symbol")
                            .FloatLabelType(FloatLabelType.Always)
                            .AllowFiltering(true)
                            .FilterBarPlaceholder("Search stocks...")
                            .FilterType(FilterType.Contains)
                            .PopupHeight("300px")
                            .CssClass("e-outline")
                            .Fields(new DropDownListFieldSettings
                            {
                                Text = "display",
                                Value = "symbol"
                            })
                            .DataSource(ViewBag.InitialStock ?? new List<object>())
                            .Value(Model.StockSymbol)
                            .Render())
                        <span asp-validation-for="StockSymbol" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().NumericTextBox("NumberOfSharesPurchased")
                            .Format("n0")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Number of Shares")
                            .Value(Model.NumberOfSharesPurchased)
                            .Render())
                        <span asp-validation-for="NumberOfSharesPurchased" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().DatePicker("DatePurchased")
                            .Format("MM/dd/yyyy")
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Purchase Date")
                            .Value(Model.DatePurchased)
                            .Render())
                        <span asp-validation-for="DatePurchased" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().NumericTextBox("PurchasePrice")
                            .Format("c2")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Purchase Price")
                            .Value(Model.PurchasePrice)
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().DatePicker("DateSold")
                            .Format("MM/dd/yyyy")
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Sale Date (Optional)")
                            .Value(Model.DateSold)
                            .Render())
                        <span asp-validation-for="DateSold" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        @(Html.EJS().NumericTextBox("CurrentPrice")
                            .Format("c2")
                            .Min(0)
                            .FloatLabelType(FloatLabelType.Always)
                            .Placeholder("Current Price")
                            .Value(Model.CurrentPrice)
                            .Readonly(true)
                            .Render())
                        <span asp-validation-for="CurrentPrice" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    @(Html.EJS().NumericTextBox("NumberOfSharesSold")
                        .Format("n0")
                        .Min(0)
                        .FloatLabelType(FloatLabelType.Always)
                        .Placeholder("Number of Shares Sold (Optional)")
                        .Value(Model.NumberOfSharesSold)
                        .Render())
                    <span asp-validation-for="NumberOfSharesSold" class="text-danger"></span>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a asp-action="Dashboard" class="btn btn-secondary">Back to Dashboard</a>
                    @(Html.EJS().Button("submitButton")
                        .Content(Model.Id == 0 ? "Create" : "Save")
                        .IsPrimary(true)
                        .CssClass("e-success")
                        .Render())
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get the dropdown instance
            var dropdownList = document.getElementById('StockSymbol').ej2_instances[0];
            var datePurchasedPicker = document.getElementById('DatePurchased').ej2_instances[0];
            var dateSoldPicker = document.getElementById('DateSold').ej2_instances[0];
            var purchasePriceInput = document.getElementById('PurchasePrice').ej2_instances[0];
            var currentPriceInput = document.getElementById('CurrentPrice').ej2_instances[0];

            // Configure the filtering
            dropdownList.filtering = function (e) {
                e.preventDefaultAction = true;

                if (!e.text || e.text.length < 1) {
                    dropdownList.dataSource = [];
                    return;
                }

                fetch('/AppUserStocks/SearchStocks?term=' + encodeURIComponent(e.text))
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && Array.isArray(data.stocks)) {
                            const stocks = data.stocks.map(stock => ({
                                symbol: stock.symbol,
                                display: `${stock.symbol} - ${stock.name}`,
                            }));
                            dropdownList.dataSource = stocks;
                        } else {
                            dropdownList.dataSource = [];
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching stocks:', error);
                        dropdownList.dataSource = [];
                    });
            };

            function updatePrices() {
                const symbol = dropdownList.value;
                if (!symbol) return;

                // Update purchase price
                if (datePurchasedPicker.value) {
                    const purchaseDate = moment(datePurchasedPicker.value).format('YYYY-MM-DD');
                    fetch(`/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${purchaseDate}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                purchasePriceInput.value = data.price;
                            }
                        })
                        .catch(error => console.error('Error fetching purchase price:', error));
                }

                // Update current/sale price based on sale date or current date
                const saleDate = dateSoldPicker.value ?
                    moment(dateSoldPicker.value).format('YYYY-MM-DD') :
                    moment().format('YYYY-MM-DD');

                fetch(`/AppUserStocks/GetHistoricalPrice?stockSymbol=${encodeURIComponent(symbol)}&date=${saleDate}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            currentPriceInput.value = data.price;
                        }
                    })
                    .catch(error => console.error('Error fetching current/sale price:', error));
            }

            // Update prices when stock is selected
            dropdownList.change = function (e) {
                if (e.value) {
                    updatePrices();
                }
            };

            // Date change handlers
            datePurchasedPicker.change = function () {
                validateDates();
                updatePrices();
            };

            dateSoldPicker.change = function () {
                validateDates();
                updatePrices();
            };

            function validateDates() {
                if (datePurchasedPicker.value) {
                    dateSoldPicker.min = datePurchasedPicker.value;
                    if (dateSoldPicker.value && dateSoldPicker.value < datePurchasedPicker.value) {
                        dateSoldPicker.value = null;
                        currentPriceInput.value = 0;
                    }
                }

                const today = new Date();
                today.setHours(23, 59, 59, 999);
                datePurchasedPicker.max = today;
                dateSoldPicker.max = today;
            }

            // Initial validation and price update
            validateDates();
            // Add slight delay to ensure dropdown is fully initialized
            setTimeout(() => {
                if (dropdownList.value) {
                    updatePrices();
                }
            }, 100);
        });
    </script>
}