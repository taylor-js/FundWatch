@model FundWatch.Models.ViewModels.PortfolioDashboardViewModel
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.Charts
@using Syncfusion.EJ2.Grids
@{
    var culture = new System.Globalization.CultureInfo("en-US");
    // Prepare the series data for Highcharts
    var seriesData = new List<object>();
    foreach (var stock in Model.PerformanceData.OrderBy(kvp => kvp.Key))
    {
        if (stock.Value != null && stock.Value.Any())
        {
            seriesData.Add(new
            {
                name = stock.Key,
                data = stock.Value.Select(p => new object[] {
                                        p.Date.ToString("yyyy-MM-ddTHH:mm:ss"),
                                        p.Value
                            }).ToArray()
            });
        }
    }

    // Serialize to JSON
    var seriesDataJson = Newtonsoft.Json.JsonConvert.SerializeObject(seriesData);
}

<!-- Portfolio Overview Cards -->
<div class="row mb-4 gy-4" id="overview-metrics">
    <div class="col-sm-6 col-md-3 d-flex">
        <div class="card shadow overview-scalar-card w-100">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-center overview-card-header">
                <h5 class="card-title mb-0 text-center">Total Portfolio Value</h5>
            </div>
            <div class="card-body text-center">
                <h3 class="mb-0">@Model.PortfolioMetrics.TotalValue.ToString("C2", culture)</h3>
                <small class="@(Model.PortfolioMetrics.TotalPerformance >= 0 ? "text-success" : "text-danger")">
                    @(Model.PortfolioMetrics.TotalPerformance >= 0 ? "+" : "")@Model.PortfolioMetrics.TotalPerformance.ToString("F2")%
                </small>
            </div>
        </div>
    </div>

    <div class="col-sm-6 col-md-3 d-flex">
        <div class="card shadow overview-scalar-card w-100">
            <div class="card-header bg-success text-white d-flex align-items-center justify-content-center overview-card-header">
                <h5 class="card-title mb-0 text-center">Portfolio Diversity</h5>
            </div>
            <div class="card-body text-center">
                <h3 class="mb-0">@Model.PortfolioMetrics.UniqueSectors</h3>
                <small class="text-muted">Sectors Represented</small>
            </div>
        </div>
    </div>

    <div class="col-sm-6 col-md-3 d-flex">
        <div class="card shadow overview-scalar-card w-100">
            <div class="card-header bg-info text-white d-flex align-items-center justify-content-center overview-card-header">
                <h5 class="card-title mb-0 text-center">Best Performer</h5>
            </div>
            <div class="card-body text-center">
                <h3 class="mb-0">@Model.PortfolioMetrics.BestPerformingStock</h3>
                <small class="text-success">
                    @(Model.PortfolioMetrics.BestPerformingStockReturn.ToString("F2") ?? "0.00")%
                </small>
            </div>
        </div>
    </div>

    <div class="col-sm-6 col-md-3 d-flex">
        <div class="card shadow overview-scalar-card w-100">
            <div class="card-header bg-danger text-white d-flex align-items-center justify-content-center overview-card-header">
                <h5 class="card-title mb-0 text-center">Worst Performer</h5>
            </div>
            <div class="card-body text-center">
                <h3 class="mb-0">@Model.PortfolioMetrics.WorstPerformingStock</h3>
                <small class="text-danger">
                    @(Model.PortfolioMetrics.WorstPerformingStockReturn.ToString("F2") ?? "0.00")%
                </small>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Function to set equal heights for card headers
        function equalizeHeaderHeights() {
            const headers = document.querySelectorAll('#overview-metrics .overview-card-header');
            let maxHeight = 0;
            
            // Reset heights first
            headers.forEach(header => {
                header.style.height = 'auto';
            });
            
            // Force a reflow/recalculation
            window.getComputedStyle(headers[0]).height;
            
            // Find the maximum height
            headers.forEach(header => {
                const height = header.offsetHeight;
                maxHeight = Math.max(maxHeight, height);
            });
            
            // Set all headers to the maximum height
            headers.forEach(header => {
                header.style.height = maxHeight + 'px';
            });
        }
        
        // Run with a slight delay to ensure content is fully rendered
        setTimeout(equalizeHeaderHeights, 100);
        
        // Run when the overview tab is shown
        const overviewTabBtn = document.querySelector('[data-bs-target="#overviewTab"]');
        if (overviewTabBtn) {
            overviewTabBtn.addEventListener('shown.bs.tab', function() {
                setTimeout(equalizeHeaderHeights, 50);
            });
        }
        
        // Run on window resize
        window.addEventListener('resize', equalizeHeaderHeights);
    });
</script>

<!-- Performance Chart - Part of Overview Tab -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow full-width-chart">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Stock Performance History</h5>
            </div>
            <div class="card-body">
                @if (Model.PerformanceData != null && Model.PerformanceData.Any())
                {
                    <div class="chart-description">
                        <p class="text-center mb-1">
                            Track the performance of your investments over time. Use the period selectors to view different time ranges.
                        </p>
                    </div>
                    <div id="stockChart" style="width: 100%; height: 500px; max-height: 500px; overflow: hidden;"></div>

                    <script type="text/javascript">
                        document.addEventListener('DOMContentLoaded', function() {
                            // Load series data from server-side JSON
                            var seriesData = JSON.parse('@Html.Raw(seriesDataJson.Replace("'", "\\'"))');
                            
                            // Debug chart library loading
                            console.log("Highcharts version:", Highcharts?.version);
                            console.log("Highcharts object:", Highcharts);
                            console.log("stockChart function available:", typeof Highcharts?.stockChart === 'function');
                            console.log("StockChart function available:", typeof Highcharts?.StockChart === 'function');
                            
                            // Check if chart element exists
                            var chartElement = document.getElementById('stockChart');
                            if (!chartElement) {
                                console.error('Chart element not found');
                                return;
                            }
                            
                            // Check if we have valid data
                            if (!seriesData || seriesData.length === 0) {
                                // Display a user-friendly message
                                chartElement.innerHTML = `
                                    <div class="alert alert-info text-center p-5" style="margin-top: 50px;">
                                        <h5>No performance data available</h5>
                                        <p class="mb-0">
                                            Add some stocks to see their performance over time.
                                        </p>
                                    </div>`;
                                return;
                            }
                            
                            // Debug chart libraries
                            console.log("Highcharts version:", Highcharts?.version);
                            console.log("stockChart function available:", typeof Highcharts?.stockChart === 'function');
                            
                            // Check if Highcharts is available
                            if (typeof Highcharts === 'undefined' || typeof Highcharts.stockChart !== 'function') {
                                console.error('Highcharts or stockChart function not available');
                                chartElement.innerHTML = `
                                    <div class="alert alert-warning text-center p-5" style="margin-top: 50px;">
                                        <h5>Chart library not loaded</h5>
                                        <p class="mb-0">Please refresh the page.</p>
                                    </div>`;
                                return;
                            }
                            
                            // Create the Highcharts stock chart
                            Highcharts.stockChart('stockChart', {
                                chart: {
                                    backgroundColor: '#212529',
                                    style: {
                                        fontFamily: 'Inter, sans-serif'
                                    }
                                },
                                rangeSelector: {
                                    selected: 5, // Default to 5Y view
                                    buttons: [
                                        { type: 'month', count: 1, text: '1M' },
                                        { type: 'month', count: 3, text: '3M' },
                                        { type: 'month', count: 6, text: '6M' },
                                        { type: 'ytd', text: 'YTD' },
                                        { type: 'year', count: 1, text: '1Y' },
                                        { type: 'year', count: 5, text: '5Y' },
                                        { type: 'all', text: 'ALL' }
                                    ],
                                    buttonTheme: {
                                        fill: 'none',
                                        stroke: 'none',
                                        'stroke-width': 0,
                                        r: 8,
                                        style: {
                                            color: '#CCCCCC',
                                            fontWeight: 'normal'
                                        },
                                        states: {
                                            hover: {
                                                fill: '#4361EE',
                                                style: { color: 'white' }
                                            },
                                            select: {
                                                fill: '#4361EE',
                                                style: { color: 'white' }
                                            }
                                        }
                                    },
                                    inputEnabled: false
                                },
                                title: { text: null },
                                navigator: { enabled: true },
                                scrollbar: { enabled: true },
                                xAxis: {
                                    type: 'datetime',
                                    labels: { style: { color: '#CCCCCC' } },
                                    lineColor: '#666666',
                                    tickColor: '#666666'
                                },
                                yAxis: {
                                    labels: {
                                        formatter: function() {
                                            return '$' + this.value.toFixed(2);
                                        },
                                        style: { color: '#CCCCCC' }
                                    },
                                    gridLineColor: 'rgba(255, 255, 255, 0.1)'
                                },
                                chart: {
                                    backgroundColor: '#212529',
                                    style: {
                                        fontFamily: 'Inter, sans-serif'
                                    }
                                },
                                rangeSelector: {
                                    selected: 5, // Default to 5Y view
                                    buttons: [
                                        { type: 'month', count: 1, text: '1M' },
                                        { type: 'month', count: 3, text: '3M' },
                                        { type: 'month', count: 6, text: '6M' },
                                        { type: 'ytd', text: 'YTD' },
                                        { type: 'year', count: 1, text: '1Y' },
                                        { type: 'year', count: 5, text: '5Y' },
                                        { type: 'all', text: 'ALL' }
                                    ],
                                    buttonTheme: {
                                        fill: 'none',
                                        stroke: 'none',
                                        'stroke-width': 0,
                                        r: 8,
                                        style: {
                                            color: '#CCCCCC',
                                            fontWeight: 'normal'
                                        },
                                        states: {
                                            hover: {
                                                fill: '#4361EE',
                                                style: { color: 'white' }
                                            },
                                            select: {
                                                fill: '#4361EE',
                                                style: { color: 'white' }
                                            }
                                        }
                                    },
                                    inputEnabled: false
                                },
                                title: { text: null },
                                navigator: { enabled: true },
                                scrollbar: { enabled: true },
                                xAxis: {
                                    type: 'datetime',
                                    labels: { style: { color: '#CCCCCC' } },
                                    lineColor: '#666666',
                                    tickColor: '#666666'
                                },
                                yAxis: {
                                    labels: {
                                        formatter: function() {
                                            return '$' + this.value.toFixed(2);
                                        },
                                        style: { color: '#CCCCCC' }
                                    },
                                    gridLineColor: 'rgba(255, 255, 255, 0.1)'
                                },
                                tooltip: {
                                    shared: true,
                                    split: false,
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    style: { color: '#FFFFFF' },
                                    valueDecimals: 2,
                                    valuePrefix: '$'
                                },
                                legend: {
                                    enabled: true,
                                    itemStyle: { color: '#CCCCCC' },
                                    itemHoverStyle: { color: '#FFFFFF' }
                                },
                                plotOptions: {
                                    series: {
                                        lineWidth: 2,
                                        states: {
                                            hover: { lineWidth: 3 }
                                        }
                                    }
                                },
                                series: seriesData,
                                credits: { enabled: false }
                            });
                        });
                    </script>
                }
                else
                {
                    <div class="alert alert-info">
                        No performance data available. Add some stocks to see their performance over time.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Portfolio Insights Section with 2-column grid -->
<div class="row g-3 mb-4">
    <!-- Portfolio Heatmap -->
    <div class="col-md-6">
        <div class="card shadow h-100">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0">Portfolio Heatmap</h5>
            </div>
            <div class="card-body">
                <div id="portfolioHeatmapChart" style="width: 100%; height: 450px;"></div>
            </div>
        </div>
    </div>

    <!-- Top Performers -->
    <div class="col-md-6">
        <div class="card shadow h-100">
            <div class="card-header bg-warning text-dark">
                <h5 class="card-title mb-0">Top Performers</h5>
            </div>
            <div class="card-body">
                <div id="topPerformersChart" style="width: 100%; height: 450px;"></div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Initializing Overview tab additional charts');

        // Check if Highcharts is loaded
        if (typeof Highcharts === 'undefined') {
            console.error('Highcharts not loaded - skipping charts initialization');
            return;
        }

        // Generate heatmap data from portfolio stocks
        let heatmapData = [];
        let topPerformersData = [];

        // Always generate charts, don't depend on seriesData
        // Generate portfolio heatmap data
        renderPortfolioHeatmap();

        // Generate top performers chart
        renderTopPerformersChart();
    });

    function renderPortfolioHeatmap() {
        // First, collect all stock data
        let stockPerformance = @Html.Raw(Json.Serialize(Model.UserStocks.Select(s => new {
            name = s.StockSymbol,
            value = s.PerformancePercentage * 100,
            totalValue = s.TotalValue
        }).ToList()));

        // If no data, show message
        if (!stockPerformance || stockPerformance.length === 0) {
            document.getElementById('portfolioHeatmapChart').innerHTML =
                '<div class="alert alert-info text-center p-5">No stock performance data available yet.</div>';
            return;
        }

        // Format data for heatmap - normalized by market value
        let heatmapData = stockPerformance.map(function(stock) {
            return {
                name: stock.name,
                value: stock.value,
                valueText: (stock.value > 0 ? '+' : '') + stock.value.toFixed(2) + '%',
                colorValue: stock.value,  // For coloring
                z: stock.totalValue       // For block size
            };
        });

        // Sort by performance
        heatmapData.sort(function(a, b) {
            return b.value - a.value;
        });

        // Create the heatmap
        Highcharts.chart('portfolioHeatmapChart', {
            chart: {
                type: 'treemap',
                backgroundColor: '#212529'
            },
            title: {
                text: null
            },
            subtitle: {
                text: 'Size corresponds to position value, color to performance',
                style: { color: '#CCCCCC' }
            },
            tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                style: { color: '#FFFFFF' },
                formatter: function() {
                    return '<b>' + this.point.name + '</b><br>' +
                           'Performance: ' + this.point.valueText + '<br>' +
                           'Value: $' + Highcharts.numberFormat(this.point.z, 2);
                }
            },
            colorAxis: {
                minColor: '#D33',
                maxColor: '#5C5',
                stops: [
                    [0, '#D33'],     // Red for negative
                    [0.5, '#ddd'],   // Gray for neutral
                    [1, '#5C5']      // Green for positive
                ]
            },
            series: [{
                type: 'treemap',
                layoutAlgorithm: 'squarified',
                data: heatmapData,
                borderWidth: 2,
                borderColor: '#212529',
                dataLabels: {
                    enabled: true,
                    style: {
                        fontSize: '12px',
                        fontWeight: 'bold',
                        textOutline: 'none'
                    },
                    formatter: function() {
                        return this.point.name + '<br>' + this.point.valueText;
                    }
                }
            }],
            credits: { enabled: false }
        });
    }

    function renderTopPerformersChart() {
        // Get all stock data including value for more context
        let stockPerformance = @Html.Raw(Json.Serialize(Model.UserStocks.Select(s => new {
            name = s.StockSymbol,
            performance = s.PerformancePercentage * 100,
            totalValue = s.TotalValue
        }).ToList()));

        // If no data, show message
        if (!stockPerformance || stockPerformance.length === 0) {
            document.getElementById('topPerformersChart').innerHTML =
                '<div class="alert alert-info text-center p-5">No stock performance data available yet.</div>';
            return;
        }

        // Sort stocks by performance (best to worst)
        stockPerformance.sort((a, b) => b.performance - a.performance);

        // Get best and worst performers
        let bestPerformers = stockPerformance.slice(0, Math.min(5, stockPerformance.length));
        let worstPerformers = [];

        // Only include worst performers if we have enough distinct stocks
        if (stockPerformance.length > 5) {
            worstPerformers = stockPerformance.slice(-Math.min(5, stockPerformance.length));
        }

        // Create two separate series for clear presentation
        Highcharts.chart('topPerformersChart', {
            chart: {
                type: 'bar',
                backgroundColor: '#212529'
            },
            title: {
                text: 'Portfolio Performance',
                style: {
                    color: '#CCCCCC',
                    fontSize: '14px'
                }
            },
            subtitle: {
                text: 'Best and worst performers',
                style: {
                    color: '#AAAAAA',
                    fontSize: '12px'
                }
            },
            xAxis: [{
                categories: bestPerformers.map(item => item.name),
                title: {
                    text: 'Best Performers',
                    style: { color: '#5C5' }
                },
                labels: {
                    style: { color: '#CCCCCC' }
                },
                lineColor: '#444'
            }, {
                // Only create second axis if we have worst performers
                categories: worstPerformers.map(item => item.name),
                title: {
                    text: worstPerformers.length > 0 ? 'Worst Performers' : '',
                    style: { color: '#D33' }
                },
                labels: {
                    style: { color: '#CCCCCC' }
                },
                opposite: true,
                linkedTo: 0,
                lineColor: '#444'
            }],
            yAxis: {
                title: {
                    text: 'Performance (%)',
                    style: { color: '#CCCCCC' }
                },
                labels: {
                    formatter: function() {
                        return this.value + '%';
                    },
                    style: { color: '#CCCCCC' }
                },
                gridLineColor: 'rgba(255, 255, 255, 0.1)'
            },
            tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                style: { color: '#FFFFFF' },
                formatter: function() {
                    return '<b>' + this.point.category + '</b><br>' +
                           'Performance: ' + (this.point.y > 0 ? '+' : '') +
                           Highcharts.numberFormat(this.point.y, 2) + '%<br>' +
                           'Value: $' + Highcharts.numberFormat(this.point.custom?.value || 0, 2);
                }
            },
            plotOptions: {
                series: {
                    dataLabels: {
                        enabled: true,
                        formatter: function() {
                            return (this.y > 0 ? '+' : '') + Highcharts.numberFormat(this.y, 1) + '%';
                        },
                        style: {
                            color: '#FFFFFF',
                            textOutline: 'none',
                            fontSize: '11px'
                        }
                    },
                    pointPadding: 0.2,
                    groupPadding: 0.1
                }
            },
            legend: {
                enabled: true,
                itemStyle: { color: '#CCCCCC' },
                verticalAlign: 'top'
            },
            series: [{
                name: 'Best Performers',
                data: bestPerformers.map(s => ({
                    y: s.performance,
                    custom: {
                        value: s.totalValue
                    },
                    color: '#5C5'
                })),
                color: '#5C5'
            },
            ...(worstPerformers.length > 0 ? [{
                name: 'Worst Performers',
                data: worstPerformers.map(s => ({
                    y: s.performance,
                    custom: {
                        value: s.totalValue
                    },
                    color: '#D33'
                })),
                color: '#D33',
                xAxis: 1
            }] : [])],
            credits: { enabled: false }
        });
    }
</script>